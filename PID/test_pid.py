# /usr/bin/env python
# -*- coding: UTF-8 -*-
# 4. PID调试的一些经验
#
# PID调试的一般原则：
#
# 在输出不震荡时，增大比例增益；
#
# 在输出不震荡时，减少积分时间常数；
#
# 在输出不震荡时，增大微分时间常数；
#
# PID调节口诀：
#
# 参数整定找最佳，从小到大顺序查
#
# 先是比例后积分，最后再把微分加
#
# 曲线振荡很频繁，比例度盘要放大
#
# 曲线漂浮绕大湾，比例度盘往小扳
#
# 曲线偏离回复慢，积分时间往下降
#
# 曲线波动周期长，积分时间再加长
#
# 曲线振荡频率快，先把微分降下来
#
# 动差大来波动慢，微分时间应加长
#
# 理想曲线两个波，前高后低四比一
#
# 一看二调多分析，调节质量不会低

# 比例系数Kp:
#
# 增大比例系数使系统反应灵敏，调节速度加快，并且可以减小稳态误差。但是比例系数过大会使超调量增大，振荡次数增加，调节时间加长，动态性能变坏，
# 比例系数太大甚至会使闭环系统不稳定。
#
# 比例控制不能消除稳态误差。
#
# 积分系数Ki:
#
# 使系统消除稳态误差,提高无差度。积分控制的作用是，只要系统有误差存在，积分调节就进行,积分控制器就不断地积累，输出控制量，直至无差,积分调节停止,
# 积分调节输出一常值。因而，只要有足够的时间，积分控制将能完全消除误差，使系统误差为零，从而消除稳态误差。积分作用的强弱取决于积分时间常数Ti,Ti越小,
# 积分作用就越强，积分作用太强会使系统超调加大，甚至使系统出现振荡，反之Ti大则积分作用弱。加入积分调节可使系统稳定性下降,动态响应变慢。
#
# 微分系数Kd:
#
# 微分控制可以减小超调量，克服振荡，使系统的稳定性提高，同时加快系统的动态响应速度，减小调整时间，从而改善系统的动态性能。
#
# 微分的控制作用跟偏差的变化的速度有关，微分控制能够预测偏差，产生超前的校正作用，有助于减少超调。
# PID的公式原理：
# 某时刻的偏差e(t),Ti: 积分时间,Td: 微分时间
# y(t)=Kp(e(t)+1/Ti∫e(t)dt + Td*de(t)/dt）
# 要在计算机上实现则需要将其离散化：
# u(k)=Kp(e(k)+T/Ti*Σe(n)+Td/T(e(k)-e(k-1)))
# u(k)=Kp*e(k)+Ki*Σe(n)+Kd(e(k)-e(k-1))
import matplotlib.pyplot as plt
from PID import PIDcontrol
from pytracal import trac_new

vms=[27, 26.893344170304953, 26.701176902554888, 26.509009634804823, 26.316842367054758, 26.124675099304692, 25.931974133004704, 25.73828201225486, 25.544589891505016, 25.35089777075517, 25.157205650005327, 24.963236466595436, 24.768005108845333, 24.57277375109523, 24.377542393345127, 24.182311035595024, 23.898207576419917, 23.6123142622948, 23.32642094816968, 23.04052763404456, 22.75228151311955, 22.463620190994554, 22.17495886886956, 21.885212413864565, 21.59376869973957, 21.302324985614575, 21.01088127148958, 20.716752650484636, 20.422512158359694, 20.128271666234753, 19.833352923459728, 19.53790126945964, 19.24244961545955, 18.947129618469496, 18.652452417469625, 18.264400216469603, 17.876583636549583, 17.489291503549566, 17.10199937054955, 16.71525158613964, 16.32870513613977, 15.94226106785989, 15.556445915859955, 15.17063076386002, 14.785209914010029, 14.400111675009992, 14.015013436009955, 13.630589623889957, 13.24619391288996, 12.862039051939966, 12.478331483939975, 12.094623915939984, 11.711421667190036, 11.328387858190103, 10.945446361410161, 10.563071925410162, 10.180697489410163, 9.798658447690157, 9.416929000690144, 9.408699553690203, 9.400470106690262, 9.392240659690321, 9.38401121269038, 9.375781765690439, 9.367552318690498, 9.359322871690557, 9.351093424690616, 9.342863977690675, 9.334634530690733, 9.326405083690792, 9.318175636690851, 9.30994618969091, 9.301716742690969, 9.293487295691028, 9.285257848691087, 9.277028401691146, 9.268798954691205, 9.260569507691264, 9.252340060691322, 9.244110613691381, 9.23588116669144, 9.227651719691499, 8.846174513891503, 8.465075669891531, 8.08397682589156, 7.796684335191564, 7.789701710191579, 7.782719085191594, 7.7757364601916095, 7.7687538351916245, 7.76177121019164, 7.754788585191655, 7.374305960191688, 6.99382935353172, 6.613948562531722, 6.234067771531724, 5.854410211151735, 5.475116869151759, 5.095823527151784, 4.7169542525117985, 4.33823397451181, 3.9595695644118205, 3.5814079654118274, 3.2032463664118342, 2.825335142651843, 2.4477178376518545, 2.443600532651848, 2.4394832276518414, 2.435365922651835, 2.4312486176518284, 2.427131312651822, 2.4230140076518154, 2.418896702651809, 2.4147793976518024, 2.410662092651796, 2.4065447876517894, 2.402427482651783, 2.3983101776517763, 2.39419287265177, 2.3900755676517633, 2.385958262651757, 2.3818409576517503, 2.377723652651744, 2.3736063476517373, 2.3694890426517308, 2.3653717376517243, 2.3612544326517177, 2.3571371276517112, 2.3530198226517047, 2.348902517651698, 2.3447852126516917, 2.340667907651685, 2.3365506026516787, 2.332433297651672, 2.3283159926516657, 2.324198687651659, 2.3200813826516526, 2.315964077651646, 2.3118467726516396, 2.307729467651633, 2.3036121626516266, 2.29949485765162, 2.2953775526516136, 2.291260247651607, 2.2871429426516006, 2.283025637651594, 2.2789083326515875, 2.274791027651581, 2.2706737226515745, 2.266556417651568, 2.2624391126515615, 2.258321807651555, 2.2542045026515485, 2.250087197651542, 2.2459698926515355, 2.241852587651529, 2.2377352826515224, 2.233617977651516, 2.2295006726515094, 2.225383367651503, 2.2212660626514964, 2.21714875765149, 2.2130314526514834, 2.208914147651477, 2.2047968426514704, 2.200679537651464, 2.1965622326514573, 2.192444927651451, 2.1883276226514443, 2.184210317651438, 2.1800930126514313, 2.175975707651425, 2.1718584026514183, 2.1677410976514118, 2.1636237926514053, 2.1595064876513987, 2.1553891826513922, 2.1512718776513857, 2.147154572651379, 2.1430372676513727, 2.138919962651366, 2.1348026576513597, 2.130685352651353, 2.1265680476513467, 2.12245074265134, 2.1183334376513336, 2.114216132651327, 2.1100988276513206, 2.105981522651314, 2.1018642176513076, 2.097746912651301, 2.0936296076512946, 2.089512302651288, 2.0853949976512816, 2.081277692651275, 2.0771603876512685, 2.073043082651262, 2.0689257776512555, 2.064808472651249, 2.0606911676512425, 2.056573862651236, 2.0524565576512295, 2.048339252651223, 2.0442219476512165, 2.04010464265121, 2.0359873376512034, 2.031870032651197, 2.0277527276511904, 2.023635422651184, 2.0195181176511774, 2.015400812651171, 2.0112835076511644, 2.007166202651158, 2.0030488976511513, 1.9990640701511482, 1.995476675151155, 1.9918892801511618, 1.9883018851511687, 1.9847144901511755, 1.9811270951511823, 1.9775397001511892, 1.973952305151196, 1.9703649101512029, 1.9667775151512097, 1.9631901201512165, 1.9596027251512234, 1.9560153301512302, 1.952427935151237, 1.9488405401512439, 1.9452531451512507, 1.9416657501512575, 1.9380783551512644, 1.9344909601512712, 1.930903565151278, 1.9273161701512849, 1.9237287751512917, 1.9201413801512985, 1.9165539851513054, 1.9129665901513122, 1.909379195151319, 1.9057918001513259, 1.9022044051513327, 1.8986170101513395, 1.8950296151513464, 1.8914422201513532, 1.88785482515136, 1.8842674301513669, 1.8806800351513737, 1.8770926401513806, 1.8735052451513874, 1.8699178501513942, 1.866330455151401, 1.862743060151408, 1.8591556651514147, 1.8555682701514216, 1.8519808751514284, 1.8483934801514352, 1.844806085151442, 1.841218690151449, 1.8376312951514557, 1.8340439001514626, 1.8304565051514694, 1.8268691101514762, 1.823281715151483, 1.81969432015149, 1.8161069251514967, 1.8125195301515036, 1.8089321351515104, 1.8053447401515172, 1.801757345151524, 1.798169950151531, 1.7945825551515378, 1.7909951601515446, 1.7874077651515514, 1.7838203701515583, 1.780232975151565, 1.776645580151572, 1.7730581851515788, 1.7694707901515856, 1.7658833951515924, 1.7622960001515993, 1.758708605151606, 1.755121210151613, 1.7515338151516198, 1.7479464201516266, 1.7443590251516334, 1.7407716301516403, 1.737184235151647, 1.733596840151654, 1.7300094451516608, 1.7264220501516676, 1.7228346551516744, 1.7192472601516813, 1.7156598651516881, 1.712072470151695, 1.7084850751517018, 1.7048976801517086, 1.7013102851517155, 1.6977228901517223, 1.6941354951517291, 1.690548100151736, 1.6869607051517428, 1.6833733101517496, 1.6797859151517565, 1.6761985201517633, 1.6726111251517701, 1.669023730151777, 1.6654363351517838, 1.6618489401517906, 1.6582615451517975, 1.6546741501518043, 1.6510867551518111, 1.647499360151818, 1.6439119651518248, 1.6403245701518316, 1.6367371751518385, 1.6331497801518453, 1.6295623851518521, 1.625974990151859, 1.6223875951518658, 1.6188002001518726, 1.6152128051518795, 1.6116254101518863, 1.6080380151518932, 1.6044506201519, 1.6008632251519068, 1.5972758301519137, 1.5936884351519205, 1.5901010401519273, 1.5865136451519342, 1.582926250151941, 1.5793388551519478, 1.5757514601519547, 1.5721640651519615, 1.5685766701519683, 1.5649892751519752, 1.561401880151982, 1.5578144851519888, 1.5542270901519957, 1.5506396951520025, 1.5470523001520093, 1.5434649051520162, 1.539877510152023, 1.5362901151520298, 1.5327027201520367, 1.5291153251520435, 1.5255279301520503, 1.4285655351520394, 1.3316031401520285, 1.2346407451520176, 1.1376783501520067, 1.0407159551519958, 0.8500649627119955, 0.846075519711999, 0.8420860767120025, 0.838096633712006, 0.8341071907120096, 0.8301177477120131, 0.8261283047120166, 0.8221388617120201, 0.8181494187120236, 0.8141599757120271, 0.8101705327120307, 0.8061810897120342, 0.8021916467120377, 0.7982022037120412, 0.7942127607120447, 0.7902233177120482, 0.7862338747120518, 0.7822444317120553, 0.7782549887120588, 0.7742655457120623, 0.7702761027120658, 0.7662866597120693, 0.6689222167120662, 0.6649327737120697, 0.6609433307120732, 0.6569538877120767, 0.6529644447120803, 0.6489750017120838, 0.6449855587120873, 0.6409961157120908, 0.6370066727120943, 0.6330172297120978, 0.5356527867120947, 0.15816334371209384, 0.000000008]
dang=[1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 3, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 5,0]

genvms = (x for x in vms)
#实例化“停车对标”类
# tank1 = PIDcontrol.tank(0.5, 0.2, 0.01)
def pidcontrol(kp=0.5,ki=0.2,kd=0.01,current_level=0,setLevel=0):
    """
    根据当前速度和推荐速度返回一个挡位值
    :param current_level:
    :param setLevel:
    :return:
    """
    stopTrainInPID1 = PIDcontrol.stopTrainInPID(kp, ki, kd)
    stopTrainInPID1.SetLevel=setLevel
    stopTrainInPID1.update(current_level)
    speed_gain = stopTrainInPID1.output
    print ("speed_gain:",speed_gain)
    if -0.1<=speed_gain<0.01:
        dangwei = 0
    elif -0.01<=speed_gain<-0.1:
        dangwei = 1
    elif -0.3<=speed_gain<-0.01:
        dangwei = 2
    elif -0.29<=speed_gain<-0.3:
        dangwei = 3
    elif -0.45<=speed_gain<-0.29:
        dangwei = 4
    else:
        dangwei = 5
    return dangwei
#
#
# stopTrainInPID1 = PIDcontrol.stopTrainInPID(0.5, 0.2, 0.01)
# #当前速度
# current_level = 27
# #用于储存速度变化的列表
# levels=[27]
# distance =[2000]
# for i in range(len(vms)):
#     stopTrainInPID1.SetLevel = next(genvms)
#     # water_loss = random.randint(10,15)
#     stopTrainInPID1.update(current_level)
#     #应加速度
#     speed_gain = stopTrainInPID1.output
#     print("speed_gain:",speed_gain,dang[i])
#     if -0.1<=speed_gain<0.01:
#         dangwei = 0
#     elif -0.01<=speed_gain<-0.1:
#         dangwei = 1
#     elif -0.3<=speed_gain<-0.01:
#         dangwei = 2
#     elif -0.29<=speed_gain<-0.3:
#         dangwei = 3
#     elif -0.45<=speed_gain<-0.29:
#         dangwei = 4
#     else:
#         dangwei = 5
#     newresult = trac_new.trac_new_speed(current_level, dangwei, 1.0)
#     current_level=newresult[0]
#     newdistance = int(distance[-1])-newresult[1]
#     distance.append(newdistance)
#
#     #更新当前速度
#     current_level = current_level+speed_gain
#     levels.append(current_level)
#     # print(current_level, time.time())
# vms.append(0)
# print "",len(vms),len(levels),len(distance)
# plt.plot(distance,levels,color="y",label ='pidcurrent_level')
# plt.plot(distance,vms,color="g",label ='pidvms')
# plt.legend()
# plt.grid(True)
# print(max(levels))
# plt.show()
# plt.savefig(r'C:\Users\syl\Desktop\trainforactr\PID\pidResult')