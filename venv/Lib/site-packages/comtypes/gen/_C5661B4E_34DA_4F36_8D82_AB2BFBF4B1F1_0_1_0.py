# -*- coding: mbcs -*-
typelib_path = 'C:\\Program Files\\Common Files\\Autodesk Shared\\axdb23enu.tlb'
_lcid = 0 # change this if required
from ctypes import *
from comtypes import GUID
from comtypes import CoClass
import comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0
from ctypes import HRESULT
from comtypes.automation import VARIANT
from comtypes import BSTR
from comtypes.automation import IDispatch
LONG_PTR = c_longlong
from comtypes import helpstring
from comtypes import COMMETHOD
from comtypes import dispid
from ctypes.wintypes import VARIANT_BOOL
ACAD_NOUNITS = c_double
ACAD_LTYPE = BSTR
ACAD_ANGLE = c_double
from comtypes import IUnknown
ACAD_NULL = c_int
ACAD_DISTANCE = c_double
ACAD_POINT = VARIANT
ACAD_LAYER = BSTR


class AcadSecurityParams(CoClass):
    _reg_clsid_ = GUID('{E47A3C32-7DF0-483D-8537-05A2B0E17A7E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
class IAcadSecurityParams(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{C5BAE59D-A63E-44AC-A4BE-A850299951B6}')
    _idlflags_ = ['dual', 'oleautomation']
AcadSecurityParams._com_interfaces_ = [IAcadSecurityParams]

class IAcadDatabase(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{300A19B7-6109-442E-91CE-4B8495159CC2}')
    _idlflags_ = ['dual', 'oleautomation']
class IAxDbDocument(IAcadDatabase):
    _case_insensitive_ = True
    _iid_ = GUID('{953A5CBE-4B63-4BE4-8C3E-844EEBBB0188}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadObject(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{8251B59E-212B-4E1A-B753-2D9032267315}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadBlock(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{7A467B83-2D16-4BBB-AD59-C449DA228CAF}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadModelSpace(IAcadBlock):
    _case_insensitive_ = True
    _iid_ = GUID('{D55F6B1A-8C9D-42BD-A027-99362A0E3A3A}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadPaperSpace(IAcadBlock):
    _case_insensitive_ = True
    _iid_ = GUID('{D4FBE425-6855-4B9D-B707-1AD38DB538B8}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadBlocks(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{E39C9D3C-9982-43FB-8D9C-94DE3E9357E8}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadGroups(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{3E5BB51E-7DF5-4BBF-9321-5C0B7721B16C}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadDimStyles(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{32483C3B-5104-44A7-9643-21A6DFB58737}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadLayers(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{2E5B01A3-1BC2-46C2-BDA8-45D1F45191CC}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadLineTypes(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{96086B4A-2E97-46B9-B13A-06DCAEDA72FA}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadDictionaries(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{51FFFE3E-9EF5-403F-819A-0440FB6254C1}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadRegisteredApplications(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{E935F390-F616-402A-B465-8A29F283BAD0}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadTextStyles(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{6B4DC634-AEA7-4368-9879-6287C3289830}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadUCSs(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{C50EB021-F469-4EF2-AB19-95755C4F8270}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadViews(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{2D73EBAA-C6C9-4F63-B6DE-8F8FC1F966A5}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadViewports(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{C7C5D24C-FDD2-407E-A915-D90BFD0C781D}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadLayouts(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{8F5B40D7-0039-431B-9E22-5EED9FD297A9}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadPlotConfigurations(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{A83D69E3-C8DD-4DB4-9140-58B6A4A3DA8A}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadDatabasePreferences(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A965DD72-2838-47F2-A893-4F458539D281}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadSummaryInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{550E80DE-3285-4AD0-8778-248186E94A4C}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadSectionManager(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{85E15EA0-5167-4510-B1BA-809E86D13B81}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadMaterials(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{42D8408E-8D72-440D-BD05-75171CCE56C8}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadDatabase._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'ModelSpace',
              ( ['out', 'retval'], POINTER(POINTER(IAcadModelSpace)), 'pMSpace' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'PaperSpace',
              ( ['out', 'retval'], POINTER(POINTER(IAcadPaperSpace)), 'pPSpace' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'Blocks',
              ( ['out', 'retval'], POINTER(POINTER(IAcadBlocks)), 'pBlocks' )),
    COMMETHOD([dispid(4)], HRESULT, 'CopyObjects',
              ( ['in'], VARIANT, 'Objects' ),
              ( ['in', 'optional'], VARIANT, 'Owner' ),
              ( ['in', 'out', 'optional'], POINTER(VARIANT), 'IdPairs' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'pNewObjects' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'Groups',
              ( ['out', 'retval'], POINTER(POINTER(IAcadGroups)), 'pGroups' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'DimStyles',
              ( ['out', 'retval'], POINTER(POINTER(IAcadDimStyles)), 'pDimStyles' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'Layers',
              ( ['out', 'retval'], POINTER(POINTER(IAcadLayers)), 'pLayers' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'Linetypes',
              ( ['out', 'retval'], POINTER(POINTER(IAcadLineTypes)), 'pLinetypes' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'Dictionaries',
              ( ['out', 'retval'], POINTER(POINTER(IAcadDictionaries)), 'pDictionaries' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'RegisteredApplications',
              ( ['out', 'retval'], POINTER(POINTER(IAcadRegisteredApplications)), 'pRegApps' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'TextStyles',
              ( ['out', 'retval'], POINTER(POINTER(IAcadTextStyles)), 'pTextStyles' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'UserCoordinateSystems',
              ( ['out', 'retval'], POINTER(POINTER(IAcadUCSs)), 'pUCSs' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'Views',
              ( ['out', 'retval'], POINTER(POINTER(IAcadViews)), 'pViews' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'Viewports',
              ( ['out', 'retval'], POINTER(POINTER(IAcadViewports)), 'pViewports' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'ElevationModelSpace',
              ( ['out', 'retval'], POINTER(c_double), 'Elevation' )),
    COMMETHOD([dispid(15), 'propput'], HRESULT, 'ElevationModelSpace',
              ( ['in'], c_double, 'Elevation' )),
    COMMETHOD([dispid(16), 'propget'], HRESULT, 'ElevationPaperSpace',
              ( ['out', 'retval'], POINTER(c_double), 'Elevation' )),
    COMMETHOD([dispid(16), 'propput'], HRESULT, 'ElevationPaperSpace',
              ( ['in'], c_double, 'Elevation' )),
    COMMETHOD([dispid(17), 'propget'], HRESULT, 'Limits',
              ( ['out', 'retval'], POINTER(VARIANT), 'Limits' )),
    COMMETHOD([dispid(17), 'propput'], HRESULT, 'Limits',
              ( ['in'], VARIANT, 'Limits' )),
    COMMETHOD([dispid(18)], HRESULT, 'HandleToObject',
              ( ['in'], BSTR, 'Handle' ),
              ( ['out', 'retval'], POINTER(POINTER(IDispatch)), 'pObj' )),
    COMMETHOD([dispid(19)], HRESULT, 'ObjectIdToObject',
              ( ['in'], LONG_PTR, 'ObjectID' ),
              ( ['out', 'retval'], POINTER(POINTER(IDispatch)), 'pObj' )),
    COMMETHOD([dispid(20), 'propget'], HRESULT, 'Layouts',
              ( ['out', 'retval'], POINTER(POINTER(IAcadLayouts)), 'pLayouts' )),
    COMMETHOD([dispid(21), 'propget'], HRESULT, 'PlotConfigurations',
              ( ['out', 'retval'], POINTER(POINTER(IAcadPlotConfigurations)), 'pPlotConfigs' )),
    COMMETHOD([dispid(22), 'propget'], HRESULT, 'Preferences',
              ( ['out', 'retval'], POINTER(POINTER(IAcadDatabasePreferences)), 'pPref' )),
    COMMETHOD([dispid(71), 'propget'], HRESULT, 'SummaryInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAcadSummaryInfo)), 'pSummaryInfo' )),
    COMMETHOD([dispid(72), 'propget'], HRESULT, 'SectionManager',
              ( ['out', 'retval'], POINTER(POINTER(IAcadSectionManager)), 'pSecMgr' )),
    COMMETHOD([dispid(73), 'propget'], HRESULT, 'Materials',
              ( ['out', 'retval'], POINTER(POINTER(IAcadMaterials)), 'pMaterials' )),
]
################################################################
## code template for IAcadDatabase implementation
##class IAcadDatabase_Impl(object):
##    @property
##    def ModelSpace(self):
##        '-no docstring-'
##        #return pMSpace
##
##    @property
##    def PaperSpace(self):
##        '-no docstring-'
##        #return pPSpace
##
##    @property
##    def Blocks(self):
##        '-no docstring-'
##        #return pBlocks
##
##    def CopyObjects(self, Objects, Owner):
##        '-no docstring-'
##        #return IdPairs, pNewObjects
##
##    @property
##    def Groups(self):
##        '-no docstring-'
##        #return pGroups
##
##    @property
##    def DimStyles(self):
##        '-no docstring-'
##        #return pDimStyles
##
##    @property
##    def Layers(self):
##        '-no docstring-'
##        #return pLayers
##
##    @property
##    def Linetypes(self):
##        '-no docstring-'
##        #return pLinetypes
##
##    @property
##    def Dictionaries(self):
##        '-no docstring-'
##        #return pDictionaries
##
##    @property
##    def RegisteredApplications(self):
##        '-no docstring-'
##        #return pRegApps
##
##    @property
##    def TextStyles(self):
##        '-no docstring-'
##        #return pTextStyles
##
##    @property
##    def UserCoordinateSystems(self):
##        '-no docstring-'
##        #return pUCSs
##
##    @property
##    def Views(self):
##        '-no docstring-'
##        #return pViews
##
##    @property
##    def Viewports(self):
##        '-no docstring-'
##        #return pViewports
##
##    def _get(self):
##        '-no docstring-'
##        #return Elevation
##    def _set(self, Elevation):
##        '-no docstring-'
##    ElevationModelSpace = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Elevation
##    def _set(self, Elevation):
##        '-no docstring-'
##    ElevationPaperSpace = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Limits
##    def _set(self, Limits):
##        '-no docstring-'
##    Limits = property(_get, _set, doc = _set.__doc__)
##
##    def HandleToObject(self, Handle):
##        '-no docstring-'
##        #return pObj
##
##    def ObjectIdToObject(self, ObjectID):
##        '-no docstring-'
##        #return pObj
##
##    @property
##    def Layouts(self):
##        '-no docstring-'
##        #return pLayouts
##
##    @property
##    def PlotConfigurations(self):
##        '-no docstring-'
##        #return pPlotConfigs
##
##    @property
##    def Preferences(self):
##        '-no docstring-'
##        #return pPref
##
##    @property
##    def SummaryInfo(self):
##        '-no docstring-'
##        #return pSummaryInfo
##
##    @property
##    def SectionManager(self):
##        '-no docstring-'
##        #return pSecMgr
##
##    @property
##    def Materials(self):
##        '-no docstring-'
##        #return pMaterials
##

IAxDbDocument._methods_ = [
    COMMETHOD([dispid(256), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pVal' )),
    COMMETHOD([dispid(256), 'propput'], HRESULT, 'Name',
              ( ['in'], BSTR, 'pVal' )),
    COMMETHOD([dispid(257)], HRESULT, 'Open',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in', 'optional'], VARIANT, 'Password' )),
    COMMETHOD([dispid(258)], HRESULT, 'Save'),
    COMMETHOD([dispid(259)], HRESULT, 'SaveAs',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in', 'optional'], VARIANT, 'vSecurityParams' )),
    COMMETHOD([dispid(260)], HRESULT, 'DxfIn',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in', 'optional'], VARIANT, 'LogFileName' )),
    COMMETHOD([dispid(261)], HRESULT, 'DxfOut',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in', 'optional'], VARIANT, 'precision' ),
              ( ['in', 'optional'], VARIANT, 'SaveThumbnailImage' )),
    COMMETHOD([dispid(262), 'propget'], HRESULT, 'Application',
              ( ['out', 'retval'], POINTER(POINTER(IDispatch)), 'pAppObj' )),
    COMMETHOD([dispid(263), 'propget'], HRESULT, 'Database',
              ( ['out', 'retval'], POINTER(POINTER(IAcadDatabase)), 'pDatabase' )),
]
################################################################
## code template for IAxDbDocument implementation
##class IAxDbDocument_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def Open(self, FileName, Password):
##        '-no docstring-'
##        #return 
##
##    def Save(self):
##        '-no docstring-'
##        #return 
##
##    def SaveAs(self, FileName, vSecurityParams):
##        '-no docstring-'
##        #return 
##
##    def DxfIn(self, FileName, LogFileName):
##        '-no docstring-'
##        #return 
##
##    def DxfOut(self, FileName, precision, SaveThumbnailImage):
##        '-no docstring-'
##        #return 
##
##    @property
##    def Application(self):
##        '-no docstring-'
##        #return pAppObj
##
##    @property
##    def Database(self):
##        '-no docstring-'
##        #return pDatabase
##


# values for enumeration 'AcKeyboardPriority'
acKeyboardRunningObjSnap = 0
acKeyboardEntry = 1
acKeyboardEntryExceptScripts = 2
AcKeyboardPriority = c_int # enum

# values for enumeration 'AcMenuGroupType'
acBaseMenuGroup = 0
acPartialMenuGroup = 1
AcMenuGroupType = c_int # enum

# values for enumeration 'AcLeaderType'
acLineNoArrow = 0
acSplineNoArrow = 1
acLineWithArrow = 2
acSplineWithArrow = 3
AcLeaderType = c_int # enum

# values for enumeration 'AcMenuFileType'
acMenuFileCompiled = 0
acMenuFileSource = 1
AcMenuFileType = c_int # enum
class IAcadSectionSettings(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{763012DA-5495-426C-B3AF-FB0F349992AF}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadDictionary(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{2982BA1F-7319-4711-B7C5-7DA5D8EF5297}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadObject._methods_ = [
    COMMETHOD([dispid(1024), 'nonbrowsable', 'propget'], HRESULT, 'Handle',
              ( ['out', 'retval'], POINTER(BSTR), 'Handle' )),
    COMMETHOD([dispid(1025), 'nonbrowsable', 'propget'], HRESULT, 'ObjectName',
              ( ['out', 'retval'], POINTER(BSTR), 'ObjectName' )),
    COMMETHOD([dispid(1026)], HRESULT, 'GetXData',
              ( ['in'], BSTR, 'AppName' ),
              ( ['out'], POINTER(VARIANT), 'XDataType' ),
              ( ['out'], POINTER(VARIANT), 'XDataValue' )),
    COMMETHOD([dispid(1027)], HRESULT, 'SetXData',
              ( ['in'], VARIANT, 'XDataType' ),
              ( ['in'], VARIANT, 'XDataValue' )),
    COMMETHOD([dispid(1028)], HRESULT, 'Delete'),
    COMMETHOD([dispid(1029), 'nonbrowsable', 'propget'], HRESULT, 'ObjectID',
              ( ['out', 'retval'], POINTER(LONG_PTR), 'ObjectID' )),
    COMMETHOD([dispid(1030), 'nonbrowsable', 'propget'], HRESULT, 'Application',
              ( ['out', 'retval'], POINTER(POINTER(IDispatch)), 'ApplicationObject' )),
    COMMETHOD([dispid(1031), 'hidden', 'nonbrowsable', 'propget'], HRESULT, 'Database',
              ( ['out', 'retval'], POINTER(POINTER(IAcadDatabase)), 'pDatabase' )),
    COMMETHOD([dispid(1032), 'nonbrowsable', 'propget'], HRESULT, 'HasExtensionDictionary',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bHasDictionary' )),
    COMMETHOD([dispid(1033)], HRESULT, 'GetExtensionDictionary',
              ( ['out', 'retval'], POINTER(POINTER(IAcadDictionary)), 'pExtDictionary' )),
    COMMETHOD([dispid(1034), 'nonbrowsable', 'propget'], HRESULT, 'OwnerID',
              ( ['out', 'retval'], POINTER(LONG_PTR), 'OwnerID' )),
    COMMETHOD([dispid(1035), 'nonbrowsable', 'propget'], HRESULT, 'Document',
              ( ['out', 'retval'], POINTER(POINTER(IDispatch)), 'pDocument' )),
    COMMETHOD([dispid(1141), 'hidden'], HRESULT, 'Erase'),
]
################################################################
## code template for IAcadObject implementation
##class IAcadObject_Impl(object):
##    @property
##    def Handle(self):
##        '-no docstring-'
##        #return Handle
##
##    @property
##    def ObjectName(self):
##        '-no docstring-'
##        #return ObjectName
##
##    def GetXData(self, AppName):
##        '-no docstring-'
##        #return XDataType, XDataValue
##
##    def SetXData(self, XDataType, XDataValue):
##        '-no docstring-'
##        #return 
##
##    def Delete(self):
##        '-no docstring-'
##        #return 
##
##    @property
##    def ObjectID(self):
##        '-no docstring-'
##        #return ObjectID
##
##    @property
##    def Application(self):
##        '-no docstring-'
##        #return ApplicationObject
##
##    @property
##    def Database(self):
##        '-no docstring-'
##        #return pDatabase
##
##    @property
##    def HasExtensionDictionary(self):
##        '-no docstring-'
##        #return bHasDictionary
##
##    def GetExtensionDictionary(self):
##        '-no docstring-'
##        #return pExtDictionary
##
##    @property
##    def OwnerID(self):
##        '-no docstring-'
##        #return OwnerID
##
##    @property
##    def Document(self):
##        '-no docstring-'
##        #return pDocument
##
##    def Erase(self):
##        '-no docstring-'
##        #return 
##


# values for enumeration 'AcSectionType'
acSectionTypeLiveSection = 1
acSectionType2dSection = 2
acSectionType3dSection = 4
AcSectionType = c_int # enum
class IAcadSectionTypeSettings(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{E7DFF30C-1E55-409B-AC4B-7E6ED46F0C8D}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadSectionSettings._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'CurrentSectionType',
              ( ['out', 'retval'], POINTER(AcSectionType), 'pVal' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'CurrentSectionType',
              ( ['in'], AcSectionType, 'pVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetSectionTypeSettings',
              ( ['in'], AcSectionType, 'secType' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadSectionTypeSettings)), 'pUnk' )),
]
################################################################
## code template for IAcadSectionSettings implementation
##class IAcadSectionSettings_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    CurrentSectionType = property(_get, _set, doc = _set.__doc__)
##
##    def GetSectionTypeSettings(self, secType):
##        '-no docstring-'
##        #return pUnk
##

class IAcadEntity(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{DA85CECC-1D05-42F3-8E90-4FDAFB8B0410}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadMLeader(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{C3786A8A-D342-4564-A6C8-FC8E71158F82}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadAcCmColor(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{6751FB6B-AC77-4391-A96D-909A351A8BB5}')
    _idlflags_ = ['dual', 'oleautomation']

# values for enumeration 'AcExtendOption'
acExtendNone = 0
acExtendThisEntity = 1
acExtendOtherEntity = 2
acExtendBoth = 3
AcExtendOption = c_int # enum

# values for enumeration 'AcLineWeight'
acLnWt000 = 0
acLnWt005 = 5
acLnWt009 = 9
acLnWt013 = 13
acLnWt015 = 15
acLnWt018 = 18
acLnWt020 = 20
acLnWt025 = 25
acLnWt030 = 30
acLnWt035 = 35
acLnWt040 = 40
acLnWt050 = 50
acLnWt053 = 53
acLnWt060 = 60
acLnWt070 = 70
acLnWt080 = 80
acLnWt090 = 90
acLnWt100 = 100
acLnWt106 = 106
acLnWt120 = 120
acLnWt140 = 140
acLnWt158 = 158
acLnWt200 = 200
acLnWt211 = 211
acLnWtByLayer = -1
acLnWtByBlock = -2
acLnWtByLwDefault = -3
AcLineWeight = c_int # enum
ACAD_LWEIGHT = AcLineWeight
class IAcadHyperlinks(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{85AF4392-6E18-4EA7-AB53-7D39220526A6}')
    _idlflags_ = ['dual', 'oleautomation']

# values for enumeration 'AcColor'
acByBlock = 0
acRed = 1
acYellow = 2
acGreen = 3
acCyan = 4
acBlue = 5
acMagenta = 6
acWhite = 7
acByLayer = 256
AcColor = c_int # enum
ACAD_COLOR = AcColor
IAcadEntity._methods_ = [
    COMMETHOD([dispid(1302), 'propget'], HRESULT, 'TrueColor',
              ( ['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor' )),
    COMMETHOD([dispid(1302), 'propput'], HRESULT, 'TrueColor',
              ( ['in'], POINTER(IAcadAcCmColor), 'pColor' )),
    COMMETHOD([dispid(1281), 'propget'], HRESULT, 'Layer',
              ( ['out', 'retval'], POINTER(BSTR), 'Layer' )),
    COMMETHOD([dispid(1281), 'propput'], HRESULT, 'Layer',
              ( ['in'], BSTR, 'Layer' )),
    COMMETHOD([dispid(1282), 'propget'], HRESULT, 'Linetype',
              ( ['out', 'retval'], POINTER(BSTR), 'Linetype' )),
    COMMETHOD([dispid(1282), 'propput'], HRESULT, 'Linetype',
              ( ['in'], BSTR, 'Linetype' )),
    COMMETHOD([dispid(1283), 'propget'], HRESULT, 'LinetypeScale',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'ltScale' )),
    COMMETHOD([dispid(1283), 'propput'], HRESULT, 'LinetypeScale',
              ( ['in'], ACAD_NOUNITS, 'ltScale' )),
    COMMETHOD([dispid(1284), 'nonbrowsable', 'propget'], HRESULT, 'Visible',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVisible' )),
    COMMETHOD([dispid(1284), 'nonbrowsable', 'propput'], HRESULT, 'Visible',
              ( ['in'], VARIANT_BOOL, 'bVisible' )),
    COMMETHOD([dispid(1285)], HRESULT, 'ArrayPolar',
              ( ['in'], c_int, 'NumberOfObjects' ),
              ( ['in'], c_double, 'AngleToFill' ),
              ( ['in'], VARIANT, 'CenterPoint' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'pArrayObjs' )),
    COMMETHOD([dispid(1286)], HRESULT, 'ArrayRectangular',
              ( ['in'], c_int, 'NumberOfRows' ),
              ( ['in'], c_int, 'NumberOfColumns' ),
              ( ['in'], c_int, 'NumberOfLevels' ),
              ( ['in'], c_double, 'DistBetweenRows' ),
              ( ['in'], c_double, 'DistBetweenCols' ),
              ( ['in'], c_double, 'DistBetweenLevels' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'pArrayObjs' )),
    COMMETHOD([dispid(1287)], HRESULT, 'Highlight',
              ( ['in'], VARIANT_BOOL, 'HighlightFlag' )),
    COMMETHOD([dispid(1288)], HRESULT, 'Copy',
              ( ['out', 'retval'], POINTER(POINTER(IDispatch)), 'pCopyObj' )),
    COMMETHOD([dispid(1289)], HRESULT, 'Move',
              ( ['in'], VARIANT, 'FromPoint' ),
              ( ['in'], VARIANT, 'ToPoint' )),
    COMMETHOD([dispid(1290)], HRESULT, 'Rotate',
              ( ['in'], VARIANT, 'BasePoint' ),
              ( ['in'], c_double, 'RotationAngle' )),
    COMMETHOD([dispid(1291)], HRESULT, 'Rotate3D',
              ( ['in'], VARIANT, 'Point1' ),
              ( ['in'], VARIANT, 'Point2' ),
              ( ['in'], c_double, 'RotationAngle' )),
    COMMETHOD([dispid(1292)], HRESULT, 'Mirror',
              ( ['in'], VARIANT, 'Point1' ),
              ( ['in'], VARIANT, 'Point2' ),
              ( ['out', 'retval'], POINTER(POINTER(IDispatch)), 'pMirrorObj' )),
    COMMETHOD([dispid(1293)], HRESULT, 'Mirror3D',
              ( ['in'], VARIANT, 'Point1' ),
              ( ['in'], VARIANT, 'Point2' ),
              ( ['in'], VARIANT, 'point3' ),
              ( ['out', 'retval'], POINTER(POINTER(IDispatch)), 'pMirrorObj' )),
    COMMETHOD([dispid(1294)], HRESULT, 'ScaleEntity',
              ( ['in'], VARIANT, 'BasePoint' ),
              ( ['in'], c_double, 'ScaleFactor' )),
    COMMETHOD([dispid(1295)], HRESULT, 'TransformBy',
              ( ['in'], VARIANT, 'TransformationMatrix' )),
    COMMETHOD([dispid(1296)], HRESULT, 'Update'),
    COMMETHOD([dispid(1297)], HRESULT, 'GetBoundingBox',
              ( ['out'], POINTER(VARIANT), 'MinPoint' ),
              ( ['out'], POINTER(VARIANT), 'MaxPoint' )),
    COMMETHOD([dispid(1298)], HRESULT, 'IntersectWith',
              ( ['in'], POINTER(IDispatch), 'IntersectObject' ),
              ( ['in'], AcExtendOption, 'option' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'intPoints' )),
    COMMETHOD([dispid(1299), 'propget'], HRESULT, 'PlotStyleName',
              ( ['out', 'retval'], POINTER(BSTR), 'plotStyle' )),
    COMMETHOD([dispid(1299), 'propput'], HRESULT, 'PlotStyleName',
              ( ['in'], BSTR, 'plotStyle' )),
    COMMETHOD([dispid(1300), 'propget'], HRESULT, 'Lineweight',
              ( ['out', 'retval'], POINTER(ACAD_LWEIGHT), 'Lineweight' )),
    COMMETHOD([dispid(1300), 'propput'], HRESULT, 'Lineweight',
              ( ['in'], ACAD_LWEIGHT, 'Lineweight' )),
    COMMETHOD([dispid(1401), 'propget'], HRESULT, 'EntityTransparency',
              ( ['out', 'retval'], POINTER(BSTR), 'transparency' )),
    COMMETHOD([dispid(1401), 'propput'], HRESULT, 'EntityTransparency',
              ( ['in'], BSTR, 'transparency' )),
    COMMETHOD([dispid(1301), 'propget'], HRESULT, 'Hyperlinks',
              ( ['out', 'retval'], POINTER(POINTER(IAcadHyperlinks)), 'Hyperlinks' )),
    COMMETHOD([dispid(1399), 'propget'], HRESULT, 'Material',
              ( ['out', 'retval'], POINTER(BSTR), 'Material' )),
    COMMETHOD([dispid(1399), 'propput'], HRESULT, 'Material',
              ( ['in'], BSTR, 'Material' )),
    COMMETHOD([dispid(1397), 'hidden', 'nonbrowsable', 'propget'], HRESULT, 'EntityName',
              ( ['out', 'retval'], POINTER(BSTR), 'EntityName' )),
    COMMETHOD([dispid(1398), 'hidden', 'nonbrowsable', 'propget'], HRESULT, 'EntityType',
              ( ['out', 'retval'], POINTER(c_int), 'entType' )),
    COMMETHOD([dispid(1280), 'hidden', 'propget'], HRESULT, 'color',
              ( ['out', 'retval'], POINTER(ACAD_COLOR), 'color' )),
    COMMETHOD([dispid(1280), 'hidden', 'propput'], HRESULT, 'color',
              ( ['in'], ACAD_COLOR, 'color' )),
]
################################################################
## code template for IAcadEntity implementation
##class IAcadEntity_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return pColor
##    def _set(self, pColor):
##        '-no docstring-'
##    TrueColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Layer
##    def _set(self, Layer):
##        '-no docstring-'
##    Layer = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Linetype
##    def _set(self, Linetype):
##        '-no docstring-'
##    Linetype = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return ltScale
##    def _set(self, ltScale):
##        '-no docstring-'
##    LinetypeScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVisible
##    def _set(self, bVisible):
##        '-no docstring-'
##    Visible = property(_get, _set, doc = _set.__doc__)
##
##    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
##        '-no docstring-'
##        #return pArrayObjs
##
##    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
##        '-no docstring-'
##        #return pArrayObjs
##
##    def Highlight(self, HighlightFlag):
##        '-no docstring-'
##        #return 
##
##    def Copy(self):
##        '-no docstring-'
##        #return pCopyObj
##
##    def Move(self, FromPoint, ToPoint):
##        '-no docstring-'
##        #return 
##
##    def Rotate(self, BasePoint, RotationAngle):
##        '-no docstring-'
##        #return 
##
##    def Rotate3D(self, Point1, Point2, RotationAngle):
##        '-no docstring-'
##        #return 
##
##    def Mirror(self, Point1, Point2):
##        '-no docstring-'
##        #return pMirrorObj
##
##    def Mirror3D(self, Point1, Point2, point3):
##        '-no docstring-'
##        #return pMirrorObj
##
##    def ScaleEntity(self, BasePoint, ScaleFactor):
##        '-no docstring-'
##        #return 
##
##    def TransformBy(self, TransformationMatrix):
##        '-no docstring-'
##        #return 
##
##    def Update(self):
##        '-no docstring-'
##        #return 
##
##    def GetBoundingBox(self):
##        '-no docstring-'
##        #return MinPoint, MaxPoint
##
##    def IntersectWith(self, IntersectObject, option):
##        '-no docstring-'
##        #return intPoints
##
##    def _get(self):
##        '-no docstring-'
##        #return plotStyle
##    def _set(self, plotStyle):
##        '-no docstring-'
##    PlotStyleName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Lineweight
##    def _set(self, Lineweight):
##        '-no docstring-'
##    Lineweight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return transparency
##    def _set(self, transparency):
##        '-no docstring-'
##    EntityTransparency = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Hyperlinks(self):
##        '-no docstring-'
##        #return Hyperlinks
##
##    def _get(self):
##        '-no docstring-'
##        #return Material
##    def _set(self, Material):
##        '-no docstring-'
##    Material = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def EntityName(self):
##        '-no docstring-'
##        #return EntityName
##
##    @property
##    def EntityType(self):
##        '-no docstring-'
##        #return entType
##
##    def _get(self):
##        '-no docstring-'
##        #return color
##    def _set(self, color):
##        '-no docstring-'
##    color = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'AcMLeaderType'
acStraightLeader = 1
acSplineLeader = 2
acInVisibleLeader = 0
AcMLeaderType = c_int # enum

# values for enumeration 'AcDimArrowheadType'
acArrowDefault = 0
acArrowClosedBlank = 1
acArrowClosed = 2
acArrowDot = 3
acArrowArchTick = 4
acArrowOblique = 5
acArrowOpen = 6
acArrowOrigin = 7
acArrowOrigin2 = 8
acArrowOpen90 = 9
acArrowOpen30 = 10
acArrowDotSmall = 11
acArrowDotBlank = 12
acArrowSmall = 13
acArrowBoxBlank = 14
acArrowBoxFilled = 15
acArrowDatumBlank = 16
acArrowDatumFilled = 17
acArrowIntegral = 18
acArrowNone = 19
acArrowUserDefined = 20
AcDimArrowheadType = c_int # enum

# values for enumeration 'AcBlockConnectionType'
acConnectExtents = 0
acConnectBase = 1
AcBlockConnectionType = c_int # enum

# values for enumeration 'AcAttachmentPoint'
acAttachmentPointTopLeft = 1
acAttachmentPointTopCenter = 2
acAttachmentPointTopRight = 3
acAttachmentPointMiddleLeft = 4
acAttachmentPointMiddleCenter = 5
acAttachmentPointMiddleRight = 6
acAttachmentPointBottomLeft = 7
acAttachmentPointBottomCenter = 8
acAttachmentPointBottomRight = 9
AcAttachmentPoint = c_int # enum

# values for enumeration 'AcDrawingDirection'
acLeftToRight = 1
acRightToLeft = 2
acTopToBottom = 3
acBottomToTop = 4
acByStyle = 5
AcDrawingDirection = c_int # enum

# values for enumeration 'AcLineSpacingStyle'
acLineSpacingStyleAtLeast = 1
acLineSpacingStyleExactly = 2
AcLineSpacingStyle = c_int # enum

# values for enumeration 'AcTextAttachmentDirection'
acAttachmentHorizontal = 0
acAttachmentVertical = 1
AcTextAttachmentDirection = c_int # enum

# values for enumeration 'AcTextAttachmentType'
acAttachmentTopOfTop = 0
acAttachmentMiddleOfTop = 1
acAttachmentBottomOfTop = 2
acAttachmentBottomOfTopLine = 3
acAttachmentMiddle = 4
acAttachmentMiddleOfBottom = 5
acAttachmentBottomOfBottom = 6
acAttachmentBottomLine = 7
acAttachmentAllLine = 8
AcTextAttachmentType = c_int # enum

# values for enumeration 'AcVerticalTextAttachmentType'
acAttachmentCenter = 0
acAttachmentLinedCenter = 1
AcVerticalTextAttachmentType = c_int # enum

# values for enumeration 'AcPredefBlockType'
acBlockImperial = 0
acBlockSlot = 1
acBlockCircle = 2
acBlockBox = 3
acBlockHexagon = 4
acBlockTriangle = 5
acBlockUserDefined = 6
AcPredefBlockType = c_int # enum

# values for enumeration 'AcMLeaderContentType'
acNoneContent = 0
acBlockContent = 1
acMTextContent = 2
AcMLeaderContentType = c_int # enum
IAcadMLeader._methods_ = [
    COMMETHOD([dispid(38), 'propget'], HRESULT, 'ScaleFactor',
              ( ['out', 'retval'], POINTER(c_double), 'scale' )),
    COMMETHOD([dispid(38), 'propput'], HRESULT, 'ScaleFactor',
              ( ['in'], c_double, 'scale' )),
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'LeaderType',
              ( ['out', 'retval'], POINTER(AcMLeaderType), 'Type' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'LeaderType',
              ( ['in'], AcMLeaderType, 'Type' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'LeaderLineColor',
              ( ['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'Type' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'LeaderLineColor',
              ( ['in'], POINTER(IAcadAcCmColor), 'Type' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'LeaderLinetype',
              ( ['out', 'retval'], POINTER(ACAD_LTYPE), 'Linetype' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'LeaderLinetype',
              ( ['in'], ACAD_LTYPE, 'Linetype' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'LeaderLineWeight',
              ( ['out', 'retval'], POINTER(ACAD_LWEIGHT), 'Lineweight' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'LeaderLineWeight',
              ( ['in'], ACAD_LWEIGHT, 'Lineweight' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'ArrowheadType',
              ( ['out', 'retval'], POINTER(AcDimArrowheadType), 'BlockName' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'ArrowheadType',
              ( ['in'], AcDimArrowheadType, 'BlockName' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'ArrowheadSize',
              ( ['out', 'retval'], POINTER(c_double), 'size' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'ArrowheadSize',
              ( ['in'], c_double, 'size' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'DogLegged',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'val' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'DogLegged',
              ( ['in'], VARIANT_BOOL, 'val' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'DoglegLength',
              ( ['out', 'retval'], POINTER(c_double), 'DoglegLength' )),
    COMMETHOD([dispid(8), 'propput'], HRESULT, 'DoglegLength',
              ( ['in'], c_double, 'DoglegLength' )),
    COMMETHOD([dispid(9), 'nonbrowsable', 'propget'], HRESULT, 'ContentBlockName',
              ( ['out', 'retval'], POINTER(BSTR), 'BlockName' )),
    COMMETHOD([dispid(9), 'nonbrowsable', 'propput'], HRESULT, 'ContentBlockName',
              ( ['in'], BSTR, 'BlockName' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'BlockConnectionType',
              ( ['out', 'retval'], POINTER(AcBlockConnectionType), 'Type' )),
    COMMETHOD([dispid(10), 'propput'], HRESULT, 'BlockConnectionType',
              ( ['in'], AcBlockConnectionType, 'Type' )),
    COMMETHOD([dispid(51), 'propget'], HRESULT, 'BlockScale',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'factor' )),
    COMMETHOD([dispid(51), 'propput'], HRESULT, 'BlockScale',
              ( ['in'], ACAD_NOUNITS, 'factor' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'TextString',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrText' )),
    COMMETHOD([dispid(11), 'propput'], HRESULT, 'TextString',
              ( ['in'], BSTR, 'bstrText' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'TextStyleName',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(12), 'propput'], HRESULT, 'TextStyleName',
              ( ['in'], BSTR, 'bstrName' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'TextJustify',
              ( ['out', 'retval'], POINTER(AcAttachmentPoint), 'attPoint' )),
    COMMETHOD([dispid(13), 'propput'], HRESULT, 'TextJustify',
              ( ['in'], AcAttachmentPoint, 'attPoint' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'TextDirection',
              ( ['out', 'retval'], POINTER(AcDrawingDirection), 'drawDir' )),
    COMMETHOD([dispid(14), 'propput'], HRESULT, 'TextDirection',
              ( ['in'], AcDrawingDirection, 'drawDir' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'TextWidth',
              ( ['out', 'retval'], POINTER(c_double), 'Width' )),
    COMMETHOD([dispid(15), 'propput'], HRESULT, 'TextWidth',
              ( ['in'], c_double, 'Width' )),
    COMMETHOD([dispid(16), 'propget'], HRESULT, 'TextHeight',
              ( ['out', 'retval'], POINTER(c_double), 'Height' )),
    COMMETHOD([dispid(16), 'propput'], HRESULT, 'TextHeight',
              ( ['in'], c_double, 'Height' )),
    COMMETHOD([dispid(17), 'propget'], HRESULT, 'TextRotation',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'rotAngle' )),
    COMMETHOD([dispid(17), 'propput'], HRESULT, 'TextRotation',
              ( ['in'], ACAD_ANGLE, 'rotAngle' )),
    COMMETHOD([dispid(18), 'propget'], HRESULT, 'TextLineSpacingFactor',
              ( ['out', 'retval'], POINTER(c_double), 'factor' )),
    COMMETHOD([dispid(18), 'propput'], HRESULT, 'TextLineSpacingFactor',
              ( ['in'], c_double, 'factor' )),
    COMMETHOD([dispid(19), 'propget'], HRESULT, 'TextLineSpacingDistance',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(19), 'propput'], HRESULT, 'TextLineSpacingDistance',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(20), 'propget'], HRESULT, 'TextLineSpacingStyle',
              ( ['out', 'retval'], POINTER(AcLineSpacingStyle), 'style' )),
    COMMETHOD([dispid(20), 'propput'], HRESULT, 'TextLineSpacingStyle',
              ( ['in'], AcLineSpacingStyle, 'style' )),
    COMMETHOD([dispid(21), 'propget'], HRESULT, 'TextBackgroundFill',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bUseBackgroundFill' )),
    COMMETHOD([dispid(21), 'propput'], HRESULT, 'TextBackgroundFill',
              ( ['in'], VARIANT_BOOL, 'bUseBackgroundFill' )),
    COMMETHOD([dispid(48), 'propget'], HRESULT, 'TextAttachmentDirection',
              ( ['out', 'retval'], POINTER(AcTextAttachmentDirection), 'dir' )),
    COMMETHOD([dispid(48), 'propput'], HRESULT, 'TextAttachmentDirection',
              ( ['in'], AcTextAttachmentDirection, 'dir' )),
    COMMETHOD([dispid(22), 'propget'], HRESULT, 'TextLeftAttachmentType',
              ( ['out', 'retval'], POINTER(AcTextAttachmentType), 'Type' )),
    COMMETHOD([dispid(22), 'propput'], HRESULT, 'TextLeftAttachmentType',
              ( ['in'], AcTextAttachmentType, 'Type' )),
    COMMETHOD([dispid(43), 'propget'], HRESULT, 'TextRightAttachmentType',
              ( ['out', 'retval'], POINTER(AcTextAttachmentType), 'Type' )),
    COMMETHOD([dispid(43), 'propput'], HRESULT, 'TextRightAttachmentType',
              ( ['in'], AcTextAttachmentType, 'Type' )),
    COMMETHOD([dispid(49), 'propget'], HRESULT, 'TextTopAttachmentType',
              ( ['out', 'retval'], POINTER(AcVerticalTextAttachmentType), 'Type' )),
    COMMETHOD([dispid(49), 'propput'], HRESULT, 'TextTopAttachmentType',
              ( ['in'], AcVerticalTextAttachmentType, 'Type' )),
    COMMETHOD([dispid(50), 'propget'], HRESULT, 'TextBottomAttachmentType',
              ( ['out', 'retval'], POINTER(AcVerticalTextAttachmentType), 'Type' )),
    COMMETHOD([dispid(50), 'propput'], HRESULT, 'TextBottomAttachmentType',
              ( ['in'], AcVerticalTextAttachmentType, 'Type' )),
    COMMETHOD([dispid(23), 'propget'], HRESULT, 'LandingGap',
              ( ['out', 'retval'], POINTER(c_double), 'gap' )),
    COMMETHOD([dispid(23), 'propput'], HRESULT, 'LandingGap',
              ( ['in'], c_double, 'gap' )),
    COMMETHOD([dispid(24), 'nonbrowsable', 'propget'], HRESULT, 'ArrowheadBlock',
              ( ['out', 'retval'], POINTER(BSTR), 'BlockName' )),
    COMMETHOD([dispid(24), 'nonbrowsable', 'propput'], HRESULT, 'ArrowheadBlock',
              ( ['in'], BSTR, 'BlockName' )),
    COMMETHOD([dispid(25), 'propget'], HRESULT, 'ContentBlockType',
              ( ['out', 'retval'], POINTER(AcPredefBlockType), 'Type' )),
    COMMETHOD([dispid(25), 'propput'], HRESULT, 'ContentBlockType',
              ( ['in'], AcPredefBlockType, 'Type' )),
    COMMETHOD([dispid(26), 'nonbrowsable', 'propget'], HRESULT, 'LeaderCount',
              ( ['out', 'retval'], POINTER(c_int), 'number' )),
    COMMETHOD([dispid(27)], HRESULT, 'AddLeader',
              ( ['out', 'retval'], POINTER(c_int), 'leaderIndex' )),
    COMMETHOD([dispid(28)], HRESULT, 'RemoveLeader',
              ( ['in'], c_int, 'leaderIndex' )),
    COMMETHOD([dispid(29)], HRESULT, 'AddLeaderLine',
              ( ['in'], c_int, 'leaderIndex' ),
              ( ['in'], VARIANT, 'pointArray' ),
              ( ['out', 'retval'], POINTER(c_int), 'leaderLineIndex' )),
    COMMETHOD([dispid(30)], HRESULT, 'AddLeaderLineEx',
              ( ['in'], VARIANT, 'pointArray' ),
              ( ['out', 'retval'], POINTER(c_int), 'leaderLineIndex' )),
    COMMETHOD([dispid(31)], HRESULT, 'RemoveLeaderLine',
              ( ['in'], c_int, 'leaderLineIndex' )),
    COMMETHOD([dispid(32)], HRESULT, 'SetLeaderLineVertices',
              ( ['in'], c_int, 'leaderLineIndex' ),
              ( ['in'], VARIANT, 'pointArray' )),
    COMMETHOD([dispid(33)], HRESULT, 'GetLeaderLineVertices',
              ( ['in'], c_int, 'leaderLineIndex' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'pointArray' )),
    COMMETHOD([dispid(34), 'nonbrowsable', 'propput'], HRESULT, 'ContentType',
              ( ['in'], AcMLeaderContentType, 'Type' )),
    COMMETHOD([dispid(34), 'nonbrowsable', 'propget'], HRESULT, 'ContentType',
              ( ['out', 'retval'], POINTER(AcMLeaderContentType), 'Type' )),
    COMMETHOD([dispid(35)], HRESULT, 'GetLeaderIndex',
              ( ['in'], c_int, 'leaderLineIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'leaderIndex' )),
    COMMETHOD([dispid(36)], HRESULT, 'GetLeaderLineIndexes',
              ( ['in'], c_int, 'leaderIndex' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'leaderLineIndexes' )),
    COMMETHOD([dispid(37)], HRESULT, 'GetVertexCount',
              ( ['in'], c_int, 'leaderLineIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'number' )),
    COMMETHOD([dispid(39), 'propget'], HRESULT, 'TextFrameDisplay',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal' )),
    COMMETHOD([dispid(39), 'propput'], HRESULT, 'TextFrameDisplay',
              ( ['in'], VARIANT_BOOL, 'pVal' )),
    COMMETHOD([dispid(40), 'propget'], HRESULT, 'StyleName',
              ( ['out', 'retval'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(40), 'propput'], HRESULT, 'StyleName',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([dispid(41)], HRESULT, 'GetDoglegDirection',
              ( ['in'], c_int, 'leaderIndex' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'dirVec' )),
    COMMETHOD([dispid(42)], HRESULT, 'SetDoglegDirection',
              ( ['in'], c_int, 'leaderIndex' ),
              ( ['in'], VARIANT, 'dirVec' )),
    COMMETHOD([dispid(44)], HRESULT, 'GetBlockAttributeValue',
              ( ['in'], LONG_PTR, 'attdefId' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(45)], HRESULT, 'SetBlockAttributeValue',
              ( ['in'], LONG_PTR, 'attdefId' ),
              ( ['in'], BSTR, 'Value' )),
]
################################################################
## code template for IAcadMLeader implementation
##class IAcadMLeader_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return scale
##    def _set(self, scale):
##        '-no docstring-'
##    ScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    LeaderType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    LeaderLineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Linetype
##    def _set(self, Linetype):
##        '-no docstring-'
##    LeaderLinetype = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Lineweight
##    def _set(self, Lineweight):
##        '-no docstring-'
##    LeaderLineWeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return BlockName
##    def _set(self, BlockName):
##        '-no docstring-'
##    ArrowheadType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return size
##    def _set(self, size):
##        '-no docstring-'
##    ArrowheadSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return val
##    def _set(self, val):
##        '-no docstring-'
##    DogLegged = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return DoglegLength
##    def _set(self, DoglegLength):
##        '-no docstring-'
##    DoglegLength = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return BlockName
##    def _set(self, BlockName):
##        '-no docstring-'
##    ContentBlockName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    BlockConnectionType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return factor
##    def _set(self, factor):
##        '-no docstring-'
##    BlockScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrText
##    def _set(self, bstrText):
##        '-no docstring-'
##    TextString = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrName
##    def _set(self, bstrName):
##        '-no docstring-'
##    TextStyleName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return attPoint
##    def _set(self, attPoint):
##        '-no docstring-'
##    TextJustify = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return drawDir
##    def _set(self, drawDir):
##        '-no docstring-'
##    TextDirection = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Width
##    def _set(self, Width):
##        '-no docstring-'
##    TextWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Height
##    def _set(self, Height):
##        '-no docstring-'
##    TextHeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return rotAngle
##    def _set(self, rotAngle):
##        '-no docstring-'
##    TextRotation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return factor
##    def _set(self, factor):
##        '-no docstring-'
##    TextLineSpacingFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    TextLineSpacingDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return style
##    def _set(self, style):
##        '-no docstring-'
##    TextLineSpacingStyle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bUseBackgroundFill
##    def _set(self, bUseBackgroundFill):
##        '-no docstring-'
##    TextBackgroundFill = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return dir
##    def _set(self, dir):
##        '-no docstring-'
##    TextAttachmentDirection = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    TextLeftAttachmentType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    TextRightAttachmentType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    TextTopAttachmentType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    TextBottomAttachmentType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return gap
##    def _set(self, gap):
##        '-no docstring-'
##    LandingGap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return BlockName
##    def _set(self, BlockName):
##        '-no docstring-'
##    ArrowheadBlock = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    ContentBlockType = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LeaderCount(self):
##        '-no docstring-'
##        #return number
##
##    def AddLeader(self):
##        '-no docstring-'
##        #return leaderIndex
##
##    def RemoveLeader(self, leaderIndex):
##        '-no docstring-'
##        #return 
##
##    def AddLeaderLine(self, leaderIndex, pointArray):
##        '-no docstring-'
##        #return leaderLineIndex
##
##    def AddLeaderLineEx(self, pointArray):
##        '-no docstring-'
##        #return leaderLineIndex
##
##    def RemoveLeaderLine(self, leaderLineIndex):
##        '-no docstring-'
##        #return 
##
##    def SetLeaderLineVertices(self, leaderLineIndex, pointArray):
##        '-no docstring-'
##        #return 
##
##    def GetLeaderLineVertices(self, leaderLineIndex):
##        '-no docstring-'
##        #return pointArray
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    ContentType = property(_get, _set, doc = _set.__doc__)
##
##    def GetLeaderIndex(self, leaderLineIndex):
##        '-no docstring-'
##        #return leaderIndex
##
##    def GetLeaderLineIndexes(self, leaderIndex):
##        '-no docstring-'
##        #return leaderLineIndexes
##
##    def GetVertexCount(self, leaderLineIndex):
##        '-no docstring-'
##        #return number
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    TextFrameDisplay = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Name
##    def _set(self, Name):
##        '-no docstring-'
##    StyleName = property(_get, _set, doc = _set.__doc__)
##
##    def GetDoglegDirection(self, leaderIndex):
##        '-no docstring-'
##        #return dirVec
##
##    def SetDoglegDirection(self, leaderIndex, dirVec):
##        '-no docstring-'
##        #return 
##
##    def GetBlockAttributeValue(self, attdefId):
##        '-no docstring-'
##        #return Value
##
##    def SetBlockAttributeValue(self, attdefId, Value):
##        '-no docstring-'
##        #return 
##


# values for enumeration 'AcAttributeMode'
acAttributeModeNormal = 0
acAttributeModeInvisible = 1
acAttributeModeConstant = 2
acAttributeModeVerify = 4
acAttributeModePreset = 8
acAttributeModeLockPosition = 16
acAttributeModeMultipleLine = 32
AcAttributeMode = c_int # enum

# values for enumeration 'AcMenuItemType'
acMenuItem = 0
acMenuSeparator = 1
acMenuSubMenu = 2
AcMenuItemType = c_int # enum
class IAxDbDocumentEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{2788B076-B4C1-4E2D-94D9-4E8BA9560536}')
    _idlflags_ = ['oleautomation']
IAxDbDocumentEvents._methods_ = [
]
################################################################
## code template for IAxDbDocumentEvents implementation
##class IAxDbDocumentEvents_Impl(object):

class AcadLayerStateManager(CoClass):
    _reg_clsid_ = GUID('{C6158D81-D054-460B-8483-0AD0B8057BCD}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
class IAcadLayerStateManager(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9D4B15E5-7AA0-4AA2-B200-E594A7363C50}')
    _idlflags_ = ['dual', 'oleautomation']
AcadLayerStateManager._com_interfaces_ = [IAcadLayerStateManager]


# values for enumeration 'AcToolbarItemType'
acToolbarButton = 0
acToolbarSeparator = 1
acToolbarControl = 2
acToolbarFlyout = 3
AcToolbarItemType = c_int # enum

# values for enumeration 'AcSectionGeneration'
acSectionGenerationSourceAllObjects = 1
acSectionGenerationSourceSelectedObjects = 2
acSectionGenerationDestinationNewBlock = 16
acSectionGenerationDestinationReplaceBlock = 32
acSectionGenerationDestinationFile = 64
AcSectionGeneration = c_int # enum

# values for enumeration 'AcPatternType'
acHatchPatternTypeUserDefined = 0
acHatchPatternTypePreDefined = 1
acHatchPatternTypeCustomDefined = 2
AcPatternType = c_int # enum
IAcadSectionTypeSettings._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'GenerationOptions',
              ( ['out', 'retval'], POINTER(AcSectionGeneration), 'pVal' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'GenerationOptions',
              ( ['in'], AcSectionGeneration, 'pVal' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'SourceObjects',
              ( ['out', 'retval'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'SourceObjects',
              ( ['in'], VARIANT, 'pVal' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'DestinationBlock',
              ( ['out', 'retval'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'DestinationBlock',
              ( ['in'], VARIANT, 'pVal' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'DestinationFile',
              ( ['out', 'retval'], POINTER(BSTR), 'pVal' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'DestinationFile',
              ( ['in'], BSTR, 'pVal' )),
    COMMETHOD([dispid(51), 'propget'], HRESULT, 'IntersectionBoundaryColor',
              ( ['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor' )),
    COMMETHOD([dispid(51), 'propput'], HRESULT, 'IntersectionBoundaryColor',
              ( ['in'], POINTER(IAcadAcCmColor), 'pColor' )),
    COMMETHOD([dispid(52), 'propget'], HRESULT, 'IntersectionBoundaryLayer',
              ( ['out', 'retval'], POINTER(BSTR), 'Layer' )),
    COMMETHOD([dispid(52), 'propput'], HRESULT, 'IntersectionBoundaryLayer',
              ( ['in'], BSTR, 'Layer' )),
    COMMETHOD([dispid(53), 'propget'], HRESULT, 'IntersectionBoundaryLinetype',
              ( ['out', 'retval'], POINTER(BSTR), 'Linetype' )),
    COMMETHOD([dispid(53), 'propput'], HRESULT, 'IntersectionBoundaryLinetype',
              ( ['in'], BSTR, 'Linetype' )),
    COMMETHOD([dispid(54), 'propget'], HRESULT, 'IntersectionBoundaryLinetypeScale',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'ltScale' )),
    COMMETHOD([dispid(54), 'propput'], HRESULT, 'IntersectionBoundaryLinetypeScale',
              ( ['in'], ACAD_NOUNITS, 'ltScale' )),
    COMMETHOD([dispid(55), 'propget'], HRESULT, 'IntersectionBoundaryPlotStyleName',
              ( ['out', 'retval'], POINTER(BSTR), 'plotStyle' )),
    COMMETHOD([dispid(55), 'propput'], HRESULT, 'IntersectionBoundaryPlotStyleName',
              ( ['in'], BSTR, 'plotStyle' )),
    COMMETHOD([dispid(56), 'propget'], HRESULT, 'IntersectionBoundaryLineweight',
              ( ['out', 'retval'], POINTER(ACAD_LWEIGHT), 'Lineweight' )),
    COMMETHOD([dispid(56), 'propput'], HRESULT, 'IntersectionBoundaryLineweight',
              ( ['in'], ACAD_LWEIGHT, 'Lineweight' )),
    COMMETHOD([dispid(57), 'propget'], HRESULT, 'IntersectionBoundaryDivisionLines',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal' )),
    COMMETHOD([dispid(57), 'propput'], HRESULT, 'IntersectionBoundaryDivisionLines',
              ( ['in'], VARIANT_BOOL, 'pVal' )),
    COMMETHOD([dispid(71), 'propget'], HRESULT, 'IntersectionFillVisible',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal' )),
    COMMETHOD([dispid(71), 'propput'], HRESULT, 'IntersectionFillVisible',
              ( ['in'], VARIANT_BOOL, 'pVal' )),
    COMMETHOD([dispid(72), 'propget'], HRESULT, 'IntersectionFillHatchPatternType',
              ( ['out', 'retval'], POINTER(AcPatternType), 'pVal' )),
    COMMETHOD([dispid(72), 'propput'], HRESULT, 'IntersectionFillHatchPatternType',
              ( ['in'], AcPatternType, 'pVal' )),
    COMMETHOD([dispid(73), 'propget'], HRESULT, 'IntersectionFillHatchPatternName',
              ( ['out', 'retval'], POINTER(BSTR), 'pVal' )),
    COMMETHOD([dispid(73), 'propput'], HRESULT, 'IntersectionFillHatchPatternName',
              ( ['in'], BSTR, 'pVal' )),
    COMMETHOD([dispid(74), 'propget'], HRESULT, 'IntersectionFillHatchAngle',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'pVal' )),
    COMMETHOD([dispid(74), 'propput'], HRESULT, 'IntersectionFillHatchAngle',
              ( ['in'], ACAD_ANGLE, 'pVal' )),
    COMMETHOD([dispid(75), 'propget'], HRESULT, 'IntersectionFillHatchScale',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'pVal' )),
    COMMETHOD([dispid(75), 'propput'], HRESULT, 'IntersectionFillHatchScale',
              ( ['in'], ACAD_NOUNITS, 'pVal' )),
    COMMETHOD([dispid(76), 'propget'], HRESULT, 'IntersectionFillHatchSpacing',
              ( ['out', 'retval'], POINTER(c_double), 'pVal' )),
    COMMETHOD([dispid(76), 'propput'], HRESULT, 'IntersectionFillHatchSpacing',
              ( ['in'], c_double, 'pVal' )),
    COMMETHOD([dispid(77), 'propget'], HRESULT, 'IntersectionFillColor',
              ( ['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor' )),
    COMMETHOD([dispid(77), 'propput'], HRESULT, 'IntersectionFillColor',
              ( ['in'], POINTER(IAcadAcCmColor), 'pColor' )),
    COMMETHOD([dispid(78), 'propget'], HRESULT, 'IntersectionFillLayer',
              ( ['out', 'retval'], POINTER(BSTR), 'Layer' )),
    COMMETHOD([dispid(78), 'propput'], HRESULT, 'IntersectionFillLayer',
              ( ['in'], BSTR, 'Layer' )),
    COMMETHOD([dispid(79), 'propget'], HRESULT, 'IntersectionFillLinetype',
              ( ['out', 'retval'], POINTER(BSTR), 'Linetype' )),
    COMMETHOD([dispid(79), 'propput'], HRESULT, 'IntersectionFillLinetype',
              ( ['in'], BSTR, 'Linetype' )),
    COMMETHOD([dispid(80), 'propget'], HRESULT, 'IntersectionFillLinetypeScale',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'ltScale' )),
    COMMETHOD([dispid(80), 'propput'], HRESULT, 'IntersectionFillLinetypeScale',
              ( ['in'], ACAD_NOUNITS, 'ltScale' )),
    COMMETHOD([dispid(81), 'propget'], HRESULT, 'IntersectionFillPlotStyleName',
              ( ['out', 'retval'], POINTER(BSTR), 'plotStyle' )),
    COMMETHOD([dispid(81), 'propput'], HRESULT, 'IntersectionFillPlotStyleName',
              ( ['in'], BSTR, 'plotStyle' )),
    COMMETHOD([dispid(82), 'propget'], HRESULT, 'IntersectionFillLineweight',
              ( ['out', 'retval'], POINTER(ACAD_LWEIGHT), 'Lineweight' )),
    COMMETHOD([dispid(82), 'propput'], HRESULT, 'IntersectionFillLineweight',
              ( ['in'], ACAD_LWEIGHT, 'Lineweight' )),
    COMMETHOD([dispid(83), 'propget'], HRESULT, 'IntersectionFillFaceTransparency',
              ( ['out', 'retval'], POINTER(c_int), 'pVal' )),
    COMMETHOD([dispid(83), 'propput'], HRESULT, 'IntersectionFillFaceTransparency',
              ( ['in'], c_int, 'pVal' )),
    COMMETHOD([dispid(91), 'propget'], HRESULT, 'BackgroundLinesVisible',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal' )),
    COMMETHOD([dispid(91), 'propput'], HRESULT, 'BackgroundLinesVisible',
              ( ['in'], VARIANT_BOOL, 'pVal' )),
    COMMETHOD([dispid(92), 'propget'], HRESULT, 'BackgroundLinesHiddenLine',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal' )),
    COMMETHOD([dispid(92), 'propput'], HRESULT, 'BackgroundLinesHiddenLine',
              ( ['in'], VARIANT_BOOL, 'pVal' )),
    COMMETHOD([dispid(93), 'propget'], HRESULT, 'BackgroundLinesColor',
              ( ['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor' )),
    COMMETHOD([dispid(93), 'propput'], HRESULT, 'BackgroundLinesColor',
              ( ['in'], POINTER(IAcadAcCmColor), 'pColor' )),
    COMMETHOD([dispid(94), 'propget'], HRESULT, 'BackgroundLinesLayer',
              ( ['out', 'retval'], POINTER(BSTR), 'Layer' )),
    COMMETHOD([dispid(94), 'propput'], HRESULT, 'BackgroundLinesLayer',
              ( ['in'], BSTR, 'Layer' )),
    COMMETHOD([dispid(95), 'propget'], HRESULT, 'BackgroundLinesLinetype',
              ( ['out', 'retval'], POINTER(BSTR), 'Linetype' )),
    COMMETHOD([dispid(95), 'propput'], HRESULT, 'BackgroundLinesLinetype',
              ( ['in'], BSTR, 'Linetype' )),
    COMMETHOD([dispid(96), 'propget'], HRESULT, 'BackgroundLinesLinetypeScale',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'ltScale' )),
    COMMETHOD([dispid(96), 'propput'], HRESULT, 'BackgroundLinesLinetypeScale',
              ( ['in'], ACAD_NOUNITS, 'ltScale' )),
    COMMETHOD([dispid(97), 'propget'], HRESULT, 'BackgroundLinesPlotStyleName',
              ( ['out', 'retval'], POINTER(BSTR), 'plotStyle' )),
    COMMETHOD([dispid(97), 'propput'], HRESULT, 'BackgroundLinesPlotStyleName',
              ( ['in'], BSTR, 'plotStyle' )),
    COMMETHOD([dispid(98), 'propget'], HRESULT, 'BackgroundLinesLineweight',
              ( ['out', 'retval'], POINTER(ACAD_LWEIGHT), 'Lineweight' )),
    COMMETHOD([dispid(98), 'propput'], HRESULT, 'BackgroundLinesLineweight',
              ( ['in'], ACAD_LWEIGHT, 'Lineweight' )),
    COMMETHOD([dispid(111), 'propget'], HRESULT, 'ForegroundLinesVisible',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal' )),
    COMMETHOD([dispid(111), 'propput'], HRESULT, 'ForegroundLinesVisible',
              ( ['in'], VARIANT_BOOL, 'pVal' )),
    COMMETHOD([dispid(112), 'propget'], HRESULT, 'ForegroundLinesHiddenLine',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal' )),
    COMMETHOD([dispid(112), 'propput'], HRESULT, 'ForegroundLinesHiddenLine',
              ( ['in'], VARIANT_BOOL, 'pVal' )),
    COMMETHOD([dispid(113), 'propget'], HRESULT, 'ForegroundLinesColor',
              ( ['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor' )),
    COMMETHOD([dispid(113), 'propput'], HRESULT, 'ForegroundLinesColor',
              ( ['in'], POINTER(IAcadAcCmColor), 'pColor' )),
    COMMETHOD([dispid(114), 'propget'], HRESULT, 'ForegroundLinesLayer',
              ( ['out', 'retval'], POINTER(BSTR), 'Layer' )),
    COMMETHOD([dispid(114), 'propput'], HRESULT, 'ForegroundLinesLayer',
              ( ['in'], BSTR, 'Layer' )),
    COMMETHOD([dispid(115), 'propget'], HRESULT, 'ForegroundLinesLinetype',
              ( ['out', 'retval'], POINTER(BSTR), 'Linetype' )),
    COMMETHOD([dispid(115), 'propput'], HRESULT, 'ForegroundLinesLinetype',
              ( ['in'], BSTR, 'Linetype' )),
    COMMETHOD([dispid(116), 'propget'], HRESULT, 'ForegroundLinesLinetypeScale',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'ltScale' )),
    COMMETHOD([dispid(116), 'propput'], HRESULT, 'ForegroundLinesLinetypeScale',
              ( ['in'], ACAD_NOUNITS, 'ltScale' )),
    COMMETHOD([dispid(117), 'propget'], HRESULT, 'ForegroundLinesPlotStyleName',
              ( ['out', 'retval'], POINTER(BSTR), 'plotStyle' )),
    COMMETHOD([dispid(117), 'propput'], HRESULT, 'ForegroundLinesPlotStyleName',
              ( ['in'], BSTR, 'plotStyle' )),
    COMMETHOD([dispid(118), 'propget'], HRESULT, 'ForegroundLinesLineweight',
              ( ['out', 'retval'], POINTER(ACAD_LWEIGHT), 'Lineweight' )),
    COMMETHOD([dispid(118), 'propput'], HRESULT, 'ForegroundLinesLineweight',
              ( ['in'], ACAD_LWEIGHT, 'Lineweight' )),
    COMMETHOD([dispid(119), 'propget'], HRESULT, 'ForegroundLinesFaceTransparency',
              ( ['out', 'retval'], POINTER(c_int), 'pVal' )),
    COMMETHOD([dispid(119), 'propput'], HRESULT, 'ForegroundLinesFaceTransparency',
              ( ['in'], c_int, 'pVal' )),
    COMMETHOD([dispid(120), 'propget'], HRESULT, 'ForegroundLinesEdgeTransparency',
              ( ['out', 'retval'], POINTER(c_int), 'pVal' )),
    COMMETHOD([dispid(120), 'propput'], HRESULT, 'ForegroundLinesEdgeTransparency',
              ( ['in'], c_int, 'pVal' )),
    COMMETHOD([dispid(131), 'propget'], HRESULT, 'CurveTangencyLinesVisible',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal' )),
    COMMETHOD([dispid(131), 'propput'], HRESULT, 'CurveTangencyLinesVisible',
              ( ['in'], VARIANT_BOOL, 'pVal' )),
    COMMETHOD([dispid(132), 'propget'], HRESULT, 'CurveTangencyLinesColor',
              ( ['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor' )),
    COMMETHOD([dispid(132), 'propput'], HRESULT, 'CurveTangencyLinesColor',
              ( ['in'], POINTER(IAcadAcCmColor), 'pColor' )),
    COMMETHOD([dispid(133), 'propget'], HRESULT, 'CurveTangencyLinesLayer',
              ( ['out', 'retval'], POINTER(BSTR), 'Layer' )),
    COMMETHOD([dispid(133), 'propput'], HRESULT, 'CurveTangencyLinesLayer',
              ( ['in'], BSTR, 'Layer' )),
    COMMETHOD([dispid(134), 'propget'], HRESULT, 'CurveTangencyLinesLinetype',
              ( ['out', 'retval'], POINTER(BSTR), 'Linetype' )),
    COMMETHOD([dispid(134), 'propput'], HRESULT, 'CurveTangencyLinesLinetype',
              ( ['in'], BSTR, 'Linetype' )),
    COMMETHOD([dispid(135), 'propget'], HRESULT, 'CurveTangencyLinesLinetypeScale',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'ltScale' )),
    COMMETHOD([dispid(135), 'propput'], HRESULT, 'CurveTangencyLinesLinetypeScale',
              ( ['in'], ACAD_NOUNITS, 'ltScale' )),
    COMMETHOD([dispid(136), 'propget'], HRESULT, 'CurveTangencyLinesPlotStyleName',
              ( ['out', 'retval'], POINTER(BSTR), 'plotStyle' )),
    COMMETHOD([dispid(136), 'propput'], HRESULT, 'CurveTangencyLinesPlotStyleName',
              ( ['in'], BSTR, 'plotStyle' )),
    COMMETHOD([dispid(137), 'propget'], HRESULT, 'CurveTangencyLinesLineweight',
              ( ['out', 'retval'], POINTER(ACAD_LWEIGHT), 'Lineweight' )),
    COMMETHOD([dispid(137), 'propput'], HRESULT, 'CurveTangencyLinesLineweight',
              ( ['in'], ACAD_LWEIGHT, 'Lineweight' )),
]
################################################################
## code template for IAcadSectionTypeSettings implementation
##class IAcadSectionTypeSettings_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    GenerationOptions = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    SourceObjects = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    DestinationBlock = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    DestinationFile = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pColor
##    def _set(self, pColor):
##        '-no docstring-'
##    IntersectionBoundaryColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Layer
##    def _set(self, Layer):
##        '-no docstring-'
##    IntersectionBoundaryLayer = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Linetype
##    def _set(self, Linetype):
##        '-no docstring-'
##    IntersectionBoundaryLinetype = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return ltScale
##    def _set(self, ltScale):
##        '-no docstring-'
##    IntersectionBoundaryLinetypeScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return plotStyle
##    def _set(self, plotStyle):
##        '-no docstring-'
##    IntersectionBoundaryPlotStyleName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Lineweight
##    def _set(self, Lineweight):
##        '-no docstring-'
##    IntersectionBoundaryLineweight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    IntersectionBoundaryDivisionLines = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    IntersectionFillVisible = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    IntersectionFillHatchPatternType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    IntersectionFillHatchPatternName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    IntersectionFillHatchAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    IntersectionFillHatchScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    IntersectionFillHatchSpacing = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pColor
##    def _set(self, pColor):
##        '-no docstring-'
##    IntersectionFillColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Layer
##    def _set(self, Layer):
##        '-no docstring-'
##    IntersectionFillLayer = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Linetype
##    def _set(self, Linetype):
##        '-no docstring-'
##    IntersectionFillLinetype = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return ltScale
##    def _set(self, ltScale):
##        '-no docstring-'
##    IntersectionFillLinetypeScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return plotStyle
##    def _set(self, plotStyle):
##        '-no docstring-'
##    IntersectionFillPlotStyleName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Lineweight
##    def _set(self, Lineweight):
##        '-no docstring-'
##    IntersectionFillLineweight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    IntersectionFillFaceTransparency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    BackgroundLinesVisible = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    BackgroundLinesHiddenLine = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pColor
##    def _set(self, pColor):
##        '-no docstring-'
##    BackgroundLinesColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Layer
##    def _set(self, Layer):
##        '-no docstring-'
##    BackgroundLinesLayer = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Linetype
##    def _set(self, Linetype):
##        '-no docstring-'
##    BackgroundLinesLinetype = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return ltScale
##    def _set(self, ltScale):
##        '-no docstring-'
##    BackgroundLinesLinetypeScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return plotStyle
##    def _set(self, plotStyle):
##        '-no docstring-'
##    BackgroundLinesPlotStyleName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Lineweight
##    def _set(self, Lineweight):
##        '-no docstring-'
##    BackgroundLinesLineweight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    ForegroundLinesVisible = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    ForegroundLinesHiddenLine = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pColor
##    def _set(self, pColor):
##        '-no docstring-'
##    ForegroundLinesColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Layer
##    def _set(self, Layer):
##        '-no docstring-'
##    ForegroundLinesLayer = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Linetype
##    def _set(self, Linetype):
##        '-no docstring-'
##    ForegroundLinesLinetype = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return ltScale
##    def _set(self, ltScale):
##        '-no docstring-'
##    ForegroundLinesLinetypeScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return plotStyle
##    def _set(self, plotStyle):
##        '-no docstring-'
##    ForegroundLinesPlotStyleName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Lineweight
##    def _set(self, Lineweight):
##        '-no docstring-'
##    ForegroundLinesLineweight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    ForegroundLinesFaceTransparency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    ForegroundLinesEdgeTransparency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    CurveTangencyLinesVisible = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pColor
##    def _set(self, pColor):
##        '-no docstring-'
##    CurveTangencyLinesColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Layer
##    def _set(self, Layer):
##        '-no docstring-'
##    CurveTangencyLinesLayer = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Linetype
##    def _set(self, Linetype):
##        '-no docstring-'
##    CurveTangencyLinesLinetype = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return ltScale
##    def _set(self, ltScale):
##        '-no docstring-'
##    CurveTangencyLinesLinetypeScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return plotStyle
##    def _set(self, plotStyle):
##        '-no docstring-'
##    CurveTangencyLinesPlotStyleName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Lineweight
##    def _set(self, Lineweight):
##        '-no docstring-'
##    CurveTangencyLinesLineweight = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'AcInsertUnitsAction'
acInsertUnitsPrompt = 0
acInsertUnitsAutoAssign = 1
AcInsertUnitsAction = c_int # enum

# values for enumeration 'AcToolbarDockStatus'
acToolbarDockTop = 0
acToolbarDockBottom = 1
acToolbarDockLeft = 2
acToolbarDockRight = 3
acToolbarFloating = 4
AcToolbarDockStatus = c_int # enum

# values for enumeration 'AcPlotPolicy'
acPolicyNamed = 0
acPolicyLegacy = 1
AcPlotPolicy = c_int # enum

# values for enumeration 'AcDrawingAreaShortCutMenu'
acNoDrawingAreaShortCutMenu = 0
acUseDefaultDrawingAreaShortCutMenu = 1
AcDrawingAreaShortCutMenu = c_int # enum

# values for enumeration 'AcDrawingAreaSCMDefault'
acRepeatLastCommand = 0
acSCM = 1
AcDrawingAreaSCMDefault = c_int # enum
class AxDbDocument(CoClass):
    _reg_clsid_ = GUID('{12A11FEE-FE9A-4E50-9DD8-1AB5E6AB9B7A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AxDbDocument._com_interfaces_ = [IAxDbDocument]
AxDbDocument._outgoing_interfaces_ = [IAxDbDocumentEvents]


# values for enumeration 'AcDrawingAreaSCMEdit'
acEdRepeatLastCommand = 0
acEdSCM = 1
AcDrawingAreaSCMEdit = c_int # enum

# values for enumeration 'AcDrawingAreaSCMCommand'
acEnter = 0
acEnableSCMOptions = 1
acEnableSCM = 2
AcDrawingAreaSCMCommand = c_int # enum

# values for enumeration 'AcLayerStateMask'
acLsNone = 0
acLsOn = 1
acLsFrozen = 2
acLsLocked = 4
acLsPlot = 8
acLsNewViewport = 16
acLsColor = 32
acLsLineType = 64
acLsLineWeight = 128
acLsPlotStyle = 256
acLsAll = 65535
AcLayerStateMask = c_int # enum

# values for enumeration 'AcShadePlot'
acShadePlotAsDisplayed = 0
acShadePlotWireframe = 1
acShadePlotHidden = 2
acShadePlotRendered = 3
AcShadePlot = c_int # enum
IAcadBlocks._methods_ = [
    COMMETHOD([dispid(0)], HRESULT, 'Item',
              ( ['in'], VARIANT, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadBlock)), 'pItem' )),
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pVal' )),
    COMMETHOD([dispid(-4), 'restricted', 'hidden', 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Add',
              ( ['in'], VARIANT, 'InsertionPoint' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadBlock)), 'pBlock' )),
]
################################################################
## code template for IAcadBlocks implementation
##class IAcadBlocks_Impl(object):
##    def Item(self, Index):
##        '-no docstring-'
##        #return pItem
##
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return pVal
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return pVal
##
##    def Add(self, InsertionPoint, Name):
##        '-no docstring-'
##        #return pBlock
##


# values for enumeration 'AcWindowState'
acNorm = 1
acMin = 2
acMax = 3
AcWindowState = c_int # enum

# values for enumeration 'AcHatchObjectType'
acHatchObject = 0
acGradientObject = 1
AcHatchObjectType = c_int # enum

# values for enumeration 'AcGradientPatternType'
acPreDefinedGradient = 0
acUserDefinedGradient = 1
AcGradientPatternType = c_int # enum

# values for enumeration 'AcPlotPaperUnits'
acInches = 0
acMillimeters = 1
acPixels = 2
AcPlotPaperUnits = c_int # enum

# values for enumeration 'AcTableDirection'
acTableTopToBottom = 0
acTableBottomToTop = 1
AcTableDirection = c_int # enum
class IAcadGroup(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{161DF05A-F0AD-4B58-855B-E1C5FB2539B3}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadGroups._methods_ = [
    COMMETHOD([dispid(0)], HRESULT, 'Item',
              ( ['in'], VARIANT, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadGroup)), 'pItem' )),
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pCount' )),
    COMMETHOD([dispid(-4), 'restricted', 'hidden', 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadGroup)), 'pDimStyle' )),
]
################################################################
## code template for IAcadGroups implementation
##class IAcadGroups_Impl(object):
##    def Item(self, Index):
##        '-no docstring-'
##        #return pItem
##
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return pCount
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return pVal
##
##    def Add(self, Name):
##        '-no docstring-'
##        #return pDimStyle
##


# values for enumeration 'AcPlotRotation'
ac0degrees = 0
ac90degrees = 1
ac180degrees = 2
ac270degrees = 3
AcPlotRotation = c_int # enum

# values for enumeration 'AcCellAlignment'
acTopLeft = 1
acTopCenter = 2
acTopRight = 3
acMiddleLeft = 4
acMiddleCenter = 5
acMiddleRight = 6
acBottomLeft = 7
acBottomCenter = 8
acBottomRight = 9
AcCellAlignment = c_int # enum
class IAcadPViewport(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{A42E1B91-44CA-4E2A-845E-B9ADA24EC3AB}')
    _idlflags_ = ['dual', 'oleautomation']

# values for enumeration 'AcViewportScale'
acVpScaleToFit = 0
acVpCustomScale = 1
acVp1_1 = 2
acVp1_2 = 3
acVp1_4 = 4
acVp1_5 = 5
acVp1_8 = 6
acVp1_10 = 7
acVp1_16 = 8
acVp1_20 = 9
acVp1_30 = 10
acVp1_40 = 11
acVp1_50 = 12
acVp1_100 = 13
acVp2_1 = 14
acVp4_1 = 15
acVp8_1 = 16
acVp10_1 = 17
acVp100_1 = 18
acVp1_128in_1ft = 19
acVp1_64in_1ft = 20
acVp1_32in_1ft = 21
acVp1_16in_1ft = 22
acVp3_32in_1ft = 23
acVp1_8in_1ft = 24
acVp3_16in_1ft = 25
acVp1_4in_1ft = 26
acVp3_8in_1ft = 27
acVp1_2in_1ft = 28
acVp3_4in_1ft = 29
acVp1in_1ft = 30
acVp1and1_2in_1ft = 31
acVp3in_1ft = 32
acVp6in_1ft = 33
acVp1ft_1ft = 34
AcViewportScale = c_int # enum
class IAcadView(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{7EF878FA-2786-4AAD-9E98-A061F7A0C0AF}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadPViewport._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Center',
              ( ['out', 'retval'], POINTER(VARIANT), 'CenterPoint' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'Center',
              ( ['in'], VARIANT, 'CenterPoint' )),
    COMMETHOD([dispid(2), 'nonbrowsable', 'propget'], HRESULT, 'Direction',
              ( ['out', 'retval'], POINTER(VARIANT), 'dirVector' )),
    COMMETHOD([dispid(2), 'nonbrowsable', 'propput'], HRESULT, 'Direction',
              ( ['in'], VARIANT, 'dirVector' )),
    COMMETHOD([dispid(3), 'nonbrowsable', 'propget'], HRESULT, 'GridOn',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bGridOn' )),
    COMMETHOD([dispid(3), 'nonbrowsable', 'propput'], HRESULT, 'GridOn',
              ( ['in'], VARIANT_BOOL, 'bGridOn' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'Height',
              ( ['out', 'retval'], POINTER(c_double), 'Height' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'Height',
              ( ['in'], c_double, 'Height' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(c_double), 'Width' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'Width',
              ( ['in'], c_double, 'Width' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'ViewportOn',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bOn' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'ViewportOn',
              ( ['in'], VARIANT_BOOL, 'bOn' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'Clipped',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bClipped' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'DisplayLocked',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bLocked' )),
    COMMETHOD([dispid(8), 'propput'], HRESULT, 'DisplayLocked',
              ( ['in'], VARIANT_BOOL, 'bLocked' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'StandardScale',
              ( ['out', 'retval'], POINTER(AcViewportScale), 'scale' )),
    COMMETHOD([dispid(9), 'propput'], HRESULT, 'StandardScale',
              ( ['in'], AcViewportScale, 'scale' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'CustomScale',
              ( ['out', 'retval'], POINTER(c_double), 'scale' )),
    COMMETHOD([dispid(10), 'propput'], HRESULT, 'CustomScale',
              ( ['in'], c_double, 'scale' )),
    COMMETHOD([dispid(11), 'hidden', 'propget'], HRESULT, 'StyleSheet',
              ( ['out', 'retval'], POINTER(BSTR), 'pName' )),
    COMMETHOD([dispid(11), 'hidden', 'propput'], HRESULT, 'StyleSheet',
              ( ['in'], BSTR, 'pName' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'UCSPerViewport',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'UCSSaved' )),
    COMMETHOD([dispid(12), 'propput'], HRESULT, 'UCSPerViewport',
              ( ['in'], VARIANT_BOOL, 'UCSSaved' )),
    COMMETHOD([dispid(13), 'nonbrowsable', 'propget'], HRESULT, 'SnapBasePoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'lowLeft' )),
    COMMETHOD([dispid(13), 'nonbrowsable', 'propput'], HRESULT, 'SnapBasePoint',
              ( ['in'], VARIANT, 'lowLeft' )),
    COMMETHOD([dispid(14), 'nonbrowsable', 'propget'], HRESULT, 'SnapOn',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bSnapOn' )),
    COMMETHOD([dispid(14), 'nonbrowsable', 'propput'], HRESULT, 'SnapOn',
              ( ['in'], VARIANT_BOOL, 'bSnapOn' )),
    COMMETHOD([dispid(15), 'nonbrowsable', 'propget'], HRESULT, 'SnapRotationAngle',
              ( ['out', 'retval'], POINTER(c_double), 'Angle' )),
    COMMETHOD([dispid(15), 'nonbrowsable', 'propput'], HRESULT, 'SnapRotationAngle',
              ( ['in'], c_double, 'Angle' )),
    COMMETHOD([dispid(16), 'nonbrowsable', 'propget'], HRESULT, 'UCSIconOn',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bIconOn' )),
    COMMETHOD([dispid(16), 'nonbrowsable', 'propput'], HRESULT, 'UCSIconOn',
              ( ['in'], VARIANT_BOOL, 'bIconOn' )),
    COMMETHOD([dispid(17), 'nonbrowsable', 'propget'], HRESULT, 'UCSIconAtOrigin',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bIconAtOrigin' )),
    COMMETHOD([dispid(17), 'nonbrowsable', 'propput'], HRESULT, 'UCSIconAtOrigin',
              ( ['in'], VARIANT_BOOL, 'bIconAtOrigin' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetGridSpacing',
              ( ['out'], POINTER(c_double), 'XSpacing' ),
              ( ['out'], POINTER(c_double), 'YSpacing' )),
    COMMETHOD([dispid(19)], HRESULT, 'SetGridSpacing',
              ( ['in'], c_double, 'XSpacing' ),
              ( ['in'], c_double, 'YSpacing' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetSnapSpacing',
              ( ['out'], POINTER(c_double), 'XSpacing' ),
              ( ['out'], POINTER(c_double), 'YSpacing' )),
    COMMETHOD([dispid(21)], HRESULT, 'SetSnapSpacing',
              ( ['in'], c_double, 'XSpacing' ),
              ( ['in'], c_double, 'YSpacing' )),
    COMMETHOD([dispid(22)], HRESULT, 'Display',
              ( ['in'], VARIANT_BOOL, 'bStatus' )),
    COMMETHOD([dispid(23), 'nonbrowsable', 'propget'], HRESULT, 'TwistAngle',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'Angle' )),
    COMMETHOD([dispid(23), 'nonbrowsable', 'propput'], HRESULT, 'TwistAngle',
              ( ['in'], ACAD_ANGLE, 'Angle' )),
    COMMETHOD([dispid(24), 'nonbrowsable', 'propget'], HRESULT, 'LensLength',
              ( ['out', 'retval'], POINTER(c_double), 'Length' )),
    COMMETHOD([dispid(24), 'nonbrowsable', 'propput'], HRESULT, 'LensLength',
              ( ['in'], c_double, 'Length' )),
    COMMETHOD([dispid(25), 'hidden', 'propget'], HRESULT, 'RemoveHiddenLines',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bRemoval' )),
    COMMETHOD([dispid(25), 'hidden', 'propput'], HRESULT, 'RemoveHiddenLines',
              ( ['in'], VARIANT_BOOL, 'bRemoval' )),
    COMMETHOD([dispid(26), 'nonbrowsable', 'propget'], HRESULT, 'Target',
              ( ['out', 'retval'], POINTER(VARIANT), 'targetPoint' )),
    COMMETHOD([dispid(26), 'nonbrowsable', 'propput'], HRESULT, 'Target',
              ( ['in'], VARIANT, 'targetPoint' )),
    COMMETHOD([dispid(27), 'nonbrowsable', 'propget'], HRESULT, 'ArcSmoothness',
              ( ['out', 'retval'], POINTER(c_int), 'arcSmooth' )),
    COMMETHOD([dispid(27), 'nonbrowsable', 'propput'], HRESULT, 'ArcSmoothness',
              ( ['in'], c_int, 'arcSmooth' )),
    COMMETHOD([dispid(28), 'propget'], HRESULT, 'VisualStyle',
              ( ['out', 'retval'], POINTER(c_int), 'pVisualStyleIndex' )),
    COMMETHOD([dispid(28), 'propput'], HRESULT, 'VisualStyle',
              ( ['in'], c_int, 'pVisualStyleIndex' )),
    COMMETHOD([dispid(29), 'propget'], HRESULT, 'ShadePlot',
              ( ['out', 'retval'], POINTER(c_int), 'pShadePlotIndex' )),
    COMMETHOD([dispid(29), 'propput'], HRESULT, 'ShadePlot',
              ( ['in'], c_int, 'pShadePlotIndex' )),
    COMMETHOD([dispid(32), 'propget'], HRESULT, 'ModelView',
              ( ['out', 'retval'], POINTER(POINTER(IAcadView)), 'View' )),
    COMMETHOD([dispid(32), 'propput'], HRESULT, 'ModelView',
              ( ['in'], POINTER(IAcadView), 'View' )),
    COMMETHOD([dispid(33), 'propget'], HRESULT, 'SheetView',
              ( ['out', 'retval'], POINTER(POINTER(IAcadView)), 'View' )),
    COMMETHOD([dispid(33), 'propput'], HRESULT, 'SheetView',
              ( ['in'], POINTER(IAcadView), 'View' )),
    COMMETHOD([dispid(34), 'propget'], HRESULT, 'LabelBlockId',
              ( ['out', 'retval'], POINTER(LONG_PTR), 'ObjectID' )),
    COMMETHOD([dispid(34), 'propput'], HRESULT, 'LabelBlockId',
              ( ['in'], POINTER(LONG_PTR), 'ObjectID' )),
    COMMETHOD([dispid(35), 'propget'], HRESULT, 'HasSheetView',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bSheetView' )),
    COMMETHOD([dispid(36)], HRESULT, 'SyncModelView'),
    COMMETHOD([dispid(39), 'propget'], HRESULT, 'StandardScale2',
              ( ['out', 'retval'], POINTER(c_int), 'scale' )),
    COMMETHOD([dispid(39), 'propput'], HRESULT, 'StandardScale2',
              ( ['in'], c_int, 'scale' )),
    COMMETHOD([dispid(37), 'propget'], HRESULT, 'LayerPropertyOverrides',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bOverrides' )),
]
################################################################
## code template for IAcadPViewport implementation
##class IAcadPViewport_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return CenterPoint
##    def _set(self, CenterPoint):
##        '-no docstring-'
##    Center = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return dirVector
##    def _set(self, dirVector):
##        '-no docstring-'
##    Direction = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bGridOn
##    def _set(self, bGridOn):
##        '-no docstring-'
##    GridOn = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Height
##    def _set(self, Height):
##        '-no docstring-'
##    Height = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Width
##    def _set(self, Width):
##        '-no docstring-'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bOn
##    def _set(self, bOn):
##        '-no docstring-'
##    ViewportOn = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Clipped(self):
##        '-no docstring-'
##        #return bClipped
##
##    def _get(self):
##        '-no docstring-'
##        #return bLocked
##    def _set(self, bLocked):
##        '-no docstring-'
##    DisplayLocked = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return scale
##    def _set(self, scale):
##        '-no docstring-'
##    StandardScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return scale
##    def _set(self, scale):
##        '-no docstring-'
##    CustomScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pName
##    def _set(self, pName):
##        '-no docstring-'
##    StyleSheet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return UCSSaved
##    def _set(self, UCSSaved):
##        '-no docstring-'
##    UCSPerViewport = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return lowLeft
##    def _set(self, lowLeft):
##        '-no docstring-'
##    SnapBasePoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bSnapOn
##    def _set(self, bSnapOn):
##        '-no docstring-'
##    SnapOn = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Angle
##    def _set(self, Angle):
##        '-no docstring-'
##    SnapRotationAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bIconOn
##    def _set(self, bIconOn):
##        '-no docstring-'
##    UCSIconOn = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bIconAtOrigin
##    def _set(self, bIconAtOrigin):
##        '-no docstring-'
##    UCSIconAtOrigin = property(_get, _set, doc = _set.__doc__)
##
##    def GetGridSpacing(self):
##        '-no docstring-'
##        #return XSpacing, YSpacing
##
##    def SetGridSpacing(self, XSpacing, YSpacing):
##        '-no docstring-'
##        #return 
##
##    def GetSnapSpacing(self):
##        '-no docstring-'
##        #return XSpacing, YSpacing
##
##    def SetSnapSpacing(self, XSpacing, YSpacing):
##        '-no docstring-'
##        #return 
##
##    def Display(self, bStatus):
##        '-no docstring-'
##        #return 
##
##    def _get(self):
##        '-no docstring-'
##        #return Angle
##    def _set(self, Angle):
##        '-no docstring-'
##    TwistAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Length
##    def _set(self, Length):
##        '-no docstring-'
##    LensLength = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bRemoval
##    def _set(self, bRemoval):
##        '-no docstring-'
##    RemoveHiddenLines = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return targetPoint
##    def _set(self, targetPoint):
##        '-no docstring-'
##    Target = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return arcSmooth
##    def _set(self, arcSmooth):
##        '-no docstring-'
##    ArcSmoothness = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVisualStyleIndex
##    def _set(self, pVisualStyleIndex):
##        '-no docstring-'
##    VisualStyle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pShadePlotIndex
##    def _set(self, pShadePlotIndex):
##        '-no docstring-'
##    ShadePlot = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return View
##    def _set(self, View):
##        '-no docstring-'
##    ModelView = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return View
##    def _set(self, View):
##        '-no docstring-'
##    SheetView = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return ObjectID
##    def _set(self, ObjectID):
##        '-no docstring-'
##    LabelBlockId = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def HasSheetView(self):
##        '-no docstring-'
##        #return bSheetView
##
##    def SyncModelView(self):
##        '-no docstring-'
##        #return 
##
##    def _get(self):
##        '-no docstring-'
##        #return scale
##    def _set(self, scale):
##        '-no docstring-'
##    StandardScale2 = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LayerPropertyOverrides(self):
##        '-no docstring-'
##        #return bOverrides
##


# values for enumeration 'AcPlotType'
acDisplay = 0
acExtents = 1
acLimits = 2
acView = 3
acWindow = 4
acLayout = 5
AcPlotType = c_int # enum

# values for enumeration 'AcRowType'
acUnknownRow = 0
acDataRow = 1
acTitleRow = 2
acHeaderRow = 4
AcRowType = c_int # enum

# values for enumeration 'AcAlignment'
acAlignmentLeft = 0
acAlignmentCenter = 1
acAlignmentRight = 2
acAlignmentAligned = 3
acAlignmentMiddle = 4
acAlignmentFit = 5
acAlignmentTopLeft = 6
acAlignmentTopCenter = 7
acAlignmentTopRight = 8
acAlignmentMiddleLeft = 9
acAlignmentMiddleCenter = 10
acAlignmentMiddleRight = 11
acAlignmentBottomLeft = 12
acAlignmentBottomCenter = 13
acAlignmentBottomRight = 14
AcAlignment = c_int # enum

# values for enumeration 'AcPlotScale'
acScaleToFit = 0
ac1_128in_1ft = 1
ac1_64in_1ft = 2
ac1_32in_1ft = 3
ac1_16in_1ft = 4
ac3_32in_1ft = 5
ac1_8in_1ft = 6
ac3_16in_1ft = 7
ac1_4in_1ft = 8
ac3_8in_1ft = 9
ac1_2in_1ft = 10
ac3_4in_1ft = 11
ac1in_1ft = 12
ac3in_1ft = 13
ac6in_1ft = 14
ac1ft_1ft = 15
ac1_1 = 16
ac1_2 = 17
ac1_4 = 18
ac1_5 = 19
ac1_8 = 20
ac1_10 = 21
ac1_16 = 22
ac1_20 = 23
ac1_30 = 24
ac1_40 = 25
ac1_50 = 26
ac1_100 = 27
ac2_1 = 28
ac4_1 = 29
ac8_1 = 30
ac10_1 = 31
ac100_1 = 32
AcPlotScale = c_int # enum

# values for enumeration 'AcBlockScaling'
acAny = 0
acUniform = 1
AcBlockScaling = c_int # enum

# values for enumeration 'AcValueDataType'
acUnknownDataType = 0
acLong = 1
acDouble = 2
acString = 4
acDate = 8
acPoint2d = 16
acPoint3d = 32
acObjectId = 64
acBuffer = 128
acResbuf = 256
acGeneral = 512
AcValueDataType = c_int # enum
class AcadSectionSettings(CoClass):
    _reg_clsid_ = GUID('{011AC315-B963-444A-9159-D859AB0F5A18}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
class IAcadObjectEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{96E364A3-01BF-43B9-81AD-0233E0695C87}')
    _idlflags_ = ['oleautomation']
AcadSectionSettings._com_interfaces_ = [IAcadSectionSettings]
AcadSectionSettings._outgoing_interfaces_ = [IAcadObjectEvents]

class IAcadShadowDisplay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{41F68A39-6805-4A56-8A44-BECC2111F174}')
    _idlflags_ = ['dual', 'oleautomation']

# values for enumeration 'AcShadowDisplayType'
acCastsAndReceivesShadows = 0
acCastsShadows = 1
acReceivesShadows = 2
acIgnoreShadows = 3
AcShadowDisplayType = c_int # enum
IAcadShadowDisplay._methods_ = [
    COMMETHOD([dispid(1610678272), 'propget'], HRESULT, 'ShadowDisplay',
              ( ['out', 'retval'], POINTER(AcShadowDisplayType), 'ShadowDisplay' )),
    COMMETHOD([dispid(1610678272), 'propput'], HRESULT, 'ShadowDisplay',
              ( ['in'], AcShadowDisplayType, 'ShadowDisplay' )),
    COMMETHOD([dispid(1610678274), 'propget'], HRESULT, 'EnableShadowDisplay',
              ( ['out', 'retval'], POINTER(c_int), 'ShadowDisplay' )),
]
################################################################
## code template for IAcadShadowDisplay implementation
##class IAcadShadowDisplay_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return ShadowDisplay
##    def _set(self, ShadowDisplay):
##        '-no docstring-'
##    ShadowDisplay = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def EnableShadowDisplay(self):
##        '-no docstring-'
##        #return ShadowDisplay
##

class AcadSectionTypeSettings(CoClass):
    _reg_clsid_ = GUID('{46D3F96D-EE56-49D3-BB00-4D4A8C81CA30}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
class IAcadSectionTypeSettings2(IAcadSectionTypeSettings):
    _case_insensitive_ = True
    _iid_ = GUID('{250C2F8E-874D-4E5D-B8DC-DC7F7C9047EF}')
    _idlflags_ = ['dual', 'oleautomation']
AcadSectionTypeSettings._com_interfaces_ = [IAcadSectionTypeSettings2, IAcadSectionTypeSettings]
AcadSectionTypeSettings._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadPointCloud(CoClass):
    _reg_clsid_ = GUID('{449AEA0B-A290-469A-B3B4-E888E835E2FB}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
class IAcadPointCloud(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{21B1BDF2-8B9C-42BA-B663-5FC578A3B982}')
    _idlflags_ = ['dual', 'oleautomation']
AcadPointCloud._com_interfaces_ = [IAcadPointCloud]
AcadPointCloud._outgoing_interfaces_ = [IAcadObjectEvents]


# values for enumeration 'AcValueUnitType'
acUnitless = 0
acUnitDistance = 1
acUnitAngle = 2
acUnitArea = 4
acUnitVolume = 8
AcValueUnitType = c_int # enum
class IAcadPoint(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{E8DEBB85-E60A-474C-AFA7-4D8553704AA6}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadPoint._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Coordinates',
              ( ['out', 'retval'], POINTER(VARIANT), 'Coordinates' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'Coordinates',
              ( ['in'], VARIANT, 'Coordinates' )),
    COMMETHOD([dispid(2), 'nonbrowsable', 'propget'], HRESULT, 'Normal',
              ( ['out', 'retval'], POINTER(VARIANT), 'Normal' )),
    COMMETHOD([dispid(2), 'nonbrowsable', 'propput'], HRESULT, 'Normal',
              ( ['in'], VARIANT, 'Normal' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'Thickness',
              ( ['out', 'retval'], POINTER(c_double), 'Thickness' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'Thickness',
              ( ['in'], c_double, 'Thickness' )),
]
################################################################
## code template for IAcadPoint implementation
##class IAcadPoint_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Coordinates
##    def _set(self, Coordinates):
##        '-no docstring-'
##    Coordinates = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Normal
##    def _set(self, Normal):
##        '-no docstring-'
##    Normal = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Thickness
##    def _set(self, Thickness):
##        '-no docstring-'
##    Thickness = property(_get, _set, doc = _set.__doc__)
##

class IAcadPointCloudEx(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{097D469D-3ADA-42DA-9137-89C96556FE1A}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadPointCloudEx2(IAcadPointCloudEx):
    _case_insensitive_ = True
    _iid_ = GUID('{FDC69051-BCC8-4FDC-8284-B16AB3FB812E}')
    _idlflags_ = ['dual', 'oleautomation']

# values for enumeration 'AcPointCloudExStylizationType'
acRGB = 0
acObject = 1
acNormals = 2
acIntensities = 3
acElevation = 4
acClassification = 5
AcPointCloudExStylizationType = c_int # enum
IAcadPointCloudEx._methods_ = [
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'Stylization',
              ( ['out', 'retval'], POINTER(AcPointCloudExStylizationType), 'val' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'Stylization',
              ( ['in'], AcPointCloudExStylizationType, 'val' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'ColorScheme',
              ( ['out', 'retval'], POINTER(BSTR), 'val' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'ColorScheme',
              ( ['in'], c_int, 'val' )),
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'InsertionPoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'EndPoint' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'InsertionPoint',
              ( ['in'], VARIANT, 'EndPoint' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'Rotation',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'val' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'Rotation',
              ( ['in'], ACAD_ANGLE, 'val' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'scale',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'val' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'scale',
              ( ['in'], ACAD_NOUNITS, 'val' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'val' )),
    COMMETHOD([dispid(11), 'propput'], HRESULT, 'Name',
              ( ['in'], BSTR, 'val' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'val' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'ShowCropped',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'val' )),
    COMMETHOD([dispid(13), 'propput'], HRESULT, 'ShowCropped',
              ( ['in'], VARIANT_BOOL, 'val' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'Locked',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'val' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'Locked',
              ( ['in'], VARIANT_BOOL, 'val' )),
    COMMETHOD([dispid(16), 'propget'], HRESULT, 'Geolocate',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'val' )),
    COMMETHOD([dispid(16), 'propput'], HRESULT, 'Geolocate',
              ( ['in'], VARIANT_BOOL, 'val' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'Unit',
              ( ['out', 'retval'], POINTER(BSTR), 'val' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'UnitFactor',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'val' )),
]
################################################################
## code template for IAcadPointCloudEx implementation
##class IAcadPointCloudEx_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return val
##    def _set(self, val):
##        '-no docstring-'
##    Stylization = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return val
##    def _set(self, val):
##        '-no docstring-'
##    ColorScheme = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return EndPoint
##    def _set(self, EndPoint):
##        '-no docstring-'
##    InsertionPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return val
##    def _set(self, val):
##        '-no docstring-'
##    Rotation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return val
##    def _set(self, val):
##        '-no docstring-'
##    scale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return val
##    def _set(self, val):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Path(self):
##        '-no docstring-'
##        #return val
##
##    def _get(self):
##        '-no docstring-'
##        #return val
##    def _set(self, val):
##        '-no docstring-'
##    ShowCropped = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return val
##    def _set(self, val):
##        '-no docstring-'
##    Locked = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return val
##    def _set(self, val):
##        '-no docstring-'
##    Geolocate = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Unit(self):
##        '-no docstring-'
##        #return val
##
##    @property
##    def UnitFactor(self):
##        '-no docstring-'
##        #return val
##

IAcadPointCloudEx2._methods_ = [
    COMMETHOD([dispid(17), 'propget'], HRESULT, 'Segmentation',
              ( ['out', 'retval'], POINTER(BSTR), 'val' )),
]
################################################################
## code template for IAcadPointCloudEx2 implementation
##class IAcadPointCloudEx2_Impl(object):
##    @property
##    def Segmentation(self):
##        '-no docstring-'
##        #return val
##


# values for enumeration 'AcParseOption'
acParseOptionNone = 0
acSetDefaultFormat = 1
acPreserveMtextFormat = 2
AcParseOption = c_int # enum
IAcadSecurityParams._methods_ = [
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'Action',
              ( ['in'], c_int, 'pOperations' )),
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Action',
              ( ['out', 'retval'], POINTER(c_int), 'pOperations' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'Password',
              ( ['in'], BSTR, 'pSecret' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'Password',
              ( ['out', 'retval'], POINTER(BSTR), 'pSecret' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'ProviderType',
              ( ['in'], c_int, 'pProvType' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'ProviderType',
              ( ['out', 'retval'], POINTER(c_int), 'pProvType' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'ProviderName',
              ( ['in'], BSTR, 'pProvName' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'ProviderName',
              ( ['out', 'retval'], POINTER(BSTR), 'pProvName' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'Algorithm',
              ( ['in'], c_int, 'pAlgId' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'Algorithm',
              ( ['out', 'retval'], POINTER(c_int), 'pAlgId' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'KeyLength',
              ( ['in'], c_int, 'pKeyLen' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'KeyLength',
              ( ['out', 'retval'], POINTER(c_int), 'pKeyLen' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'Subject',
              ( ['in'], BSTR, 'pCertSubject' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'Subject',
              ( ['out', 'retval'], POINTER(BSTR), 'pCertSubject' )),
    COMMETHOD([dispid(8), 'propput'], HRESULT, 'Issuer',
              ( ['in'], BSTR, 'pCertIssuer' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'Issuer',
              ( ['out', 'retval'], POINTER(BSTR), 'pCertIssuer' )),
    COMMETHOD([dispid(9), 'propput'], HRESULT, 'SerialNumber',
              ( ['in'], BSTR, 'pSerialNum' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'SerialNumber',
              ( ['out', 'retval'], POINTER(BSTR), 'pSerialNum' )),
    COMMETHOD([dispid(10), 'propput'], HRESULT, 'Comment',
              ( ['in'], BSTR, 'pText' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'Comment',
              ( ['out', 'retval'], POINTER(BSTR), 'pText' )),
    COMMETHOD([dispid(11), 'propput'], HRESULT, 'TimeServer',
              ( ['in'], BSTR, 'pTimeServerName' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'TimeServer',
              ( ['out', 'retval'], POINTER(BSTR), 'pTimeServerName' )),
]
################################################################
## code template for IAcadSecurityParams implementation
##class IAcadSecurityParams_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return pOperations
##    def _set(self, pOperations):
##        '-no docstring-'
##    Action = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pSecret
##    def _set(self, pSecret):
##        '-no docstring-'
##    Password = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pProvType
##    def _set(self, pProvType):
##        '-no docstring-'
##    ProviderType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pProvName
##    def _set(self, pProvName):
##        '-no docstring-'
##    ProviderName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pAlgId
##    def _set(self, pAlgId):
##        '-no docstring-'
##    Algorithm = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pKeyLen
##    def _set(self, pKeyLen):
##        '-no docstring-'
##    KeyLength = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pCertSubject
##    def _set(self, pCertSubject):
##        '-no docstring-'
##    Subject = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pCertIssuer
##    def _set(self, pCertIssuer):
##        '-no docstring-'
##    Issuer = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pSerialNum
##    def _set(self, pSerialNum):
##        '-no docstring-'
##    SerialNumber = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pText
##    def _set(self, pText):
##        '-no docstring-'
##    Comment = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pTimeServerName
##    def _set(self, pTimeServerName):
##        '-no docstring-'
##    TimeServer = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'AcFormatOption'
kFormatOptionNone = 0
acForEditing = 1
acForExpression = 2
acUseMaximumPrecision = 4
acIgnoreMtextFormat = 8
AcFormatOption = c_int # enum
class IAcadLWPolyline(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{A530D58E-6EA3-49D3-B3BB-163755C57DAC}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadLWPolyline._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Coordinates',
              ( ['out', 'retval'], POINTER(VARIANT), 'Coordinates' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'Coordinates',
              ( ['in'], VARIANT, 'Coordinates' )),
    COMMETHOD([dispid(2), 'nonbrowsable', 'propget'], HRESULT, 'Normal',
              ( ['out', 'retval'], POINTER(VARIANT), 'Normal' )),
    COMMETHOD([dispid(2), 'nonbrowsable', 'propput'], HRESULT, 'Normal',
              ( ['in'], VARIANT, 'Normal' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'Thickness',
              ( ['out', 'retval'], POINTER(c_double), 'Thickness' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'Thickness',
              ( ['in'], c_double, 'Thickness' )),
    COMMETHOD([dispid(4)], HRESULT, 'AddVertex',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], VARIANT, 'vertex' )),
    COMMETHOD([dispid(5)], HRESULT, 'Explode',
              ( ['out', 'retval'], POINTER(VARIANT), 'pArrayObjs' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetBulge',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_double), 'bulge' )),
    COMMETHOD([dispid(7)], HRESULT, 'SetBulge',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_double, 'bulge' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetWidth',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(c_double), 'StartWidth' ),
              ( ['out'], POINTER(c_double), 'EndWidth' )),
    COMMETHOD([dispid(9)], HRESULT, 'SetWidth',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_double, 'StartWidth' ),
              ( ['in'], c_double, 'EndWidth' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'ConstantWidth',
              ( ['out', 'retval'], POINTER(c_double), 'Width' )),
    COMMETHOD([dispid(10), 'propput'], HRESULT, 'ConstantWidth',
              ( ['in'], c_double, 'Width' )),
    COMMETHOD([dispid(11)], HRESULT, 'Offset',
              ( ['in'], c_double, 'Distance' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'pOffsetCurves' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'Elevation',
              ( ['out', 'retval'], POINTER(c_double), 'Elevation' )),
    COMMETHOD([dispid(12), 'propput'], HRESULT, 'Elevation',
              ( ['in'], c_double, 'Elevation' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'Area',
              ( ['out', 'retval'], POINTER(c_double), 'Area' )),
    COMMETHOD([dispid(14), 'nonbrowsable', 'propget'], HRESULT, 'Coordinate',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD([dispid(14), 'nonbrowsable', 'propput'], HRESULT, 'Coordinate',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], VARIANT, 'pVal' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'Closed',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'fClose' )),
    COMMETHOD([dispid(15), 'propput'], HRESULT, 'Closed',
              ( ['in'], VARIANT_BOOL, 'fClose' )),
    COMMETHOD([dispid(16), 'propget'], HRESULT, 'LinetypeGeneration',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bLinetypeGen' )),
    COMMETHOD([dispid(16), 'propput'], HRESULT, 'LinetypeGeneration',
              ( ['in'], VARIANT_BOOL, 'bLinetypeGen' )),
    COMMETHOD([dispid(17), 'propget'], HRESULT, 'Length',
              ( ['out', 'retval'], POINTER(c_double), 'Length' )),
]
################################################################
## code template for IAcadLWPolyline implementation
##class IAcadLWPolyline_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Coordinates
##    def _set(self, Coordinates):
##        '-no docstring-'
##    Coordinates = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Normal
##    def _set(self, Normal):
##        '-no docstring-'
##    Normal = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Thickness
##    def _set(self, Thickness):
##        '-no docstring-'
##    Thickness = property(_get, _set, doc = _set.__doc__)
##
##    def AddVertex(self, Index, vertex):
##        '-no docstring-'
##        #return 
##
##    def Explode(self):
##        '-no docstring-'
##        #return pArrayObjs
##
##    def GetBulge(self, Index):
##        '-no docstring-'
##        #return bulge
##
##    def SetBulge(self, Index, bulge):
##        '-no docstring-'
##        #return 
##
##    def GetWidth(self, Index):
##        '-no docstring-'
##        #return StartWidth, EndWidth
##
##    def SetWidth(self, Index, StartWidth, EndWidth):
##        '-no docstring-'
##        #return 
##
##    def _get(self):
##        '-no docstring-'
##        #return Width
##    def _set(self, Width):
##        '-no docstring-'
##    ConstantWidth = property(_get, _set, doc = _set.__doc__)
##
##    def Offset(self, Distance):
##        '-no docstring-'
##        #return pOffsetCurves
##
##    def _get(self):
##        '-no docstring-'
##        #return Elevation
##    def _set(self, Elevation):
##        '-no docstring-'
##    Elevation = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Area(self):
##        '-no docstring-'
##        #return Area
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return pVal
##    def _set(self, Index, pVal):
##        '-no docstring-'
##    Coordinate = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return fClose
##    def _set(self, fClose):
##        '-no docstring-'
##    Closed = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bLinetypeGen
##    def _set(self, bLinetypeGen):
##        '-no docstring-'
##    LinetypeGeneration = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Length(self):
##        '-no docstring-'
##        #return Length
##

class IAcadLeader(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{A673E7DC-3A9C-4E97-BC4D-0D4FCB53BEEA}')
    _idlflags_ = ['dual', 'oleautomation']

# values for enumeration 'AcDimVerticalJustification'
acVertCentered = 0
acAbove = 1
acOutside = 2
acJIS = 3
acUnder = 4
AcDimVerticalJustification = c_int # enum
IAcadLeader._methods_ = [
    COMMETHOD([dispid(64), 'propget'], HRESULT, 'Coordinates',
              ( ['out', 'retval'], POINTER(VARIANT), 'Coordinates' )),
    COMMETHOD([dispid(64), 'propput'], HRESULT, 'Coordinates',
              ( ['in'], VARIANT, 'Coordinates' )),
    COMMETHOD([dispid(1537), 'nonbrowsable', 'propget'], HRESULT, 'Normal',
              ( ['out', 'retval'], POINTER(VARIANT), 'Normal' )),
    COMMETHOD([dispid(1542), 'propget'], HRESULT, 'StyleName',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(1542), 'propput'], HRESULT, 'StyleName',
              ( ['in'], BSTR, 'bstrName' )),
    COMMETHOD([dispid(65), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AcLeaderType), 'Type' )),
    COMMETHOD([dispid(65), 'propput'], HRESULT, 'Type',
              ( ['in'], AcLeaderType, 'Type' )),
    COMMETHOD([dispid(66)], HRESULT, 'Evaluate'),
    COMMETHOD([dispid(67), 'nonbrowsable', 'propget'], HRESULT, 'Coordinate',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD([dispid(67), 'nonbrowsable', 'propput'], HRESULT, 'Coordinate',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], VARIANT, 'pVal' )),
    COMMETHOD([dispid(68), 'nonbrowsable', 'propget'], HRESULT, 'Annotation',
              ( ['out', 'retval'], POINTER(POINTER(IAcadEntity)), 'pVal' )),
    COMMETHOD([dispid(68), 'nonbrowsable', 'propput'], HRESULT, 'Annotation',
              ( ['in'], POINTER(IAcadEntity), 'pVal' )),
    COMMETHOD([dispid(1543), 'propget'], HRESULT, 'ArrowheadSize',
              ( ['out', 'retval'], POINTER(c_double), 'size' )),
    COMMETHOD([dispid(1543), 'propput'], HRESULT, 'ArrowheadSize',
              ( ['in'], c_double, 'size' )),
    COMMETHOD([dispid(69), 'propget'], HRESULT, 'ArrowheadType',
              ( ['out', 'retval'], POINTER(AcDimArrowheadType), 'Type' )),
    COMMETHOD([dispid(69), 'propput'], HRESULT, 'ArrowheadType',
              ( ['in'], AcDimArrowheadType, 'Type' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'DimensionLineColor',
              ( ['out', 'retval'], POINTER(ACAD_COLOR), 'Type' )),
    COMMETHOD([dispid(13), 'propput'], HRESULT, 'DimensionLineColor',
              ( ['in'], ACAD_COLOR, 'Type' )),
    COMMETHOD([dispid(1550), 'propget'], HRESULT, 'DimensionLineWeight',
              ( ['out', 'retval'], POINTER(ACAD_LWEIGHT), 'weight' )),
    COMMETHOD([dispid(1550), 'propput'], HRESULT, 'DimensionLineWeight',
              ( ['in'], ACAD_LWEIGHT, 'weight' )),
    COMMETHOD([dispid(1553), 'propget'], HRESULT, 'ScaleFactor',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'factor' )),
    COMMETHOD([dispid(1553), 'propput'], HRESULT, 'ScaleFactor',
              ( ['in'], ACAD_NOUNITS, 'factor' )),
    COMMETHOD([dispid(1554), 'propget'], HRESULT, 'VerticalTextPosition',
              ( ['out', 'retval'], POINTER(AcDimVerticalJustification), 'Type' )),
    COMMETHOD([dispid(1554), 'propput'], HRESULT, 'VerticalTextPosition',
              ( ['in'], AcDimVerticalJustification, 'Type' )),
    COMMETHOD([dispid(1549), 'propget'], HRESULT, 'TextGap',
              ( ['out', 'retval'], POINTER(c_double), 'Offset' )),
    COMMETHOD([dispid(1549), 'propput'], HRESULT, 'TextGap',
              ( ['in'], c_double, 'Offset' )),
    COMMETHOD([dispid(70), 'nonbrowsable', 'propget'], HRESULT, 'ArrowheadBlock',
              ( ['out', 'retval'], POINTER(BSTR), 'BlockName' )),
    COMMETHOD([dispid(70), 'nonbrowsable', 'propput'], HRESULT, 'ArrowheadBlock',
              ( ['in'], BSTR, 'BlockName' )),
]
################################################################
## code template for IAcadLeader implementation
##class IAcadLeader_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Coordinates
##    def _set(self, Coordinates):
##        '-no docstring-'
##    Coordinates = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Normal(self):
##        '-no docstring-'
##        #return Normal
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrName
##    def _set(self, bstrName):
##        '-no docstring-'
##    StyleName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    Type = property(_get, _set, doc = _set.__doc__)
##
##    def Evaluate(self):
##        '-no docstring-'
##        #return 
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return pVal
##    def _set(self, Index, pVal):
##        '-no docstring-'
##    Coordinate = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    Annotation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return size
##    def _set(self, size):
##        '-no docstring-'
##    ArrowheadSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    ArrowheadType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    DimensionLineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return weight
##    def _set(self, weight):
##        '-no docstring-'
##    DimensionLineWeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return factor
##    def _set(self, factor):
##        '-no docstring-'
##    ScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    VerticalTextPosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Offset
##    def _set(self, Offset):
##        '-no docstring-'
##    TextGap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return BlockName
##    def _set(self, BlockName):
##        '-no docstring-'
##    ArrowheadBlock = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'AcGridLineType'
acInvalidGridLine = 0
acHorzTop = 1
acHorzInside = 2
acHorzBottom = 4
acVertLeft = 8
acVertInside = 16
acVertRight = 32
AcGridLineType = c_int # enum
class IAcadLineType(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{2652DC55-85CF-448C-AF77-39FA18348A1C}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadLineType._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrDes' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'Description',
              ( ['in'], BSTR, 'bstrDes' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'Name',
              ( ['in'], BSTR, 'bstrName' )),
]
################################################################
## code template for IAcadLineType implementation
##class IAcadLineType_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return bstrDes
##    def _set(self, bstrDes):
##        '-no docstring-'
##    Description = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrName
##    def _set(self, bstrName):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##

class IAcadMaterial(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{30E32AC5-DF4D-4ABC-831F-6B3E1E1E8709}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadMaterial._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrDes' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'Description',
              ( ['in'], BSTR, 'bstrDes' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'Name',
              ( ['in'], BSTR, 'bstrName' )),
]
################################################################
## code template for IAcadMaterial implementation
##class IAcadMaterial_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return bstrDes
##    def _set(self, bstrDes):
##        '-no docstring-'
##    Description = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrName
##    def _set(self, bstrName):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'AcCellType'
acUnknownCell = 0
acTextCell = 1
acBlockCell = 2
AcCellType = c_int # enum

# values for enumeration 'AcWireframeType'
acIsolines = 0
acIsoparms = 1
AcWireframeType = c_int # enum

# values for enumeration 'AcCellEdgeMask'
acTopMask = 1
acRightMask = 2
acBottomMask = 4
acLeftMask = 8
AcCellEdgeMask = c_int # enum
class IAcadRegisteredApplication(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{CE7A43AE-05B8-4B24-9D8E-D688551B3C9B}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadRegisteredApplications._methods_ = [
    COMMETHOD([dispid(0)], HRESULT, 'Item',
              ( ['in'], VARIANT, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadRegisteredApplication)), 'pItem' )),
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pCount' )),
    COMMETHOD([dispid(-4), 'restricted', 'hidden', 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadRegisteredApplication)), 'pRegApp' )),
]
################################################################
## code template for IAcadRegisteredApplications implementation
##class IAcadRegisteredApplications_Impl(object):
##    def Item(self, Index):
##        '-no docstring-'
##        #return pItem
##
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return pCount
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return pVal
##
##    def Add(self, Name):
##        '-no docstring-'
##        #return pRegApp
##


# values for enumeration 'AcRotationAngle'
acDegreesUnknown = -1
acDegrees000 = 0
acDegrees090 = 1
acDegrees180 = 2
acDegrees270 = 3
AcRotationAngle = c_int # enum
IAcadView._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Center',
              ( ['out', 'retval'], POINTER(VARIANT), 'Center' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'Center',
              ( ['in'], VARIANT, 'Center' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'Height',
              ( ['out', 'retval'], POINTER(c_double), 'Height' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'Height',
              ( ['in'], c_double, 'Height' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(c_double), 'Width' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'Width',
              ( ['in'], c_double, 'Width' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'Target',
              ( ['out', 'retval'], POINTER(VARIANT), 'targetPoint' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'Target',
              ( ['in'], VARIANT, 'targetPoint' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'Direction',
              ( ['out', 'retval'], POINTER(VARIANT), 'dirVec' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'Direction',
              ( ['in'], VARIANT, 'dirVec' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'Name',
              ( ['in'], BSTR, 'bstrName' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'CategoryName',
              ( ['out', 'retval'], POINTER(BSTR), 'category' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'CategoryName',
              ( ['in'], BSTR, 'category' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'LayoutId',
              ( ['out', 'retval'], POINTER(LONG_PTR), 'ObjectID' )),
    COMMETHOD([dispid(8), 'propput'], HRESULT, 'LayoutId',
              ( ['in'], LONG_PTR, 'ObjectID' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'LayerState',
              ( ['out', 'retval'], POINTER(BSTR), 'LayerState' )),
    COMMETHOD([dispid(9), 'propput'], HRESULT, 'LayerState',
              ( ['in'], BSTR, 'LayerState' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'HasVpAssociation',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVpAssoc' )),
    COMMETHOD([dispid(10), 'propput'], HRESULT, 'HasVpAssociation',
              ( ['in'], VARIANT_BOOL, 'bVpAssoc' )),
]
################################################################
## code template for IAcadView implementation
##class IAcadView_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Center
##    def _set(self, Center):
##        '-no docstring-'
##    Center = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Height
##    def _set(self, Height):
##        '-no docstring-'
##    Height = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Width
##    def _set(self, Width):
##        '-no docstring-'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return targetPoint
##    def _set(self, targetPoint):
##        '-no docstring-'
##    Target = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return dirVec
##    def _set(self, dirVec):
##        '-no docstring-'
##    Direction = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrName
##    def _set(self, bstrName):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return category
##    def _set(self, category):
##        '-no docstring-'
##    CategoryName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return ObjectID
##    def _set(self, ObjectID):
##        '-no docstring-'
##    LayoutId = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return LayerState
##    def _set(self, LayerState):
##        '-no docstring-'
##    LayerState = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVpAssoc
##    def _set(self, bVpAssoc):
##        '-no docstring-'
##    HasVpAssociation = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'AcPointCloudColorType'
acTrueColor = 0
acByColor = 1
AcPointCloudColorType = c_int # enum
class AcadPointCloudEx(CoClass):
    _reg_clsid_ = GUID('{0D72F4DB-9504-4A88-8513-E76A28E0CC37}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadPointCloudEx._com_interfaces_ = [IAcadPointCloudEx2]
AcadPointCloudEx._outgoing_interfaces_ = [IAcadObjectEvents]


# values for enumeration 'AcPlotOrientation'
acPlotOrientationPortrait = 0
acPlotOrientationLandscape = 1
AcPlotOrientation = c_int # enum

# values for enumeration 'AcadSecurityParamsType'
ACADSECURITYPARAMS_ENCRYPT_DATA = 1
ACADSECURITYPARAMS_ENCRYPT_PROPS = 2
ACADSECURITYPARAMS_SIGN_DATA = 16
ACADSECURITYPARAMS_ADD_TIMESTAMP = 32
AcadSecurityParamsType = c_int # enum

# values for enumeration 'AcMergeCellStyleOption'
acMergeCellStyleNone = 0
acMergeCellStyleCopyDuplicates = 1
acMergeCellStyleOverwriteDuplicates = 2
acMergeCellStyleConvertDuplicatesToOverrides = 4
acMergeCellStyleIgnoreNewStyles = 8
AcMergeCellStyleOption = c_int # enum

# values for enumeration 'AcPointCloudStylizationType'
acScanColor = 0
acObjectColor = 1
acNormal = 2
acIntensity = 3
AcPointCloudStylizationType = c_int # enum
class AcadSummaryInfo(CoClass):
    _reg_clsid_ = GUID('{A368E2FB-5D40-4A13-BA25-1EEA18D9E01D}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadSummaryInfo._com_interfaces_ = [IAcadSummaryInfo]

class IAcadTextStyle(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{A2D10692-3F4C-4AC6-A29F-63EEE1903858}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadTextStyles._methods_ = [
    COMMETHOD([dispid(0)], HRESULT, 'Item',
              ( ['in'], VARIANT, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadTextStyle)), 'pItem' )),
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pCount' )),
    COMMETHOD([dispid(-4), 'restricted', 'hidden', 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadTextStyle)), 'pTextStyle' )),
]
################################################################
## code template for IAcadTextStyles implementation
##class IAcadTextStyles_Impl(object):
##    def Item(self, Index):
##        '-no docstring-'
##        #return pItem
##
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return pCount
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return pVal
##
##    def Add(self, Name):
##        '-no docstring-'
##        #return pTextStyle
##

class AcadDatabasePreferences(CoClass):
    _reg_clsid_ = GUID('{1674FC08-8162-43A8-85DD-414076A3AE14}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadDatabasePreferences._com_interfaces_ = [IAcadDatabasePreferences]

class IAcadXRecord(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{015D7E79-7991-42F1-8B00-410501BDDB1E}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadDictionary._methods_ = [
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pVal' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'Name',
              ( ['in'], BSTR, 'pVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'AddObject',
              ( ['in'], BSTR, 'Keyword' ),
              ( ['in'], BSTR, 'ObjectName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadObject)), 'pNewObj' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetName',
              ( ['in'], POINTER(IAcadObject), 'Object' ),
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetObject',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadObject)), 'pObj' )),
    COMMETHOD([dispid(6)], HRESULT, 'Remove',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadObject)), 'pObj' )),
    COMMETHOD([dispid(7)], HRESULT, 'Rename',
              ( ['in'], BSTR, 'OldName' ),
              ( ['in'], BSTR, 'NewName' )),
    COMMETHOD([dispid(8)], HRESULT, 'Replace',
              ( ['in'], BSTR, 'OldName' ),
              ( ['in'], POINTER(IAcadObject), 'pObj' )),
    COMMETHOD([dispid(0)], HRESULT, 'Item',
              ( ['in'], VARIANT, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadObject)), 'pItem' )),
    COMMETHOD([dispid(-4), 'restricted', 'hidden', 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal' )),
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'AddXRecord',
              ( ['in'], BSTR, 'Keyword' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadXRecord)), 'pNewXRecord' )),
]
################################################################
## code template for IAcadDictionary implementation
##class IAcadDictionary_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def AddObject(self, Keyword, ObjectName):
##        '-no docstring-'
##        #return pNewObj
##
##    def GetName(self, Object):
##        '-no docstring-'
##        #return bstrName
##
##    def GetObject(self, Name):
##        '-no docstring-'
##        #return pObj
##
##    def Remove(self, Name):
##        '-no docstring-'
##        #return pObj
##
##    def Rename(self, OldName, NewName):
##        '-no docstring-'
##        #return 
##
##    def Replace(self, OldName, pObj):
##        '-no docstring-'
##        #return 
##
##    def Item(self, Index):
##        '-no docstring-'
##        #return pItem
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return pVal
##
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return pVal
##
##    def AddXRecord(self, Keyword):
##        '-no docstring-'
##        #return pNewXRecord
##


# values for enumeration 'AcKeyboardAccelerator'
acPreferenceClassic = 0
acPreferenceCustom = 1
AcKeyboardAccelerator = c_int # enum

# values for enumeration 'AcPointCloudIntensityStyle'
acIntensityGrayscale = 0
acIntensityRainbow = 1
acIntensityRed = 2
acIntensityGreen = 3
acIntensityBlue = 4
acIntensityEditableFlag = 5
AcPointCloudIntensityStyle = c_int # enum
class AcadDatabase(CoClass):
    _reg_clsid_ = GUID('{794AD62B-2BF1-4BE2-BBAC-4BF4FE9F932B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadDatabase._com_interfaces_ = [IAcadDatabase]


# values for enumeration 'AcadSecurityParamsConstants'
ACADSECURITYPARAMS_ALGID_RC4 = 26625
AcadSecurityParamsConstants = c_int # enum

# values for enumeration 'AcSelectType'
acTableSelectWindow = 1
acTableSelectCrossing = 2
AcSelectType = c_int # enum

# values for enumeration 'AcOleType'
acOTLink = 1
acOTEmbedded = 2
acOTStatic = 3
AcOleType = c_int # enum

# values for enumeration 'AcVerticalAlignment'
acVerticalAlignmentBaseline = 0
acVerticalAlignmentBottom = 1
acVerticalAlignmentMiddle = 2
acVerticalAlignmentTop = 3
AcVerticalAlignment = c_int # enum
IAcadLayerStateManager._methods_ = [
    COMMETHOD([dispid(1610743808)], HRESULT, 'SetDatabase',
              ( ['in'], POINTER(IAcadDatabase), 'iHostDb' )),
    COMMETHOD([dispid(1610743809), 'propput'], HRESULT, 'Mask',
              ( ['in'], BSTR, 'bsName' ),
              ( ['in'], AcLayerStateMask, 'eMask' )),
    COMMETHOD([dispid(1610743809), 'propget'], HRESULT, 'Mask',
              ( ['in'], BSTR, 'bsName' ),
              ( ['out', 'retval'], POINTER(AcLayerStateMask), 'eMask' )),
    COMMETHOD([dispid(1610743811)], HRESULT, 'Save',
              ( ['in'], BSTR, 'bsName' ),
              ( ['in'], AcLayerStateMask, 'eMask' )),
    COMMETHOD([dispid(1610743812)], HRESULT, 'Restore',
              ( ['in'], BSTR, 'bsName' )),
    COMMETHOD([dispid(1610743813)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'bsName' )),
    COMMETHOD([dispid(1610743814)], HRESULT, 'Rename',
              ( ['in'], BSTR, 'bsName' ),
              ( ['in'], BSTR, 'bsNewName' )),
    COMMETHOD([dispid(1610743815)], HRESULT, 'Import',
              ( ['in'], BSTR, 'bsFilename' )),
    COMMETHOD([dispid(1610743816)], HRESULT, 'Export',
              ( ['in'], BSTR, 'bsName' ),
              ( ['in'], BSTR, 'bsFilename' )),
]
################################################################
## code template for IAcadLayerStateManager implementation
##class IAcadLayerStateManager_Impl(object):
##    def SetDatabase(self, iHostDb):
##        '-no docstring-'
##        #return 
##
##    def _get(self, bsName):
##        '-no docstring-'
##        #return eMask
##    def _set(self, bsName, eMask):
##        '-no docstring-'
##    Mask = property(_get, _set, doc = _set.__doc__)
##
##    def Save(self, bsName, eMask):
##        '-no docstring-'
##        #return 
##
##    def Restore(self, bsName):
##        '-no docstring-'
##        #return 
##
##    def Delete(self, bsName):
##        '-no docstring-'
##        #return 
##
##    def Rename(self, bsName, bsNewName):
##        '-no docstring-'
##        #return 
##
##    def Import(self, bsFilename):
##        '-no docstring-'
##        #return 
##
##    def Export(self, bsName, bsFilename):
##        '-no docstring-'
##        #return 
##

class IAcadMText(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{652D59B8-C0C3-4BAB-B210-C7E6EB343970}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadMText._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'TextString',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrText' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'TextString',
              ( ['in'], BSTR, 'bstrText' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'StyleName',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'StyleName',
              ( ['in'], BSTR, 'bstrName' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'AttachmentPoint',
              ( ['out', 'retval'], POINTER(AcAttachmentPoint), 'attPoint' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'AttachmentPoint',
              ( ['in'], AcAttachmentPoint, 'attPoint' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'DrawingDirection',
              ( ['out', 'retval'], POINTER(AcDrawingDirection), 'drawDir' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'DrawingDirection',
              ( ['in'], AcDrawingDirection, 'drawDir' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(c_double), 'Width' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'Width',
              ( ['in'], c_double, 'Width' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'Height',
              ( ['out', 'retval'], POINTER(c_double), 'Height' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'Height',
              ( ['in'], c_double, 'Height' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'Rotation',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'rotAngle' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'Rotation',
              ( ['in'], ACAD_ANGLE, 'rotAngle' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'InsertionPoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'insPoint' )),
    COMMETHOD([dispid(8), 'propput'], HRESULT, 'InsertionPoint',
              ( ['in'], VARIANT, 'insPoint' )),
    COMMETHOD([dispid(9), 'nonbrowsable', 'propget'], HRESULT, 'Normal',
              ( ['out', 'retval'], POINTER(VARIANT), 'Normal' )),
    COMMETHOD([dispid(9), 'nonbrowsable', 'propput'], HRESULT, 'Normal',
              ( ['in'], VARIANT, 'Normal' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'LineSpacingFactor',
              ( ['out', 'retval'], POINTER(c_double), 'factor' )),
    COMMETHOD([dispid(10), 'propput'], HRESULT, 'LineSpacingFactor',
              ( ['in'], c_double, 'factor' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'LineSpacingStyle',
              ( ['out', 'retval'], POINTER(AcLineSpacingStyle), 'style' )),
    COMMETHOD([dispid(11), 'propput'], HRESULT, 'LineSpacingStyle',
              ( ['in'], AcLineSpacingStyle, 'style' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'LineSpacingDistance',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(12), 'propput'], HRESULT, 'LineSpacingDistance',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'BackgroundFill',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bUseBackgroundFill' )),
    COMMETHOD([dispid(13), 'propput'], HRESULT, 'BackgroundFill',
              ( ['in'], VARIANT_BOOL, 'bUseBackgroundFill' )),
    COMMETHOD([dispid(14)], HRESULT, 'FieldCode',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrText' )),
]
################################################################
## code template for IAcadMText implementation
##class IAcadMText_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return bstrText
##    def _set(self, bstrText):
##        '-no docstring-'
##    TextString = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrName
##    def _set(self, bstrName):
##        '-no docstring-'
##    StyleName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return attPoint
##    def _set(self, attPoint):
##        '-no docstring-'
##    AttachmentPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return drawDir
##    def _set(self, drawDir):
##        '-no docstring-'
##    DrawingDirection = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Width
##    def _set(self, Width):
##        '-no docstring-'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Height
##    def _set(self, Height):
##        '-no docstring-'
##    Height = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return rotAngle
##    def _set(self, rotAngle):
##        '-no docstring-'
##    Rotation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return insPoint
##    def _set(self, insPoint):
##        '-no docstring-'
##    InsertionPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Normal
##    def _set(self, Normal):
##        '-no docstring-'
##    Normal = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return factor
##    def _set(self, factor):
##        '-no docstring-'
##    LineSpacingFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return style
##    def _set(self, style):
##        '-no docstring-'
##    LineSpacingStyle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LineSpacingDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bUseBackgroundFill
##    def _set(self, bUseBackgroundFill):
##        '-no docstring-'
##    BackgroundFill = property(_get, _set, doc = _set.__doc__)
##
##    def FieldCode(self):
##        '-no docstring-'
##        #return bstrText
##


# values for enumeration 'AcOlePlotQuality'
acOPQMonochrome = 0
acOPQLowGraphics = 1
acOPQHighGraphics = 2
AcOlePlotQuality = c_int # enum

# values for enumeration 'AcTextGenerationFlag'
acTextFlagBackward = 2
acTextFlagUpsideDown = 4
AcTextGenerationFlag = c_int # enum

# values for enumeration 'AcMLineJustification'
acTop = 0
acZero = 1
acBottom = 2
AcMLineJustification = c_int # enum

# values for enumeration 'AcTableStyleOverrides'
acTitleSuppressed = 1
acHeaderSuppressed = 2
acFlowDirection = 3
acHorzCellMargin = 4
acVertCellMargin = 5
acTitleRowColor = 6
acHeaderRowColor = 7
acDataRowColor = 8
acTitleRowFillNone = 9
acHeaderRowFillNone = 10
acDataRowFillNone = 11
acTitleRowFillColor = 12
acHeaderRowFillColor = 13
acDataRowFillColor = 14
acTitleRowAlignment = 15
acHeaderRowAlignment = 16
acDataRowAlignment = 17
acTitleRowTextStyle = 18
acHeaderRowTextStyle = 19
acDataRowTextStyle = 20
acTitleRowTextHeight = 21
acHeaderRowTextHeight = 22
acDataRowTextHeight = 23
acTitleRowDataType = 24
acHeaderRowDataType = 25
acDataRowDataType = 26
acTitleHorzTopColor = 40
acTitleHorzInsideColor = 41
acTitleHorzBottomColor = 42
acTitleVertLeftColor = 43
acTitleVertInsideColor = 44
acTitleVertRightColor = 45
acHeaderHorzTopColor = 46
acHeaderHorzInsideColor = 47
acHeaderHorzBottomColor = 48
acHeaderVertLeftColor = 49
acHeaderVertInsideColor = 50
acHeaderVertRightColor = 51
acDataHorzTopColor = 52
acDataHorzInsideColor = 53
acDataHorzBottomColor = 54
acDataVertLeftColor = 55
acDataVertInsideColor = 56
acDataVertRightColor = 57
acTitleHorzTopLineWeight = 70
acTitleHorzInsideLineWeight = 71
acTitleHorzBottomLineWeight = 72
acTitleVertLeftLineWeight = 73
acTitleVertInsideLineWeight = 74
acTitleVertRightLineWeight = 75
acHeaderHorzTopLineWeight = 76
acHeaderHorzInsideLineWeight = 77
acHeaderHorzBottomLineWeight = 78
acHeaderVertLeftLineWeight = 79
acHeaderVertInsideLineWeight = 80
acHeaderVertRightLineWeight = 81
acDataHorzTopLineWeight = 82
acDataHorzInsideLineWeight = 83
acDataHorzBottomLineWeight = 84
acDataVertLeftLineWeight = 85
acDataVertInsideLineWeight = 86
acDataVertRightLineWeight = 87
acTitleHorzTopVisibility = 100
acTitleHorzInsideVisibility = 101
acTitleHorzBottomVisibility = 102
acTitleVertLeftVisibility = 103
acTitleVertInsideVisibility = 104
acTitleVertRightVisibility = 105
acHeaderHorzTopVisibility = 106
acHeaderHorzInsideVisibility = 107
acHeaderHorzBottomVisibility = 108
acHeaderVertLeftVisibility = 109
acHeaderVertInsideVisibility = 110
acHeaderVertRightVisibility = 111
acDataHorzTopVisibility = 112
acDataHorzInsideVisibility = 113
acDataHorzBottomVisibility = 114
acDataVertLeftVisibility = 115
acDataVertInsideVisibility = 116
acDataVertRightVisibility = 117
acCellAlign = 130
acCellBackgroundFillNone = 131
acCellBackgroundColor = 132
acCellContentColor = 133
acCellTextStyle = 134
acCellTextHeight = 135
acCellTopGridColor = 136
acCellRightGridColor = 137
acCellBottomGridColor = 138
acCellLeftGridColor = 139
acCellTopGridLineWeight = 140
acCellRightGridLineWeight = 141
acCellBottomGridLineWeight = 142
acCellLeftGridLineWeight = 143
acCellTopVisibility = 144
acCellRightVisibility = 145
acCellBottomVisibility = 146
acCellLeftVisibility = 147
acCellDataType = 148
AcTableStyleOverrides = c_int # enum

# values for enumeration 'AcSelect'
acSelectionSetWindow = 0
acSelectionSetCrossing = 1
acSelectionSetFence = 2
acSelectionSetPrevious = 3
acSelectionSetLast = 4
acSelectionSetAll = 5
acSelectionSetWindowPolygon = 6
acSelectionSetCrossingPolygon = 7
AcSelect = c_int # enum
class AcadHyperlink(CoClass):
    _reg_clsid_ = GUID('{7BBE29A9-522F-402E-A3A8-C03135735067}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
class IAcadHyperlink(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{158958E4-27E9-4BDE-85C4-4D4705698656}')
    _idlflags_ = ['dual', 'oleautomation']
AcadHyperlink._com_interfaces_ = [IAcadHyperlink]

class IAcadSortentsTable(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{1913500F-8E44-484E-A415-11EC961980DB}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadSortentsTable._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'MoveToBottom',
              ( ['in'], VARIANT, 'Objects' )),
    COMMETHOD([dispid(2)], HRESULT, 'MoveToTop',
              ( ['in'], VARIANT, 'Objects' )),
    COMMETHOD([dispid(3)], HRESULT, 'MoveBelow',
              ( ['in'], VARIANT, 'Objects' ),
              ( ['in'], POINTER(IAcadEntity), 'Target' )),
    COMMETHOD([dispid(4)], HRESULT, 'MoveAbove',
              ( ['in'], VARIANT, 'Objects' ),
              ( ['in'], POINTER(IAcadEntity), 'Target' )),
    COMMETHOD([dispid(5)], HRESULT, 'SwapOrder',
              ( ['in'], POINTER(IAcadEntity), 'Object1' ),
              ( ['in'], POINTER(IAcadEntity), 'Object2' )),
    COMMETHOD([dispid(6)], HRESULT, 'Block',
              ( ['out', 'retval'], POINTER(POINTER(IAcadBlock)), 'pBlock' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetFullDrawOrder',
              ( ['out'], POINTER(VARIANT), 'Objects' ),
              ( ['in'], VARIANT_BOOL, 'honorSortentsSysvar' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetRelativeDrawOrder',
              ( ['out'], POINTER(VARIANT), 'Objects' ),
              ( ['in'], VARIANT_BOOL, 'honorSortentsSysvar' )),
    COMMETHOD([dispid(9)], HRESULT, 'SetRelativeDrawOrder',
              ( ['in'], VARIANT, 'Objects' )),
]
################################################################
## code template for IAcadSortentsTable implementation
##class IAcadSortentsTable_Impl(object):
##    def MoveToBottom(self, Objects):
##        '-no docstring-'
##        #return 
##
##    def MoveToTop(self, Objects):
##        '-no docstring-'
##        #return 
##
##    def MoveBelow(self, Objects, Target):
##        '-no docstring-'
##        #return 
##
##    def MoveAbove(self, Objects, Target):
##        '-no docstring-'
##        #return 
##
##    def SwapOrder(self, Object1, Object2):
##        '-no docstring-'
##        #return 
##
##    def Block(self):
##        '-no docstring-'
##        #return pBlock
##
##    def GetFullDrawOrder(self, honorSortentsSysvar):
##        '-no docstring-'
##        #return Objects
##
##    def GetRelativeDrawOrder(self, honorSortentsSysvar):
##        '-no docstring-'
##        #return Objects
##
##    def SetRelativeDrawOrder(self, Objects):
##        '-no docstring-'
##        #return 
##

IAcadXRecord._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'Name',
              ( ['in'], BSTR, 'bstrName' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetXRecordData',
              ( ['out'], POINTER(VARIANT), 'XRecordDataType' ),
              ( ['out'], POINTER(VARIANT), 'XRecordDataValue' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetXRecordData',
              ( ['in'], VARIANT, 'XRecordDataType' ),
              ( ['in'], VARIANT, 'XRecordDataValue' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'TranslateIDs',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'xlateIds' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'TranslateIDs',
              ( ['in'], VARIANT_BOOL, 'xlateIds' )),
]
################################################################
## code template for IAcadXRecord implementation
##class IAcadXRecord_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return bstrName
##    def _set(self, bstrName):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def GetXRecordData(self):
##        '-no docstring-'
##        #return XRecordDataType, XRecordDataValue
##
##    def SetXRecordData(self, XRecordDataType, XRecordDataValue):
##        '-no docstring-'
##        #return 
##
##    def _get(self):
##        '-no docstring-'
##        #return xlateIds
##    def _set(self, xlateIds):
##        '-no docstring-'
##    TranslateIDs = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'AcHatchStyle'
acHatchStyleNormal = 0
acHatchStyleOuter = 1
acHatchStyleIgnore = 2
AcHatchStyle = c_int # enum

# values for enumeration 'AcLoopType'
acHatchLoopTypeDefault = 0
acHatchLoopTypeExternal = 1
acHatchLoopTypePolyline = 2
acHatchLoopTypeDerived = 4
acHatchLoopTypeTextbox = 8
AcLoopType = c_int # enum

# values for enumeration 'AcColorMethod'
acColorMethodByLayer = 192
acColorMethodByBlock = 193
acColorMethodByRGB = 194
acColorMethodByACI = 195
acColorMethodForeground = 197
AcColorMethod = c_int # enum
class IAcadShape(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{F62492CD-B152-41E2-9788-FA60BE40AF99}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadShape._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'InsertionPoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'insPoint' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'InsertionPoint',
              ( ['in'], VARIANT, 'insPoint' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'Name',
              ( ['in'], BSTR, 'bstrName' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'Height',
              ( ['out', 'retval'], POINTER(c_double), 'Height' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'Height',
              ( ['in'], c_double, 'Height' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'Rotation',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'rotAngle' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'Rotation',
              ( ['in'], ACAD_ANGLE, 'rotAngle' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'ScaleFactor',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'scalFactor' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'ScaleFactor',
              ( ['in'], ACAD_NOUNITS, 'scalFactor' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'ObliqueAngle',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'obliAngle' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'ObliqueAngle',
              ( ['in'], ACAD_ANGLE, 'obliAngle' )),
    COMMETHOD([dispid(7), 'nonbrowsable', 'propget'], HRESULT, 'Normal',
              ( ['out', 'retval'], POINTER(VARIANT), 'Normal' )),
    COMMETHOD([dispid(7), 'nonbrowsable', 'propput'], HRESULT, 'Normal',
              ( ['in'], VARIANT, 'Normal' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'Thickness',
              ( ['out', 'retval'], POINTER(c_double), 'Thickness' )),
    COMMETHOD([dispid(8), 'propput'], HRESULT, 'Thickness',
              ( ['in'], c_double, 'Thickness' )),
]
################################################################
## code template for IAcadShape implementation
##class IAcadShape_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return insPoint
##    def _set(self, insPoint):
##        '-no docstring-'
##    InsertionPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrName
##    def _set(self, bstrName):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Height
##    def _set(self, Height):
##        '-no docstring-'
##    Height = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return rotAngle
##    def _set(self, rotAngle):
##        '-no docstring-'
##    Rotation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return scalFactor
##    def _set(self, scalFactor):
##        '-no docstring-'
##    ScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return obliAngle
##    def _set(self, obliAngle):
##        '-no docstring-'
##    ObliqueAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Normal
##    def _set(self, Normal):
##        '-no docstring-'
##    Normal = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Thickness
##    def _set(self, Thickness):
##        '-no docstring-'
##    Thickness = property(_get, _set, doc = _set.__doc__)
##

class IAcadPolyfaceMesh(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{F0748B5D-6783-45D1-93EF-841C4875C576}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadPolyfaceMesh._methods_ = [
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'Coordinates',
              ( ['in'], VARIANT, 'Vertices' )),
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Coordinates',
              ( ['out', 'retval'], POINTER(VARIANT), 'Vertices' )),
    COMMETHOD([dispid(2), 'nonbrowsable', 'propget'], HRESULT, 'Coordinate',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD([dispid(2), 'nonbrowsable', 'propput'], HRESULT, 'Coordinate',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], VARIANT, 'pVal' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'NumberOfVertices',
              ( ['out', 'retval'], POINTER(c_int), 'NumVertices' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'NumberOfFaces',
              ( ['out', 'retval'], POINTER(c_int), 'NumFaces' )),
    COMMETHOD([dispid(80), 'hidden', 'propput'], HRESULT, 'Faces',
              ( ['in'], VARIANT, 'rhs' )),
]
################################################################
## code template for IAcadPolyfaceMesh implementation
##class IAcadPolyfaceMesh_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Vertices
##    def _set(self, Vertices):
##        '-no docstring-'
##    Coordinates = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return pVal
##    def _set(self, Index, pVal):
##        '-no docstring-'
##    Coordinate = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def NumberOfVertices(self):
##        '-no docstring-'
##        #return NumVertices
##
##    @property
##    def NumberOfFaces(self):
##        '-no docstring-'
##        #return NumFaces
##
##    def _set(self, rhs):
##        '-no docstring-'
##    Faces = property(fset = _set, doc = _set.__doc__)
##

class IAcadTrace(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{91AC1AB0-4337-464B-A390-90D49474717C}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadTrace._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Coordinates',
              ( ['out', 'retval'], POINTER(VARIANT), 'corners' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'Coordinates',
              ( ['in'], VARIANT, 'corners' )),
    COMMETHOD([dispid(2), 'nonbrowsable', 'propget'], HRESULT, 'Normal',
              ( ['out', 'retval'], POINTER(VARIANT), 'Normal' )),
    COMMETHOD([dispid(2), 'nonbrowsable', 'propput'], HRESULT, 'Normal',
              ( ['in'], VARIANT, 'Normal' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'Thickness',
              ( ['out', 'retval'], POINTER(c_double), 'Thickness' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'Thickness',
              ( ['in'], c_double, 'Thickness' )),
    COMMETHOD([dispid(4), 'nonbrowsable', 'propget'], HRESULT, 'Coordinate',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD([dispid(4), 'nonbrowsable', 'propput'], HRESULT, 'Coordinate',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], VARIANT, 'pVal' )),
]
################################################################
## code template for IAcadTrace implementation
##class IAcadTrace_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return corners
##    def _set(self, corners):
##        '-no docstring-'
##    Coordinates = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Normal
##    def _set(self, Normal):
##        '-no docstring-'
##    Normal = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Thickness
##    def _set(self, Thickness):
##        '-no docstring-'
##    Thickness = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return pVal
##    def _set(self, Index, pVal):
##        '-no docstring-'
##    Coordinate = property(_get, _set, doc = _set.__doc__)
##

class IAcadTolerance(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{84DEC218-C33C-47A1-B9E6-F75D60715E89}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadTolerance._methods_ = [
    COMMETHOD([dispid(80), 'nonbrowsable', 'propget'], HRESULT, 'DirectionVector',
              ( ['out', 'retval'], POINTER(VARIANT), 'dirVector' )),
    COMMETHOD([dispid(80), 'nonbrowsable', 'propput'], HRESULT, 'DirectionVector',
              ( ['in'], VARIANT, 'dirVector' )),
    COMMETHOD([dispid(81), 'propget'], HRESULT, 'InsertionPoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'insPoint' )),
    COMMETHOD([dispid(81), 'propput'], HRESULT, 'InsertionPoint',
              ( ['in'], VARIANT, 'insPoint' )),
    COMMETHOD([dispid(82), 'nonbrowsable', 'propget'], HRESULT, 'Normal',
              ( ['out', 'retval'], POINTER(VARIANT), 'Normal' )),
    COMMETHOD([dispid(82), 'nonbrowsable', 'propput'], HRESULT, 'Normal',
              ( ['in'], VARIANT, 'Normal' )),
    COMMETHOD([dispid(1542), 'propget'], HRESULT, 'StyleName',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(1542), 'propput'], HRESULT, 'StyleName',
              ( ['in'], BSTR, 'bstrName' )),
    COMMETHOD([dispid(1546), 'propget'], HRESULT, 'TextColor',
              ( ['out', 'retval'], POINTER(ACAD_COLOR), 'color' )),
    COMMETHOD([dispid(1546), 'propput'], HRESULT, 'TextColor',
              ( ['in'], ACAD_COLOR, 'color' )),
    COMMETHOD([dispid(1541), 'propget'], HRESULT, 'TextString',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrText' )),
    COMMETHOD([dispid(1541), 'propput'], HRESULT, 'TextString',
              ( ['in'], BSTR, 'bstrText' )),
    COMMETHOD([dispid(1562), 'propget'], HRESULT, 'TextStyle',
              ( ['out', 'retval'], POINTER(BSTR), 'style' )),
    COMMETHOD([dispid(1562), 'propput'], HRESULT, 'TextStyle',
              ( ['in'], BSTR, 'style' )),
    COMMETHOD([dispid(1563), 'propget'], HRESULT, 'TextHeight',
              ( ['out', 'retval'], POINTER(c_double), 'Height' )),
    COMMETHOD([dispid(1563), 'propput'], HRESULT, 'TextHeight',
              ( ['in'], c_double, 'Height' )),
    COMMETHOD([dispid(1553), 'propget'], HRESULT, 'ScaleFactor',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'factor' )),
    COMMETHOD([dispid(1553), 'propput'], HRESULT, 'ScaleFactor',
              ( ['in'], ACAD_NOUNITS, 'factor' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'DimensionLineColor',
              ( ['out', 'retval'], POINTER(ACAD_COLOR), 'Type' )),
    COMMETHOD([dispid(13), 'propput'], HRESULT, 'DimensionLineColor',
              ( ['in'], ACAD_COLOR, 'Type' )),
]
################################################################
## code template for IAcadTolerance implementation
##class IAcadTolerance_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return dirVector
##    def _set(self, dirVector):
##        '-no docstring-'
##    DirectionVector = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return insPoint
##    def _set(self, insPoint):
##        '-no docstring-'
##    InsertionPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Normal
##    def _set(self, Normal):
##        '-no docstring-'
##    Normal = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrName
##    def _set(self, bstrName):
##        '-no docstring-'
##    StyleName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return color
##    def _set(self, color):
##        '-no docstring-'
##    TextColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrText
##    def _set(self, bstrText):
##        '-no docstring-'
##    TextString = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return style
##    def _set(self, style):
##        '-no docstring-'
##    TextStyle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Height
##    def _set(self, Height):
##        '-no docstring-'
##    TextHeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return factor
##    def _set(self, factor):
##        '-no docstring-'
##    ScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    DimensionLineColor = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'AcHorizontalAlignment'
acHorizontalAlignmentLeft = 0
acHorizontalAlignmentCenter = 1
acHorizontalAlignmentRight = 2
acHorizontalAlignmentAligned = 3
acHorizontalAlignmentMiddle = 4
acHorizontalAlignmentFit = 5
AcHorizontalAlignment = c_int # enum
class IAcadSolid(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{C7A631F3-83A2-4634-86AC-54EF2CC1A7AE}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadSolid._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Coordinates',
              ( ['out', 'retval'], POINTER(VARIANT), 'corners' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'Coordinates',
              ( ['in'], VARIANT, 'corners' )),
    COMMETHOD([dispid(2), 'nonbrowsable', 'propget'], HRESULT, 'Normal',
              ( ['out', 'retval'], POINTER(VARIANT), 'Normal' )),
    COMMETHOD([dispid(2), 'nonbrowsable', 'propput'], HRESULT, 'Normal',
              ( ['in'], VARIANT, 'Normal' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'Thickness',
              ( ['out', 'retval'], POINTER(c_double), 'Thickness' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'Thickness',
              ( ['in'], c_double, 'Thickness' )),
    COMMETHOD([dispid(4), 'nonbrowsable', 'propget'], HRESULT, 'Coordinate',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD([dispid(4), 'nonbrowsable', 'propput'], HRESULT, 'Coordinate',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], VARIANT, 'pVal' )),
]
################################################################
## code template for IAcadSolid implementation
##class IAcadSolid_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return corners
##    def _set(self, corners):
##        '-no docstring-'
##    Coordinates = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Normal
##    def _set(self, Normal):
##        '-no docstring-'
##    Normal = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Thickness
##    def _set(self, Thickness):
##        '-no docstring-'
##    Thickness = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return pVal
##    def _set(self, Index, pVal):
##        '-no docstring-'
##    Coordinate = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'AcSplineKnotParameterizationType'
acChord = 0
acSqrtChord = 1
acUniformParam = 2
acCustomParameterization = 15
AcSplineKnotParameterizationType = c_int # enum
class IAcadText(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{71EE3AA8-3997-4474-A916-CAAAC7275301}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadText._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'TextString',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrText' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'TextString',
              ( ['in'], BSTR, 'bstrText' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'StyleName',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'StyleName',
              ( ['in'], BSTR, 'bstrName' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'Alignment',
              ( ['out', 'retval'], POINTER(AcAlignment), 'align' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'Alignment',
              ( ['in'], AcAlignment, 'align' )),
    COMMETHOD([dispid(4), 'hidden', 'propget'], HRESULT, 'HorizontalAlignment',
              ( ['out', 'retval'], POINTER(AcHorizontalAlignment), 'horizAlign' )),
    COMMETHOD([dispid(4), 'hidden', 'propput'], HRESULT, 'HorizontalAlignment',
              ( ['in'], AcHorizontalAlignment, 'horizAlign' )),
    COMMETHOD([dispid(5), 'hidden', 'propget'], HRESULT, 'VerticalAlignment',
              ( ['out', 'retval'], POINTER(AcVerticalAlignment), 'vertiAlign' )),
    COMMETHOD([dispid(5), 'hidden', 'propput'], HRESULT, 'VerticalAlignment',
              ( ['in'], AcVerticalAlignment, 'vertiAlign' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'Height',
              ( ['out', 'retval'], POINTER(c_double), 'Height' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'Height',
              ( ['in'], c_double, 'Height' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'Rotation',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'rotAngle' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'Rotation',
              ( ['in'], ACAD_ANGLE, 'rotAngle' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'ScaleFactor',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'scalFactor' )),
    COMMETHOD([dispid(8), 'propput'], HRESULT, 'ScaleFactor',
              ( ['in'], ACAD_NOUNITS, 'scalFactor' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'ObliqueAngle',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'obliAngle' )),
    COMMETHOD([dispid(9), 'propput'], HRESULT, 'ObliqueAngle',
              ( ['in'], ACAD_ANGLE, 'obliAngle' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'TextAlignmentPoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'alignPoint' )),
    COMMETHOD([dispid(10), 'propput'], HRESULT, 'TextAlignmentPoint',
              ( ['in'], VARIANT, 'alignPoint' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'InsertionPoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'insPoint' )),
    COMMETHOD([dispid(11), 'propput'], HRESULT, 'InsertionPoint',
              ( ['in'], VARIANT, 'insPoint' )),
    COMMETHOD([dispid(12), 'nonbrowsable', 'propget'], HRESULT, 'Normal',
              ( ['out', 'retval'], POINTER(VARIANT), 'Normal' )),
    COMMETHOD([dispid(12), 'nonbrowsable', 'propput'], HRESULT, 'Normal',
              ( ['in'], VARIANT, 'Normal' )),
    COMMETHOD([dispid(13), 'nonbrowsable', 'propget'], HRESULT, 'TextGenerationFlag',
              ( ['out', 'retval'], POINTER(c_int), 'textGenFlag' )),
    COMMETHOD([dispid(13), 'nonbrowsable', 'propput'], HRESULT, 'TextGenerationFlag',
              ( ['in'], c_int, 'textGenFlag' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'Thickness',
              ( ['out', 'retval'], POINTER(c_double), 'Thickness' )),
    COMMETHOD([dispid(14), 'propput'], HRESULT, 'Thickness',
              ( ['in'], c_double, 'Thickness' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'UpsideDown',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'UpsideDown' )),
    COMMETHOD([dispid(15), 'propput'], HRESULT, 'UpsideDown',
              ( ['in'], VARIANT_BOOL, 'UpsideDown' )),
    COMMETHOD([dispid(16), 'propget'], HRESULT, 'Backward',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'Backward' )),
    COMMETHOD([dispid(16), 'propput'], HRESULT, 'Backward',
              ( ['in'], VARIANT_BOOL, 'Backward' )),
    COMMETHOD([dispid(17)], HRESULT, 'FieldCode',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrText' )),
]
################################################################
## code template for IAcadText implementation
##class IAcadText_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return bstrText
##    def _set(self, bstrText):
##        '-no docstring-'
##    TextString = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrName
##    def _set(self, bstrName):
##        '-no docstring-'
##    StyleName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return align
##    def _set(self, align):
##        '-no docstring-'
##    Alignment = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return horizAlign
##    def _set(self, horizAlign):
##        '-no docstring-'
##    HorizontalAlignment = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return vertiAlign
##    def _set(self, vertiAlign):
##        '-no docstring-'
##    VerticalAlignment = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Height
##    def _set(self, Height):
##        '-no docstring-'
##    Height = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return rotAngle
##    def _set(self, rotAngle):
##        '-no docstring-'
##    Rotation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return scalFactor
##    def _set(self, scalFactor):
##        '-no docstring-'
##    ScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return obliAngle
##    def _set(self, obliAngle):
##        '-no docstring-'
##    ObliqueAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return alignPoint
##    def _set(self, alignPoint):
##        '-no docstring-'
##    TextAlignmentPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return insPoint
##    def _set(self, insPoint):
##        '-no docstring-'
##    InsertionPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Normal
##    def _set(self, Normal):
##        '-no docstring-'
##    Normal = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return textGenFlag
##    def _set(self, textGenFlag):
##        '-no docstring-'
##    TextGenerationFlag = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Thickness
##    def _set(self, Thickness):
##        '-no docstring-'
##    Thickness = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return UpsideDown
##    def _set(self, UpsideDown):
##        '-no docstring-'
##    UpsideDown = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Backward
##    def _set(self, Backward):
##        '-no docstring-'
##    Backward = property(_get, _set, doc = _set.__doc__)
##
##    def FieldCode(self):
##        '-no docstring-'
##        #return bstrText
##


# values for enumeration 'AcSplineFrameType'
acShow = 0
acHide = 1
AcSplineFrameType = c_int # enum

# values for enumeration 'AcSplineMethodType'
acFit = 0
acControlVertices = 1
AcSplineMethodType = c_int # enum
class IAcadRasterImage(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{B15652E8-1148-467A-8D7E-0A33CE920744}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadRasterImage._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Brightness',
              ( ['out', 'retval'], POINTER(c_int), 'Brightness' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'Brightness',
              ( ['in'], c_int, 'Brightness' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'Contrast',
              ( ['out', 'retval'], POINTER(c_int), 'Contrast' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'Contrast',
              ( ['in'], c_int, 'Contrast' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'Fade',
              ( ['out', 'retval'], POINTER(c_int), 'Fade' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'Fade',
              ( ['in'], c_int, 'Fade' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'Origin',
              ( ['out', 'retval'], POINTER(VARIANT), 'Origin' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'Origin',
              ( ['in'], VARIANT, 'Origin' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'Rotation',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'rotAngle' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'Rotation',
              ( ['in'], ACAD_ANGLE, 'rotAngle' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'ImageWidth',
              ( ['out', 'retval'], POINTER(c_double), 'Width' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'ImageWidth',
              ( ['in'], c_double, 'Width' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'ImageHeight',
              ( ['out', 'retval'], POINTER(c_double), 'Height' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'ImageHeight',
              ( ['in'], c_double, 'Height' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(8), 'propput'], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([dispid(9), 'propput'], HRESULT, 'ImageFile',
              ( ['in'], BSTR, 'imageFileName' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'ImageFile',
              ( ['out', 'retval'], POINTER(BSTR), 'imageFileName' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'ImageVisibility',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'fVisible' )),
    COMMETHOD([dispid(10), 'propput'], HRESULT, 'ImageVisibility',
              ( ['in'], VARIANT_BOOL, 'fVisible' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'ClippingEnabled',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'kClip' )),
    COMMETHOD([dispid(11), 'propput'], HRESULT, 'ClippingEnabled',
              ( ['in'], VARIANT_BOOL, 'kClip' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'transparency',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bTransp' )),
    COMMETHOD([dispid(12), 'propput'], HRESULT, 'transparency',
              ( ['in'], VARIANT_BOOL, 'bTransp' )),
    COMMETHOD([dispid(13)], HRESULT, 'ClipBoundary',
              ( ['in'], VARIANT, 'boundry' )),
    COMMETHOD([dispid(14), 'nonbrowsable', 'propget'], HRESULT, 'Height',
              ( ['out', 'retval'], POINTER(c_double), 'pixelHeight' )),
    COMMETHOD([dispid(15), 'nonbrowsable', 'propget'], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(c_double), 'pixelWidth' )),
    COMMETHOD([dispid(16), 'nonbrowsable', 'propget'], HRESULT, 'ShowRotation',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bShow' )),
    COMMETHOD([dispid(16), 'nonbrowsable', 'propput'], HRESULT, 'ShowRotation',
              ( ['in'], VARIANT_BOOL, 'bShow' )),
    COMMETHOD([dispid(17), 'propget'], HRESULT, 'ScaleFactor',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'ScaleFactor' )),
    COMMETHOD([dispid(17), 'propput'], HRESULT, 'ScaleFactor',
              ( ['in'], ACAD_NOUNITS, 'ScaleFactor' )),
]
################################################################
## code template for IAcadRasterImage implementation
##class IAcadRasterImage_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Brightness
##    def _set(self, Brightness):
##        '-no docstring-'
##    Brightness = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Contrast
##    def _set(self, Contrast):
##        '-no docstring-'
##    Contrast = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Fade
##    def _set(self, Fade):
##        '-no docstring-'
##    Fade = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Origin
##    def _set(self, Origin):
##        '-no docstring-'
##    Origin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return rotAngle
##    def _set(self, rotAngle):
##        '-no docstring-'
##    Rotation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Width
##    def _set(self, Width):
##        '-no docstring-'
##    ImageWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Height
##    def _set(self, Height):
##        '-no docstring-'
##    ImageHeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Name
##    def _set(self, Name):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return imageFileName
##    def _set(self, imageFileName):
##        '-no docstring-'
##    ImageFile = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return fVisible
##    def _set(self, fVisible):
##        '-no docstring-'
##    ImageVisibility = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return kClip
##    def _set(self, kClip):
##        '-no docstring-'
##    ClippingEnabled = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bTransp
##    def _set(self, bTransp):
##        '-no docstring-'
##    transparency = property(_get, _set, doc = _set.__doc__)
##
##    def ClipBoundary(self, boundry):
##        '-no docstring-'
##        #return 
##
##    @property
##    def Height(self):
##        '-no docstring-'
##        #return pixelHeight
##
##    @property
##    def Width(self):
##        '-no docstring-'
##        #return pixelWidth
##
##    def _get(self):
##        '-no docstring-'
##        #return bShow
##    def _set(self, bShow):
##        '-no docstring-'
##    ShowRotation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return ScaleFactor
##    def _set(self, ScaleFactor):
##        '-no docstring-'
##    ScaleFactor = property(_get, _set, doc = _set.__doc__)
##

class IAcadHatch(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{240A7B13-918B-4CDC-B1E5-A5ED42867FD0}')
    _idlflags_ = ['dual', 'oleautomation']

# values for enumeration 'AcISOPenWidth'
acPenWidth013 = 13
acPenWidth018 = 18
acPenWidth025 = 25
acPenWidth035 = 35
acPenWidth050 = 50
acPenWidth070 = 70
acPenWidth100 = 100
acPenWidth140 = 140
acPenWidth200 = 200
acPenWidthUnk = -1
AcISOPenWidth = c_int # enum
IAcadHatch._methods_ = [
    COMMETHOD([dispid(1), 'nonbrowsable', 'propget'], HRESULT, 'Normal',
              ( ['out', 'retval'], POINTER(VARIANT), 'Normal' )),
    COMMETHOD([dispid(1), 'nonbrowsable', 'propput'], HRESULT, 'Normal',
              ( ['in'], VARIANT, 'Normal' )),
    COMMETHOD([dispid(2), 'nonbrowsable', 'propget'], HRESULT, 'NumberOfLoops',
              ( ['out', 'retval'], POINTER(c_int), 'numLoops' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'PatternType',
              ( ['out', 'retval'], POINTER(AcPatternType), 'PatternType' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'PatternName',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'PatternAngle',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'PatternAngle' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'PatternAngle',
              ( ['in'], ACAD_ANGLE, 'PatternAngle' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'PatternScale',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'PatternScale' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'PatternScale',
              ( ['in'], ACAD_NOUNITS, 'PatternScale' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'PatternSpace',
              ( ['out', 'retval'], POINTER(c_double), 'PatternSpace' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'PatternSpace',
              ( ['in'], c_double, 'PatternSpace' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'ISOPenWidth',
              ( ['out', 'retval'], POINTER(AcISOPenWidth), 'penWidth' )),
    COMMETHOD([dispid(8), 'propput'], HRESULT, 'ISOPenWidth',
              ( ['in'], AcISOPenWidth, 'penWidth' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'PatternDouble',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bDouble' )),
    COMMETHOD([dispid(9), 'propput'], HRESULT, 'PatternDouble',
              ( ['in'], VARIANT_BOOL, 'bDouble' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'Elevation',
              ( ['out', 'retval'], POINTER(c_double), 'Elevation' )),
    COMMETHOD([dispid(10), 'propput'], HRESULT, 'Elevation',
              ( ['in'], c_double, 'Elevation' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'AssociativeHatch',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'fAssoc' )),
    COMMETHOD([dispid(11), 'propput'], HRESULT, 'AssociativeHatch',
              ( ['in'], VARIANT_BOOL, 'fAssoc' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'HatchStyle',
              ( ['out', 'retval'], POINTER(AcHatchStyle), 'HatchStyle' )),
    COMMETHOD([dispid(12), 'propput'], HRESULT, 'HatchStyle',
              ( ['in'], AcHatchStyle, 'HatchStyle' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetPattern',
              ( ['in'], c_int, 'PatternType' ),
              ( ['in'], BSTR, 'PatternName' )),
    COMMETHOD([dispid(14)], HRESULT, 'AppendOuterLoop',
              ( ['in'], VARIANT, 'ObjectArray' )),
    COMMETHOD([dispid(15)], HRESULT, 'AppendInnerLoop',
              ( ['in'], VARIANT, 'ObjectArray' )),
    COMMETHOD([dispid(16)], HRESULT, 'InsertLoopAt',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], AcLoopType, 'LoopType' ),
              ( ['in'], VARIANT, 'ObjectArray' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetLoopAt',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(VARIANT), 'ObjectArray' )),
    COMMETHOD([dispid(18)], HRESULT, 'Evaluate'),
    COMMETHOD([dispid(19), 'propget'], HRESULT, 'GradientColor1',
              ( ['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor' )),
    COMMETHOD([dispid(19), 'propput'], HRESULT, 'GradientColor1',
              ( ['in'], POINTER(IAcadAcCmColor), 'pColor' )),
    COMMETHOD([dispid(20), 'propget'], HRESULT, 'GradientColor2',
              ( ['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor' )),
    COMMETHOD([dispid(20), 'propput'], HRESULT, 'GradientColor2',
              ( ['in'], POINTER(IAcadAcCmColor), 'pColor' )),
    COMMETHOD([dispid(21), 'propget'], HRESULT, 'GradientAngle',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'GradientAngle' )),
    COMMETHOD([dispid(21), 'propput'], HRESULT, 'GradientAngle',
              ( ['in'], ACAD_ANGLE, 'GradientAngle' )),
    COMMETHOD([dispid(22), 'propget'], HRESULT, 'GradientCentered',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'fCentered' )),
    COMMETHOD([dispid(22), 'propput'], HRESULT, 'GradientCentered',
              ( ['in'], VARIANT_BOOL, 'fCentered' )),
    COMMETHOD([dispid(23), 'propget'], HRESULT, 'GradientName',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(23), 'propput'], HRESULT, 'GradientName',
              ( ['in'], BSTR, 'bstrName' )),
    COMMETHOD([dispid(24), 'nonbrowsable', 'propget'], HRESULT, 'HatchObjectType',
              ( ['out', 'retval'], POINTER(AcHatchObjectType), 'hatchType' )),
    COMMETHOD([dispid(24), 'nonbrowsable', 'propput'], HRESULT, 'HatchObjectType',
              ( ['in'], AcHatchObjectType, 'hatchType' )),
    COMMETHOD([dispid(25), 'propget'], HRESULT, 'Area',
              ( ['out', 'retval'], POINTER(c_double), 'Area' )),
    COMMETHOD([dispid(26), 'propget'], HRESULT, 'Origin',
              ( ['out', 'retval'], POINTER(VARIANT), 'Origin' )),
    COMMETHOD([dispid(26), 'propput'], HRESULT, 'Origin',
              ( ['in'], VARIANT, 'Origin' )),
    COMMETHOD([dispid(27), 'propget'], HRESULT, 'BackgroundColor',
              ( ['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor' )),
    COMMETHOD([dispid(27), 'propput'], HRESULT, 'BackgroundColor',
              ( ['in'], POINTER(IAcadAcCmColor), 'pColor' )),
]
################################################################
## code template for IAcadHatch implementation
##class IAcadHatch_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Normal
##    def _set(self, Normal):
##        '-no docstring-'
##    Normal = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def NumberOfLoops(self):
##        '-no docstring-'
##        #return numLoops
##
##    @property
##    def PatternType(self):
##        '-no docstring-'
##        #return PatternType
##
##    @property
##    def PatternName(self):
##        '-no docstring-'
##        #return bstrName
##
##    def _get(self):
##        '-no docstring-'
##        #return PatternAngle
##    def _set(self, PatternAngle):
##        '-no docstring-'
##    PatternAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return PatternScale
##    def _set(self, PatternScale):
##        '-no docstring-'
##    PatternScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return PatternSpace
##    def _set(self, PatternSpace):
##        '-no docstring-'
##    PatternSpace = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return penWidth
##    def _set(self, penWidth):
##        '-no docstring-'
##    ISOPenWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bDouble
##    def _set(self, bDouble):
##        '-no docstring-'
##    PatternDouble = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Elevation
##    def _set(self, Elevation):
##        '-no docstring-'
##    Elevation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return fAssoc
##    def _set(self, fAssoc):
##        '-no docstring-'
##    AssociativeHatch = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return HatchStyle
##    def _set(self, HatchStyle):
##        '-no docstring-'
##    HatchStyle = property(_get, _set, doc = _set.__doc__)
##
##    def SetPattern(self, PatternType, PatternName):
##        '-no docstring-'
##        #return 
##
##    def AppendOuterLoop(self, ObjectArray):
##        '-no docstring-'
##        #return 
##
##    def AppendInnerLoop(self, ObjectArray):
##        '-no docstring-'
##        #return 
##
##    def InsertLoopAt(self, Index, LoopType, ObjectArray):
##        '-no docstring-'
##        #return 
##
##    def GetLoopAt(self, Index):
##        '-no docstring-'
##        #return ObjectArray
##
##    def Evaluate(self):
##        '-no docstring-'
##        #return 
##
##    def _get(self):
##        '-no docstring-'
##        #return pColor
##    def _set(self, pColor):
##        '-no docstring-'
##    GradientColor1 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pColor
##    def _set(self, pColor):
##        '-no docstring-'
##    GradientColor2 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return GradientAngle
##    def _set(self, GradientAngle):
##        '-no docstring-'
##    GradientAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return fCentered
##    def _set(self, fCentered):
##        '-no docstring-'
##    GradientCentered = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrName
##    def _set(self, bstrName):
##        '-no docstring-'
##    GradientName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return hatchType
##    def _set(self, hatchType):
##        '-no docstring-'
##    HatchObjectType = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Area(self):
##        '-no docstring-'
##        #return Area
##
##    def _get(self):
##        '-no docstring-'
##        #return Origin
##    def _set(self, Origin):
##        '-no docstring-'
##    Origin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pColor
##    def _set(self, pColor):
##        '-no docstring-'
##    BackgroundColor = property(_get, _set, doc = _set.__doc__)
##

IAcadHyperlinks._methods_ = [
    COMMETHOD([dispid(0)], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadHyperlink)), 'pItem' )),
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pVal' )),
    COMMETHOD([dispid(-4), 'restricted', 'hidden', 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'Application',
              ( ['out', 'retval'], POINTER(POINTER(IDispatch)), 'ApplicationObject' )),
    COMMETHOD([dispid(3)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], VARIANT, 'Description' ),
              ( ['in', 'optional'], VARIANT, 'NamedLocation' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadHyperlink)), 'pHyperlink' )),
]
################################################################
## code template for IAcadHyperlinks implementation
##class IAcadHyperlinks_Impl(object):
##    def Item(self, Index):
##        '-no docstring-'
##        #return pItem
##
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return pVal
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return pVal
##
##    @property
##    def Application(self):
##        '-no docstring-'
##        #return ApplicationObject
##
##    def Add(self, Name, Description, NamedLocation):
##        '-no docstring-'
##        #return pHyperlink
##

class IAcadDimension(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{43229AF6-CBC8-46E4-87B4-B6FF84F723B1}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadDim3PointAngular(IAcadDimension):
    _case_insensitive_ = True
    _iid_ = GUID('{24028235-F19A-4B59-9AA5-12B16031408A}')
    _idlflags_ = ['dual', 'oleautomation']

# values for enumeration 'AcDimPrecision'
acDimPrecisionZero = 0
acDimPrecisionOne = 1
acDimPrecisionTwo = 2
acDimPrecisionThree = 3
acDimPrecisionFour = 4
acDimPrecisionFive = 5
acDimPrecisionSix = 6
acDimPrecisionSeven = 7
acDimPrecisionEight = 8
AcDimPrecision = c_int # enum

# values for enumeration 'AcDimTextMovement'
acDimLineWithText = 0
acMoveTextAddLeader = 1
acMoveTextNoLeader = 2
AcDimTextMovement = c_int # enum

# values for enumeration 'AcDimToleranceMethod'
acTolNone = 0
acTolSymmetrical = 1
acTolDeviation = 2
acTolLimits = 3
acTolBasic = 4
AcDimToleranceMethod = c_int # enum

# values for enumeration 'AcDimToleranceJustify'
acTolBottom = 0
acTolMiddle = 1
acTolTop = 2
AcDimToleranceJustify = c_int # enum
IAcadDimension._methods_ = [
    COMMETHOD([dispid(1537), 'nonbrowsable', 'propget'], HRESULT, 'Normal',
              ( ['out', 'retval'], POINTER(VARIANT), 'Normal' )),
    COMMETHOD([dispid(1537), 'nonbrowsable', 'propput'], HRESULT, 'Normal',
              ( ['in'], VARIANT, 'Normal' )),
    COMMETHOD([dispid(1538), 'nonbrowsable', 'propget'], HRESULT, 'Rotation',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'rotAngle' )),
    COMMETHOD([dispid(1538), 'nonbrowsable', 'propput'], HRESULT, 'Rotation',
              ( ['in'], ACAD_ANGLE, 'rotAngle' )),
    COMMETHOD([dispid(1539), 'propget'], HRESULT, 'TextPosition',
              ( ['out', 'retval'], POINTER(VARIANT), 'textPos' )),
    COMMETHOD([dispid(1539), 'propput'], HRESULT, 'TextPosition',
              ( ['in'], VARIANT, 'textPos' )),
    COMMETHOD([dispid(1540), 'propget'], HRESULT, 'TextRotation',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'rotAngle' )),
    COMMETHOD([dispid(1540), 'propput'], HRESULT, 'TextRotation',
              ( ['in'], ACAD_ANGLE, 'rotAngle' )),
    COMMETHOD([dispid(1541), 'propget'], HRESULT, 'TextOverride',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrText' )),
    COMMETHOD([dispid(1541), 'propput'], HRESULT, 'TextOverride',
              ( ['in'], BSTR, 'bstrText' )),
    COMMETHOD([dispid(1542), 'propget'], HRESULT, 'StyleName',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(1542), 'propput'], HRESULT, 'StyleName',
              ( ['in'], BSTR, 'bstrName' )),
    COMMETHOD([dispid(1546), 'propget'], HRESULT, 'TextColor',
              ( ['out', 'retval'], POINTER(ACAD_COLOR), 'color' )),
    COMMETHOD([dispid(1546), 'propput'], HRESULT, 'TextColor',
              ( ['in'], ACAD_COLOR, 'color' )),
    COMMETHOD([dispid(1548), 'propget'], HRESULT, 'DecimalSeparator',
              ( ['out', 'retval'], POINTER(BSTR), 'character' )),
    COMMETHOD([dispid(1548), 'propput'], HRESULT, 'DecimalSeparator',
              ( ['in'], BSTR, 'character' )),
    COMMETHOD([dispid(1549), 'propget'], HRESULT, 'TextGap',
              ( ['out', 'retval'], POINTER(c_double), 'Offset' )),
    COMMETHOD([dispid(1549), 'propput'], HRESULT, 'TextGap',
              ( ['in'], c_double, 'Offset' )),
    COMMETHOD([dispid(1551), 'propget'], HRESULT, 'TextPrefix',
              ( ['out', 'retval'], POINTER(BSTR), 'prefix' )),
    COMMETHOD([dispid(1551), 'propput'], HRESULT, 'TextPrefix',
              ( ['in'], BSTR, 'prefix' )),
    COMMETHOD([dispid(1552), 'propget'], HRESULT, 'TextSuffix',
              ( ['out', 'retval'], POINTER(BSTR), 'suffix' )),
    COMMETHOD([dispid(1552), 'propput'], HRESULT, 'TextSuffix',
              ( ['in'], BSTR, 'suffix' )),
    COMMETHOD([dispid(1553), 'propget'], HRESULT, 'ScaleFactor',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'factor' )),
    COMMETHOD([dispid(1553), 'propput'], HRESULT, 'ScaleFactor',
              ( ['in'], ACAD_NOUNITS, 'factor' )),
    COMMETHOD([dispid(1554), 'propget'], HRESULT, 'VerticalTextPosition',
              ( ['out', 'retval'], POINTER(AcDimVerticalJustification), 'Type' )),
    COMMETHOD([dispid(1554), 'propput'], HRESULT, 'VerticalTextPosition',
              ( ['in'], AcDimVerticalJustification, 'Type' )),
    COMMETHOD([dispid(1555), 'propget'], HRESULT, 'TolerancePrecision',
              ( ['out', 'retval'], POINTER(AcDimPrecision), 'precision' )),
    COMMETHOD([dispid(1555), 'propput'], HRESULT, 'TolerancePrecision',
              ( ['in'], AcDimPrecision, 'precision' )),
    COMMETHOD([dispid(1556), 'propget'], HRESULT, 'ToleranceHeightScale',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'scale' )),
    COMMETHOD([dispid(1556), 'propput'], HRESULT, 'ToleranceHeightScale',
              ( ['in'], ACAD_NOUNITS, 'scale' )),
    COMMETHOD([dispid(1557), 'propget'], HRESULT, 'ToleranceLowerLimit',
              ( ['out', 'retval'], POINTER(c_double), 'lower' )),
    COMMETHOD([dispid(1557), 'propput'], HRESULT, 'ToleranceLowerLimit',
              ( ['in'], c_double, 'lower' )),
    COMMETHOD([dispid(1558), 'propget'], HRESULT, 'TextMovement',
              ( ['out', 'retval'], POINTER(AcDimTextMovement), 'Move' )),
    COMMETHOD([dispid(1558), 'propput'], HRESULT, 'TextMovement',
              ( ['in'], AcDimTextMovement, 'Move' )),
    COMMETHOD([dispid(1559), 'propget'], HRESULT, 'ToleranceDisplay',
              ( ['out', 'retval'], POINTER(AcDimToleranceMethod), 'method' )),
    COMMETHOD([dispid(1559), 'propput'], HRESULT, 'ToleranceDisplay',
              ( ['in'], AcDimToleranceMethod, 'method' )),
    COMMETHOD([dispid(1560), 'propget'], HRESULT, 'ToleranceJustification',
              ( ['out', 'retval'], POINTER(AcDimToleranceJustify), 'method' )),
    COMMETHOD([dispid(1560), 'propput'], HRESULT, 'ToleranceJustification',
              ( ['in'], AcDimToleranceJustify, 'method' )),
    COMMETHOD([dispid(1561), 'propget'], HRESULT, 'ToleranceUpperLimit',
              ( ['out', 'retval'], POINTER(c_double), 'upper' )),
    COMMETHOD([dispid(1561), 'propput'], HRESULT, 'ToleranceUpperLimit',
              ( ['in'], c_double, 'upper' )),
    COMMETHOD([dispid(1562), 'propget'], HRESULT, 'TextStyle',
              ( ['out', 'retval'], POINTER(BSTR), 'style' )),
    COMMETHOD([dispid(1562), 'propput'], HRESULT, 'TextStyle',
              ( ['in'], BSTR, 'style' )),
    COMMETHOD([dispid(1563), 'propget'], HRESULT, 'TextHeight',
              ( ['out', 'retval'], POINTER(c_double), 'Height' )),
    COMMETHOD([dispid(1563), 'propput'], HRESULT, 'TextHeight',
              ( ['in'], c_double, 'Height' )),
    COMMETHOD([dispid(1565), 'propget'], HRESULT, 'SuppressLeadingZeros',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(1565), 'propput'], HRESULT, 'SuppressLeadingZeros',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(1566), 'propget'], HRESULT, 'SuppressTrailingZeros',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(1566), 'propput'], HRESULT, 'SuppressTrailingZeros',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(1569), 'propget'], HRESULT, 'ToleranceSuppressLeadingZeros',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(1569), 'propput'], HRESULT, 'ToleranceSuppressLeadingZeros',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(1570), 'propget'], HRESULT, 'ToleranceSuppressTrailingZeros',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(1570), 'propput'], HRESULT, 'ToleranceSuppressTrailingZeros',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(1571), 'propget'], HRESULT, 'TextFill',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(1571), 'propput'], HRESULT, 'TextFill',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(1572), 'propget'], HRESULT, 'TextFillColor',
              ( ['out', 'retval'], POINTER(ACAD_COLOR), 'color' )),
    COMMETHOD([dispid(1572), 'propput'], HRESULT, 'TextFillColor',
              ( ['in'], ACAD_COLOR, 'color' )),
    COMMETHOD([dispid(1573), 'propget'], HRESULT, 'DimTxtDirection',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(1573), 'propput'], HRESULT, 'DimTxtDirection',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
]
################################################################
## code template for IAcadDimension implementation
##class IAcadDimension_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Normal
##    def _set(self, Normal):
##        '-no docstring-'
##    Normal = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return rotAngle
##    def _set(self, rotAngle):
##        '-no docstring-'
##    Rotation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return textPos
##    def _set(self, textPos):
##        '-no docstring-'
##    TextPosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return rotAngle
##    def _set(self, rotAngle):
##        '-no docstring-'
##    TextRotation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrText
##    def _set(self, bstrText):
##        '-no docstring-'
##    TextOverride = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrName
##    def _set(self, bstrName):
##        '-no docstring-'
##    StyleName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return color
##    def _set(self, color):
##        '-no docstring-'
##    TextColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return character
##    def _set(self, character):
##        '-no docstring-'
##    DecimalSeparator = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Offset
##    def _set(self, Offset):
##        '-no docstring-'
##    TextGap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return prefix
##    def _set(self, prefix):
##        '-no docstring-'
##    TextPrefix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return suffix
##    def _set(self, suffix):
##        '-no docstring-'
##    TextSuffix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return factor
##    def _set(self, factor):
##        '-no docstring-'
##    ScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    VerticalTextPosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return precision
##    def _set(self, precision):
##        '-no docstring-'
##    TolerancePrecision = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return scale
##    def _set(self, scale):
##        '-no docstring-'
##    ToleranceHeightScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return lower
##    def _set(self, lower):
##        '-no docstring-'
##    ToleranceLowerLimit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Move
##    def _set(self, Move):
##        '-no docstring-'
##    TextMovement = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return method
##    def _set(self, method):
##        '-no docstring-'
##    ToleranceDisplay = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return method
##    def _set(self, method):
##        '-no docstring-'
##    ToleranceJustification = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return upper
##    def _set(self, upper):
##        '-no docstring-'
##    ToleranceUpperLimit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return style
##    def _set(self, style):
##        '-no docstring-'
##    TextStyle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Height
##    def _set(self, Height):
##        '-no docstring-'
##    TextHeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    SuppressLeadingZeros = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    SuppressTrailingZeros = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    ToleranceSuppressLeadingZeros = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    ToleranceSuppressTrailingZeros = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    TextFill = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return color
##    def _set(self, color):
##        '-no docstring-'
##    TextFillColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    DimTxtDirection = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'AcAngleUnits'
acDegrees = 0
acDegreeMinuteSeconds = 1
acGrads = 2
acRadians = 3
AcAngleUnits = c_int # enum

# values for enumeration 'AcDimFit'
acTextAndArrows = 0
acArrowsOnly = 1
acTextOnly = 2
acBestFit = 3
AcDimFit = c_int # enum

# values for enumeration 'AcDimHorizontalJustification'
acHorzCentered = 0
acFirstExtensionLine = 1
acSecondExtensionLine = 2
acOverFirstExtension = 3
acOverSecondExtension = 4
AcDimHorizontalJustification = c_int # enum
IAcadDim3PointAngular._methods_ = [
    COMMETHOD([dispid(38), 'nonbrowsable', 'propget'], HRESULT, 'ExtLine1EndPoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'xLine1Point' )),
    COMMETHOD([dispid(38), 'nonbrowsable', 'propput'], HRESULT, 'ExtLine1EndPoint',
              ( ['in'], VARIANT, 'xLine1Point' )),
    COMMETHOD([dispid(40), 'nonbrowsable', 'propget'], HRESULT, 'ExtLine2EndPoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'xLine2Point' )),
    COMMETHOD([dispid(40), 'nonbrowsable', 'propput'], HRESULT, 'ExtLine2EndPoint',
              ( ['in'], VARIANT, 'xLine2Point' )),
    COMMETHOD([dispid(45), 'nonbrowsable', 'propget'], HRESULT, 'AngleVertex',
              ( ['out', 'retval'], POINTER(VARIANT), 'AngleVertex' )),
    COMMETHOD([dispid(45), 'nonbrowsable', 'propput'], HRESULT, 'AngleVertex',
              ( ['in'], VARIANT, 'AngleVertex' )),
    COMMETHOD([dispid(36), 'propget'], HRESULT, 'TextPrecision',
              ( ['out', 'retval'], POINTER(AcDimPrecision), 'AngleVertex' )),
    COMMETHOD([dispid(36), 'propput'], HRESULT, 'TextPrecision',
              ( ['in'], AcDimPrecision, 'AngleVertex' )),
    COMMETHOD([dispid(41), 'propget'], HRESULT, 'AngleFormat',
              ( ['out', 'retval'], POINTER(AcAngleUnits), 'format' )),
    COMMETHOD([dispid(41), 'propput'], HRESULT, 'AngleFormat',
              ( ['in'], AcAngleUnits, 'format' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'DimensionLineColor',
              ( ['out', 'retval'], POINTER(ACAD_COLOR), 'Type' )),
    COMMETHOD([dispid(13), 'propput'], HRESULT, 'DimensionLineColor',
              ( ['in'], ACAD_COLOR, 'Type' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'ExtensionLineColor',
              ( ['out', 'retval'], POINTER(ACAD_COLOR), 'Type' )),
    COMMETHOD([dispid(14), 'propput'], HRESULT, 'ExtensionLineColor',
              ( ['in'], ACAD_COLOR, 'Type' )),
    COMMETHOD([dispid(17), 'propget'], HRESULT, 'ExtensionLineExtend',
              ( ['out', 'retval'], POINTER(c_double), 'extend' )),
    COMMETHOD([dispid(17), 'propput'], HRESULT, 'ExtensionLineExtend',
              ( ['in'], c_double, 'extend' )),
    COMMETHOD([dispid(18), 'propget'], HRESULT, 'Fit',
              ( ['out', 'retval'], POINTER(AcDimFit), 'fittype' )),
    COMMETHOD([dispid(18), 'propput'], HRESULT, 'Fit',
              ( ['in'], AcDimFit, 'fittype' )),
    COMMETHOD([dispid(20), 'propget'], HRESULT, 'HorizontalTextPosition',
              ( ['out', 'retval'], POINTER(AcDimHorizontalJustification), 'Type' )),
    COMMETHOD([dispid(20), 'propput'], HRESULT, 'HorizontalTextPosition',
              ( ['in'], AcDimHorizontalJustification, 'Type' )),
    COMMETHOD([dispid(23), 'propget'], HRESULT, 'ExtensionLineWeight',
              ( ['out', 'retval'], POINTER(ACAD_LWEIGHT), 'lweight' )),
    COMMETHOD([dispid(23), 'propput'], HRESULT, 'ExtensionLineWeight',
              ( ['in'], ACAD_LWEIGHT, 'lweight' )),
    COMMETHOD([dispid(25), 'propget'], HRESULT, 'DimLine1Suppress',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress' )),
    COMMETHOD([dispid(25), 'propput'], HRESULT, 'DimLine1Suppress',
              ( ['in'], VARIANT_BOOL, 'bSuppress' )),
    COMMETHOD([dispid(26), 'propget'], HRESULT, 'DimLine2Suppress',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress' )),
    COMMETHOD([dispid(26), 'propput'], HRESULT, 'DimLine2Suppress',
              ( ['in'], VARIANT_BOOL, 'bSuppress' )),
    COMMETHOD([dispid(27), 'propget'], HRESULT, 'ExtLine1Suppress',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress' )),
    COMMETHOD([dispid(27), 'propput'], HRESULT, 'ExtLine1Suppress',
              ( ['in'], VARIANT_BOOL, 'bSuppress' )),
    COMMETHOD([dispid(28), 'propget'], HRESULT, 'ExtLine2Suppress',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress' )),
    COMMETHOD([dispid(28), 'propput'], HRESULT, 'ExtLine2Suppress',
              ( ['in'], VARIANT_BOOL, 'bSuppress' )),
    COMMETHOD([dispid(29), 'propget'], HRESULT, 'DimLineInside',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(29), 'propput'], HRESULT, 'DimLineInside',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(30), 'propget'], HRESULT, 'TextInsideAlign',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(30), 'propput'], HRESULT, 'TextInsideAlign',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(31), 'propget'], HRESULT, 'TextInside',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(31), 'propput'], HRESULT, 'TextInside',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(32), 'propget'], HRESULT, 'ForceLineInside',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(32), 'propput'], HRESULT, 'ForceLineInside',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(33), 'propget'], HRESULT, 'TextOutsideAlign',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(33), 'propput'], HRESULT, 'TextOutsideAlign',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(35), 'propget'], HRESULT, 'ExtensionLineOffset',
              ( ['out', 'retval'], POINTER(c_double), 'Offset' )),
    COMMETHOD([dispid(35), 'propput'], HRESULT, 'ExtensionLineOffset',
              ( ['in'], c_double, 'Offset' )),
    COMMETHOD([dispid(60), 'propget'], HRESULT, 'DimensionLineWeight',
              ( ['out', 'retval'], POINTER(ACAD_LWEIGHT), 'weight' )),
    COMMETHOD([dispid(60), 'propput'], HRESULT, 'DimensionLineWeight',
              ( ['in'], ACAD_LWEIGHT, 'weight' )),
    COMMETHOD([dispid(61), 'propget'], HRESULT, 'ArrowheadSize',
              ( ['out', 'retval'], POINTER(c_double), 'size' )),
    COMMETHOD([dispid(61), 'propput'], HRESULT, 'ArrowheadSize',
              ( ['in'], c_double, 'size' )),
    COMMETHOD([dispid(62), 'propget'], HRESULT, 'Arrowhead1Type',
              ( ['out', 'retval'], POINTER(AcDimArrowheadType), 'Type' )),
    COMMETHOD([dispid(62), 'propput'], HRESULT, 'Arrowhead1Type',
              ( ['in'], AcDimArrowheadType, 'Type' )),
    COMMETHOD([dispid(63), 'propget'], HRESULT, 'Arrowhead2Type',
              ( ['out', 'retval'], POINTER(AcDimArrowheadType), 'Type' )),
    COMMETHOD([dispid(63), 'propput'], HRESULT, 'Arrowhead2Type',
              ( ['in'], AcDimArrowheadType, 'Type' )),
    COMMETHOD([dispid(64), 'propget'], HRESULT, 'Measurement',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'bVal' )),
    COMMETHOD([dispid(65), 'nonbrowsable', 'propget'], HRESULT, 'Arrowhead1Block',
              ( ['out', 'retval'], POINTER(BSTR), 'BlockName' )),
    COMMETHOD([dispid(65), 'nonbrowsable', 'propput'], HRESULT, 'Arrowhead1Block',
              ( ['in'], BSTR, 'BlockName' )),
    COMMETHOD([dispid(66), 'nonbrowsable', 'propget'], HRESULT, 'Arrowhead2Block',
              ( ['out', 'retval'], POINTER(BSTR), 'BlockName' )),
    COMMETHOD([dispid(66), 'nonbrowsable', 'propput'], HRESULT, 'Arrowhead2Block',
              ( ['in'], BSTR, 'BlockName' )),
    COMMETHOD([dispid(80), 'propget'], HRESULT, 'DimensionLinetype',
              ( ['out', 'retval'], POINTER(BSTR), 'Linetype' )),
    COMMETHOD([dispid(80), 'propput'], HRESULT, 'DimensionLinetype',
              ( ['in'], BSTR, 'Linetype' )),
    COMMETHOD([dispid(81), 'propget'], HRESULT, 'ExtLine1Linetype',
              ( ['out', 'retval'], POINTER(BSTR), 'Linetype' )),
    COMMETHOD([dispid(81), 'propput'], HRESULT, 'ExtLine1Linetype',
              ( ['in'], BSTR, 'Linetype' )),
    COMMETHOD([dispid(82), 'propget'], HRESULT, 'ExtLine2Linetype',
              ( ['out', 'retval'], POINTER(BSTR), 'Linetype' )),
    COMMETHOD([dispid(82), 'propput'], HRESULT, 'ExtLine2Linetype',
              ( ['in'], BSTR, 'Linetype' )),
    COMMETHOD([dispid(83), 'propget'], HRESULT, 'ExtLineFixedLenSuppress',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bFixedLen' )),
    COMMETHOD([dispid(83), 'propput'], HRESULT, 'ExtLineFixedLenSuppress',
              ( ['in'], VARIANT_BOOL, 'bFixedLen' )),
    COMMETHOD([dispid(84), 'propget'], HRESULT, 'ExtLineFixedLen',
              ( ['out', 'retval'], POINTER(c_double), 'FixedLen' )),
    COMMETHOD([dispid(84), 'propput'], HRESULT, 'ExtLineFixedLen',
              ( ['in'], c_double, 'FixedLen' )),
    COMMETHOD([dispid(85), 'propget'], HRESULT, 'DimConstrForm',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bIsDynamic' )),
    COMMETHOD([dispid(85), 'propput'], HRESULT, 'DimConstrForm',
              ( ['in'], VARIANT_BOOL, 'bIsDynamic' )),
    COMMETHOD([dispid(86), 'propget'], HRESULT, 'DimConstrReference',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bIsReference' )),
    COMMETHOD([dispid(86), 'propput'], HRESULT, 'DimConstrReference',
              ( ['in'], VARIANT_BOOL, 'bIsReference' )),
    COMMETHOD([dispid(87), 'propget'], HRESULT, 'DimConstrName',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(87), 'propput'], HRESULT, 'DimConstrName',
              ( ['in'], BSTR, 'bstrName' )),
    COMMETHOD([dispid(88), 'propget'], HRESULT, 'DimConstrExpression',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrExpression' )),
    COMMETHOD([dispid(88), 'propput'], HRESULT, 'DimConstrExpression',
              ( ['in'], BSTR, 'bstrExpression' )),
    COMMETHOD([dispid(89), 'propget'], HRESULT, 'DimConstrValue',
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(89), 'propput'], HRESULT, 'DimConstrValue',
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(90), 'propget'], HRESULT, 'DimConstrDesc',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrDescription' )),
    COMMETHOD([dispid(90), 'propput'], HRESULT, 'DimConstrDesc',
              ( ['in'], BSTR, 'bstrDescription' )),
]
################################################################
## code template for IAcadDim3PointAngular implementation
##class IAcadDim3PointAngular_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return xLine1Point
##    def _set(self, xLine1Point):
##        '-no docstring-'
##    ExtLine1EndPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return xLine2Point
##    def _set(self, xLine2Point):
##        '-no docstring-'
##    ExtLine2EndPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return AngleVertex
##    def _set(self, AngleVertex):
##        '-no docstring-'
##    AngleVertex = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return AngleVertex
##    def _set(self, AngleVertex):
##        '-no docstring-'
##    TextPrecision = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return format
##    def _set(self, format):
##        '-no docstring-'
##    AngleFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    DimensionLineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    ExtensionLineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return extend
##    def _set(self, extend):
##        '-no docstring-'
##    ExtensionLineExtend = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return fittype
##    def _set(self, fittype):
##        '-no docstring-'
##    Fit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    HorizontalTextPosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return lweight
##    def _set(self, lweight):
##        '-no docstring-'
##    ExtensionLineWeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bSuppress
##    def _set(self, bSuppress):
##        '-no docstring-'
##    DimLine1Suppress = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bSuppress
##    def _set(self, bSuppress):
##        '-no docstring-'
##    DimLine2Suppress = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bSuppress
##    def _set(self, bSuppress):
##        '-no docstring-'
##    ExtLine1Suppress = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bSuppress
##    def _set(self, bSuppress):
##        '-no docstring-'
##    ExtLine2Suppress = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    DimLineInside = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    TextInsideAlign = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    TextInside = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    ForceLineInside = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    TextOutsideAlign = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Offset
##    def _set(self, Offset):
##        '-no docstring-'
##    ExtensionLineOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return weight
##    def _set(self, weight):
##        '-no docstring-'
##    DimensionLineWeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return size
##    def _set(self, size):
##        '-no docstring-'
##    ArrowheadSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    Arrowhead1Type = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    Arrowhead2Type = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Measurement(self):
##        '-no docstring-'
##        #return bVal
##
##    def _get(self):
##        '-no docstring-'
##        #return BlockName
##    def _set(self, BlockName):
##        '-no docstring-'
##    Arrowhead1Block = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return BlockName
##    def _set(self, BlockName):
##        '-no docstring-'
##    Arrowhead2Block = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Linetype
##    def _set(self, Linetype):
##        '-no docstring-'
##    DimensionLinetype = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Linetype
##    def _set(self, Linetype):
##        '-no docstring-'
##    ExtLine1Linetype = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Linetype
##    def _set(self, Linetype):
##        '-no docstring-'
##    ExtLine2Linetype = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bFixedLen
##    def _set(self, bFixedLen):
##        '-no docstring-'
##    ExtLineFixedLenSuppress = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return FixedLen
##    def _set(self, FixedLen):
##        '-no docstring-'
##    ExtLineFixedLen = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bIsDynamic
##    def _set(self, bIsDynamic):
##        '-no docstring-'
##    DimConstrForm = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bIsReference
##    def _set(self, bIsReference):
##        '-no docstring-'
##    DimConstrReference = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrName
##    def _set(self, bstrName):
##        '-no docstring-'
##    DimConstrName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrExpression
##    def _set(self, bstrExpression):
##        '-no docstring-'
##    DimConstrExpression = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    DimConstrValue = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrDescription
##    def _set(self, bstrDescription):
##        '-no docstring-'
##    DimConstrDesc = property(_get, _set, doc = _set.__doc__)
##

class IAcadMLine(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{4BD74318-796F-45A4-B385-8B978FFA69D4}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadMLine._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'StyleName',
              ( ['out', 'retval'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(2), 'nonbrowsable', 'propget'], HRESULT, 'Coordinates',
              ( ['out', 'retval'], POINTER(VARIANT), 'Vertices' )),
    COMMETHOD([dispid(2), 'nonbrowsable', 'propput'], HRESULT, 'Coordinates',
              ( ['in'], VARIANT, 'Vertices' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'Justification',
              ( ['out', 'retval'], POINTER(AcMLineJustification), 'Justification' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'Justification',
              ( ['in'], AcMLineJustification, 'Justification' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'MLineScale',
              ( ['out', 'retval'], POINTER(c_double), 'scale' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'MLineScale',
              ( ['in'], c_double, 'scale' )),
]
################################################################
## code template for IAcadMLine implementation
##class IAcadMLine_Impl(object):
##    @property
##    def StyleName(self):
##        '-no docstring-'
##        #return Name
##
##    def _get(self):
##        '-no docstring-'
##        #return Vertices
##    def _set(self, Vertices):
##        '-no docstring-'
##    Coordinates = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Justification
##    def _set(self, Justification):
##        '-no docstring-'
##    Justification = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return scale
##    def _set(self, scale):
##        '-no docstring-'
##    MLineScale = property(_get, _set, doc = _set.__doc__)
##

class IAcadBlockReference(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{D297777C-D33D-460B-B63C-D4F2D38A2650}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadBlockReference._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'InsertionPoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'insPoint' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'InsertionPoint',
              ( ['in'], VARIANT, 'insPoint' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'Name',
              ( ['in'], BSTR, 'bstrName' )),
    COMMETHOD([dispid(3), 'nonbrowsable', 'propget'], HRESULT, 'Normal',
              ( ['out', 'retval'], POINTER(VARIANT), 'Normal' )),
    COMMETHOD([dispid(3), 'nonbrowsable', 'propput'], HRESULT, 'Normal',
              ( ['in'], VARIANT, 'Normal' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'Rotation',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'rotAngle' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'Rotation',
              ( ['in'], ACAD_ANGLE, 'rotAngle' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'XScaleFactor',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'ScaleFactor' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'XScaleFactor',
              ( ['in'], ACAD_NOUNITS, 'ScaleFactor' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'YScaleFactor',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'ScaleFactor' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'YScaleFactor',
              ( ['in'], ACAD_NOUNITS, 'ScaleFactor' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'ZScaleFactor',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'ScaleFactor' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'ZScaleFactor',
              ( ['in'], ACAD_NOUNITS, 'ScaleFactor' )),
    COMMETHOD([dispid(8)], HRESULT, 'Explode',
              ( ['out', 'retval'], POINTER(VARIANT), 'pArrayObjs' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetAttributes',
              ( ['out', 'retval'], POINTER(VARIANT), 'pAttrObjs' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetConstantAttributes',
              ( ['out', 'retval'], POINTER(VARIANT), 'pAttrObjs' )),
    COMMETHOD([dispid(11), 'nonbrowsable', 'propget'], HRESULT, 'HasAttributes',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bHas' )),
    COMMETHOD([dispid(512), 'propget'], HRESULT, 'EffectiveName',
              ( ['out', 'retval'], POINTER(BSTR), 'EffectiveName' )),
    COMMETHOD([dispid(513), 'nonbrowsable', 'propget'], HRESULT, 'IsDynamicBlock',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pDynamicBlock' )),
    COMMETHOD([dispid(514)], HRESULT, 'GetDynamicBlockProperties',
              ( ['out', 'retval'], POINTER(VARIANT), 'dynamicPropertyArray' )),
    COMMETHOD([dispid(515)], HRESULT, 'ResetBlock'),
    COMMETHOD([dispid(516)], HRESULT, 'ConvertToAnonymousBlock'),
    COMMETHOD([dispid(517)], HRESULT, 'ConvertToStaticBlock',
              ( ['in'], BSTR, 'newBlockName' )),
    COMMETHOD([dispid(518), 'propget'], HRESULT, 'XEffectiveScaleFactor',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'ScaleFactor' )),
    COMMETHOD([dispid(518), 'propput'], HRESULT, 'XEffectiveScaleFactor',
              ( ['in'], ACAD_NOUNITS, 'ScaleFactor' )),
    COMMETHOD([dispid(519), 'propget'], HRESULT, 'YEffectiveScaleFactor',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'ScaleFactor' )),
    COMMETHOD([dispid(519), 'propput'], HRESULT, 'YEffectiveScaleFactor',
              ( ['in'], ACAD_NOUNITS, 'ScaleFactor' )),
    COMMETHOD([dispid(520), 'propget'], HRESULT, 'ZEffectiveScaleFactor',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'ScaleFactor' )),
    COMMETHOD([dispid(520), 'propput'], HRESULT, 'ZEffectiveScaleFactor',
              ( ['in'], ACAD_NOUNITS, 'ScaleFactor' )),
    COMMETHOD([dispid(521), 'propget'], HRESULT, 'InsUnits',
              ( ['out', 'retval'], POINTER(BSTR), 'Units' )),
    COMMETHOD([dispid(528), 'propget'], HRESULT, 'InsUnitsFactor',
              ( ['out', 'retval'], POINTER(c_double), 'factor' )),
]
################################################################
## code template for IAcadBlockReference implementation
##class IAcadBlockReference_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return insPoint
##    def _set(self, insPoint):
##        '-no docstring-'
##    InsertionPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrName
##    def _set(self, bstrName):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Normal
##    def _set(self, Normal):
##        '-no docstring-'
##    Normal = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return rotAngle
##    def _set(self, rotAngle):
##        '-no docstring-'
##    Rotation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return ScaleFactor
##    def _set(self, ScaleFactor):
##        '-no docstring-'
##    XScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return ScaleFactor
##    def _set(self, ScaleFactor):
##        '-no docstring-'
##    YScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return ScaleFactor
##    def _set(self, ScaleFactor):
##        '-no docstring-'
##    ZScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def Explode(self):
##        '-no docstring-'
##        #return pArrayObjs
##
##    def GetAttributes(self):
##        '-no docstring-'
##        #return pAttrObjs
##
##    def GetConstantAttributes(self):
##        '-no docstring-'
##        #return pAttrObjs
##
##    @property
##    def HasAttributes(self):
##        '-no docstring-'
##        #return bHas
##
##    @property
##    def EffectiveName(self):
##        '-no docstring-'
##        #return EffectiveName
##
##    @property
##    def IsDynamicBlock(self):
##        '-no docstring-'
##        #return pDynamicBlock
##
##    def GetDynamicBlockProperties(self):
##        '-no docstring-'
##        #return dynamicPropertyArray
##
##    def ResetBlock(self):
##        '-no docstring-'
##        #return 
##
##    def ConvertToAnonymousBlock(self):
##        '-no docstring-'
##        #return 
##
##    def ConvertToStaticBlock(self, newBlockName):
##        '-no docstring-'
##        #return 
##
##    def _get(self):
##        '-no docstring-'
##        #return ScaleFactor
##    def _set(self, ScaleFactor):
##        '-no docstring-'
##    XEffectiveScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return ScaleFactor
##    def _set(self, ScaleFactor):
##        '-no docstring-'
##    YEffectiveScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return ScaleFactor
##    def _set(self, ScaleFactor):
##        '-no docstring-'
##    ZEffectiveScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def InsUnits(self):
##        '-no docstring-'
##        #return Units
##
##    @property
##    def InsUnitsFactor(self):
##        '-no docstring-'
##        #return factor
##

IAcadHyperlink._methods_ = [
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'URL',
              ( ['in'], BSTR, 'URLPath' )),
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'URL',
              ( ['out', 'retval'], POINTER(BSTR), 'URLPath' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'URLDescription',
              ( ['in'], BSTR, 'Description' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'URLDescription',
              ( ['out', 'retval'], POINTER(BSTR), 'Description' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'Application',
              ( ['out', 'retval'], POINTER(POINTER(IDispatch)), 'ApplicationObject' )),
    COMMETHOD([dispid(4)], HRESULT, 'Delete'),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'URLNamedLocation',
              ( ['in'], BSTR, 'Location' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'URLNamedLocation',
              ( ['out', 'retval'], POINTER(BSTR), 'Location' )),
]
################################################################
## code template for IAcadHyperlink implementation
##class IAcadHyperlink_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return URLPath
##    def _set(self, URLPath):
##        '-no docstring-'
##    URL = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Description
##    def _set(self, Description):
##        '-no docstring-'
##    URLDescription = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Application(self):
##        '-no docstring-'
##        #return ApplicationObject
##
##    def Delete(self):
##        '-no docstring-'
##        #return 
##
##    def _get(self):
##        '-no docstring-'
##        #return Location
##    def _set(self, Location):
##        '-no docstring-'
##    URLNamedLocation = property(_get, _set, doc = _set.__doc__)
##

class IAcadRay(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{BA456038-F25C-4A44-B4A1-C8AE9259F5E3}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadRay._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'BasePoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'BasePoint' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'BasePoint',
              ( ['in'], VARIANT, 'BasePoint' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'SecondPoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'SecondPoint' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'SecondPoint',
              ( ['in'], VARIANT, 'SecondPoint' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'DirectionVector',
              ( ['out', 'retval'], POINTER(VARIANT), 'dirVector' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'DirectionVector',
              ( ['in'], VARIANT, 'dirVector' )),
]
################################################################
## code template for IAcadRay implementation
##class IAcadRay_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return BasePoint
##    def _set(self, BasePoint):
##        '-no docstring-'
##    BasePoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return SecondPoint
##    def _set(self, SecondPoint):
##        '-no docstring-'
##    SecondPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return dirVector
##    def _set(self, dirVector):
##        '-no docstring-'
##    DirectionVector = property(_get, _set, doc = _set.__doc__)
##

class IAcadExternalReference(IAcadBlockReference):
    _case_insensitive_ = True
    _iid_ = GUID('{13C7A50E-BBEF-4492-B1F7-F376ED5150D7}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadExternalReference._methods_ = [
    COMMETHOD([dispid(256), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(256), 'propput'], HRESULT, 'Path',
              ( ['in'], BSTR, 'bstrName' )),
    COMMETHOD([dispid(368), 'propget'], HRESULT, 'LayerPropertyOverrides',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bOverrides' )),
]
################################################################
## code template for IAcadExternalReference implementation
##class IAcadExternalReference_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return bstrName
##    def _set(self, bstrName):
##        '-no docstring-'
##    Path = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LayerPropertyOverrides(self):
##        '-no docstring-'
##        #return bOverrides
##

class IAcadPolyline(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{0EAD35D5-3101-4833-B53C-BF75F209F947}')
    _idlflags_ = ['dual', 'oleautomation']

# values for enumeration 'AcPolylineType'
acSimplePoly = 0
acFitCurvePoly = 1
acQuadSplinePoly = 2
acCubicSplinePoly = 3
AcPolylineType = c_int # enum
IAcadPolyline._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Coordinates',
              ( ['out', 'retval'], POINTER(VARIANT), 'Coordinates' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'Coordinates',
              ( ['in'], VARIANT, 'Coordinates' )),
    COMMETHOD([dispid(2), 'nonbrowsable', 'propget'], HRESULT, 'Normal',
              ( ['out', 'retval'], POINTER(VARIANT), 'Normal' )),
    COMMETHOD([dispid(2), 'nonbrowsable', 'propput'], HRESULT, 'Normal',
              ( ['in'], VARIANT, 'Normal' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'Thickness',
              ( ['out', 'retval'], POINTER(c_double), 'Thickness' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'Thickness',
              ( ['in'], c_double, 'Thickness' )),
    COMMETHOD([dispid(4)], HRESULT, 'AppendVertex',
              ( ['in'], VARIANT, 'vertex' )),
    COMMETHOD([dispid(5)], HRESULT, 'Explode',
              ( ['out', 'retval'], POINTER(VARIANT), 'pArrayObjs' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetBulge',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_double), 'bulge' )),
    COMMETHOD([dispid(7)], HRESULT, 'SetBulge',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_double, 'bulge' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetWidth',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(c_double), 'StartWidth' ),
              ( [], POINTER(c_double), 'EndWidth' )),
    COMMETHOD([dispid(9)], HRESULT, 'SetWidth',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_double, 'StartWidth' ),
              ( [], c_double, 'EndWidth' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'ConstantWidth',
              ( ['out', 'retval'], POINTER(c_double), 'Width' )),
    COMMETHOD([dispid(10), 'propput'], HRESULT, 'ConstantWidth',
              ( ['in'], c_double, 'Width' )),
    COMMETHOD([dispid(11)], HRESULT, 'Offset',
              ( ['in'], c_double, 'Distance' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'pOffsetCurves' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'Elevation',
              ( ['out', 'retval'], POINTER(c_double), 'Elevation' )),
    COMMETHOD([dispid(12), 'propput'], HRESULT, 'Elevation',
              ( ['in'], c_double, 'Elevation' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AcPolylineType), 'Type' )),
    COMMETHOD([dispid(13), 'propput'], HRESULT, 'Type',
              ( ['in'], AcPolylineType, 'Type' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'Closed',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'fClose' )),
    COMMETHOD([dispid(14), 'propput'], HRESULT, 'Closed',
              ( ['in'], VARIANT_BOOL, 'fClose' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'LinetypeGeneration',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bLinetypeGen' )),
    COMMETHOD([dispid(15), 'propput'], HRESULT, 'LinetypeGeneration',
              ( ['in'], VARIANT_BOOL, 'bLinetypeGen' )),
    COMMETHOD([dispid(16), 'propget'], HRESULT, 'Area',
              ( ['out', 'retval'], POINTER(c_double), 'Area' )),
    COMMETHOD([dispid(17), 'nonbrowsable', 'propget'], HRESULT, 'Coordinate',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD([dispid(17), 'nonbrowsable', 'propput'], HRESULT, 'Coordinate',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], VARIANT, 'pVal' )),
    COMMETHOD([dispid(18), 'propget'], HRESULT, 'Length',
              ( ['out', 'retval'], POINTER(c_double), 'Length' )),
]
################################################################
## code template for IAcadPolyline implementation
##class IAcadPolyline_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Coordinates
##    def _set(self, Coordinates):
##        '-no docstring-'
##    Coordinates = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Normal
##    def _set(self, Normal):
##        '-no docstring-'
##    Normal = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Thickness
##    def _set(self, Thickness):
##        '-no docstring-'
##    Thickness = property(_get, _set, doc = _set.__doc__)
##
##    def AppendVertex(self, vertex):
##        '-no docstring-'
##        #return 
##
##    def Explode(self):
##        '-no docstring-'
##        #return pArrayObjs
##
##    def GetBulge(self, Index):
##        '-no docstring-'
##        #return bulge
##
##    def SetBulge(self, Index, bulge):
##        '-no docstring-'
##        #return 
##
##    def GetWidth(self, Index, EndWidth):
##        '-no docstring-'
##        #return StartWidth
##
##    def SetWidth(self, Index, StartWidth, EndWidth):
##        '-no docstring-'
##        #return 
##
##    def _get(self):
##        '-no docstring-'
##        #return Width
##    def _set(self, Width):
##        '-no docstring-'
##    ConstantWidth = property(_get, _set, doc = _set.__doc__)
##
##    def Offset(self, Distance):
##        '-no docstring-'
##        #return pOffsetCurves
##
##    def _get(self):
##        '-no docstring-'
##        #return Elevation
##    def _set(self, Elevation):
##        '-no docstring-'
##    Elevation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    Type = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return fClose
##    def _set(self, fClose):
##        '-no docstring-'
##    Closed = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bLinetypeGen
##    def _set(self, bLinetypeGen):
##        '-no docstring-'
##    LinetypeGeneration = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Area(self):
##        '-no docstring-'
##        #return Area
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return pVal
##    def _set(self, Index, pVal):
##        '-no docstring-'
##    Coordinate = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Length(self):
##        '-no docstring-'
##        #return Length
##

class IAcadSpline(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{8298318D-D533-493C-BC93-F06C288B9346}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadSpline._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'NumberOfControlPoints',
              ( ['out', 'retval'], POINTER(c_int), 'numCtrlPoints' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'ControlPoints',
              ( ['out', 'retval'], POINTER(VARIANT), 'controlPoint' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'ControlPoints',
              ( ['in'], VARIANT, 'controlPoint' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'NumberOfFitPoints',
              ( ['out', 'retval'], POINTER(c_int), 'numFitPoints' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'FitPoints',
              ( ['out', 'retval'], POINTER(VARIANT), 'fitPoint' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'FitPoints',
              ( ['in'], VARIANT, 'fitPoint' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'Degree',
              ( ['out', 'retval'], POINTER(c_int), 'Degree' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'Closed',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'fClose' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'IsPlanar',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'fPlanar' )),
    COMMETHOD([dispid(8), 'nonbrowsable', 'propget'], HRESULT, 'IsRational',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'fRational' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'IsPeriodic',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'fPeriodic' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'StartTangent',
              ( ['out', 'retval'], POINTER(VARIANT), 'StartTangent' )),
    COMMETHOD([dispid(10), 'propput'], HRESULT, 'StartTangent',
              ( ['in'], VARIANT, 'StartTangent' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'EndTangent',
              ( ['out', 'retval'], POINTER(VARIANT), 'EndTangent' )),
    COMMETHOD([dispid(11), 'propput'], HRESULT, 'EndTangent',
              ( ['in'], VARIANT, 'EndTangent' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'FitTolerance',
              ( ['out', 'retval'], POINTER(c_double), 'fitTol' )),
    COMMETHOD([dispid(12), 'propput'], HRESULT, 'FitTolerance',
              ( ['in'], c_double, 'fitTol' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'Area',
              ( ['out', 'retval'], POINTER(c_double), 'Area' )),
    COMMETHOD([dispid(14)], HRESULT, 'SetControlPoint',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], VARIANT, 'controlPoint' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetControlPoint',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'controlPoint' )),
    COMMETHOD([dispid(16)], HRESULT, 'SetFitPoint',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], VARIANT, 'fitPoint' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetFitPoint',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'fitPoint' )),
    COMMETHOD([dispid(18)], HRESULT, 'SetWeight',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_double, 'weight' )),
    COMMETHOD([dispid(19)], HRESULT, 'GetWeight',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(c_double), 'weight' )),
    COMMETHOD([dispid(20)], HRESULT, 'AddFitPoint',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], VARIANT, 'fitPoint' )),
    COMMETHOD([dispid(21)], HRESULT, 'DeleteFitPoint',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([dispid(22)], HRESULT, 'ElevateOrder',
              ( ['in'], c_int, 'Order' )),
    COMMETHOD([dispid(23)], HRESULT, 'Offset',
              ( ['in'], c_double, 'Distance' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'pOffsetCurves' )),
    COMMETHOD([dispid(24)], HRESULT, 'PurgeFitData'),
    COMMETHOD([dispid(25)], HRESULT, 'Reverse'),
    COMMETHOD([dispid(26), 'nonbrowsable', 'propget'], HRESULT, 'Knots',
              ( ['out', 'retval'], POINTER(VARIANT), 'KnotValues' )),
    COMMETHOD([dispid(26), 'nonbrowsable', 'propput'], HRESULT, 'Knots',
              ( ['in'], VARIANT, 'KnotValues' )),
    COMMETHOD([dispid(27), 'nonbrowsable', 'propget'], HRESULT, 'Weights',
              ( ['out', 'retval'], POINTER(VARIANT), 'WeightValues' )),
    COMMETHOD([dispid(27), 'nonbrowsable', 'propput'], HRESULT, 'Weights',
              ( ['in'], VARIANT, 'WeightValues' )),
    COMMETHOD([dispid(28), 'propget'], HRESULT, 'KnotParameterization',
              ( ['out', 'retval'], POINTER(AcSplineKnotParameterizationType), 'knotParamVal' )),
    COMMETHOD([dispid(28), 'propput'], HRESULT, 'KnotParameterization',
              ( ['in'], AcSplineKnotParameterizationType, 'knotParamVal' )),
    COMMETHOD([dispid(29), 'propget'], HRESULT, 'SplineFrame',
              ( ['out', 'retval'], POINTER(AcSplineFrameType), 'show' )),
    COMMETHOD([dispid(29), 'propput'], HRESULT, 'SplineFrame',
              ( ['in'], AcSplineFrameType, 'show' )),
    COMMETHOD([dispid(30), 'propget'], HRESULT, 'SplineMethod',
              ( ['out', 'retval'], POINTER(AcSplineMethodType), 'method' )),
    COMMETHOD([dispid(30), 'propput'], HRESULT, 'SplineMethod',
              ( ['in'], AcSplineMethodType, 'method' )),
    COMMETHOD([dispid(31), 'propput'], HRESULT, 'Degree2',
              ( ['in'], c_int, 'Degree' )),
    COMMETHOD([dispid(31), 'propget'], HRESULT, 'Degree2',
              ( ['out', 'retval'], POINTER(c_int), 'Degree' )),
    COMMETHOD([dispid(32), 'propput'], HRESULT, 'Closed2',
              ( ['in'], VARIANT_BOOL, 'fClose' )),
    COMMETHOD([dispid(32), 'propget'], HRESULT, 'Closed2',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'fClose' )),
]
################################################################
## code template for IAcadSpline implementation
##class IAcadSpline_Impl(object):
##    @property
##    def NumberOfControlPoints(self):
##        '-no docstring-'
##        #return numCtrlPoints
##
##    def _get(self):
##        '-no docstring-'
##        #return controlPoint
##    def _set(self, controlPoint):
##        '-no docstring-'
##    ControlPoints = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def NumberOfFitPoints(self):
##        '-no docstring-'
##        #return numFitPoints
##
##    def _get(self):
##        '-no docstring-'
##        #return fitPoint
##    def _set(self, fitPoint):
##        '-no docstring-'
##    FitPoints = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Degree(self):
##        '-no docstring-'
##        #return Degree
##
##    @property
##    def Closed(self):
##        '-no docstring-'
##        #return fClose
##
##    @property
##    def IsPlanar(self):
##        '-no docstring-'
##        #return fPlanar
##
##    @property
##    def IsRational(self):
##        '-no docstring-'
##        #return fRational
##
##    @property
##    def IsPeriodic(self):
##        '-no docstring-'
##        #return fPeriodic
##
##    def _get(self):
##        '-no docstring-'
##        #return StartTangent
##    def _set(self, StartTangent):
##        '-no docstring-'
##    StartTangent = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return EndTangent
##    def _set(self, EndTangent):
##        '-no docstring-'
##    EndTangent = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return fitTol
##    def _set(self, fitTol):
##        '-no docstring-'
##    FitTolerance = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Area(self):
##        '-no docstring-'
##        #return Area
##
##    def SetControlPoint(self, Index, controlPoint):
##        '-no docstring-'
##        #return 
##
##    def GetControlPoint(self, Index):
##        '-no docstring-'
##        #return controlPoint
##
##    def SetFitPoint(self, Index, fitPoint):
##        '-no docstring-'
##        #return 
##
##    def GetFitPoint(self, Index):
##        '-no docstring-'
##        #return fitPoint
##
##    def SetWeight(self, Index, weight):
##        '-no docstring-'
##        #return 
##
##    def GetWeight(self, Index):
##        '-no docstring-'
##        #return weight
##
##    def AddFitPoint(self, Index, fitPoint):
##        '-no docstring-'
##        #return 
##
##    def DeleteFitPoint(self, Index):
##        '-no docstring-'
##        #return 
##
##    def ElevateOrder(self, Order):
##        '-no docstring-'
##        #return 
##
##    def Offset(self, Distance):
##        '-no docstring-'
##        #return pOffsetCurves
##
##    def PurgeFitData(self):
##        '-no docstring-'
##        #return 
##
##    def Reverse(self):
##        '-no docstring-'
##        #return 
##
##    def _get(self):
##        '-no docstring-'
##        #return KnotValues
##    def _set(self, KnotValues):
##        '-no docstring-'
##    Knots = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return WeightValues
##    def _set(self, WeightValues):
##        '-no docstring-'
##    Weights = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return knotParamVal
##    def _set(self, knotParamVal):
##        '-no docstring-'
##    KnotParameterization = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return show
##    def _set(self, show):
##        '-no docstring-'
##    SplineFrame = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return method
##    def _set(self, method):
##        '-no docstring-'
##    SplineMethod = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Degree
##    def _set(self, Degree):
##        '-no docstring-'
##    Degree2 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return fClose
##    def _set(self, fClose):
##        '-no docstring-'
##    Closed2 = property(_get, _set, doc = _set.__doc__)
##

class IAcadTable(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{EEE4FBEC-06EF-4E8E-B887-CFD82679D424}')
    _idlflags_ = ['dual', 'oleautomation']

# values for enumeration 'AcCellOption'
kCellOptionNone = 0
kInheritCellFormat = 1
AcCellOption = c_int # enum

# values for enumeration 'AcCellContentType'
acCellContentTypeUnknown = 0
acCellContentTypeValue = 1
acCellContentTypeField = 2
acCellContentTypeBlock = 4
AcCellContentType = c_int # enum

# values for enumeration 'AcCellMargin'
acCellMarginTop = 1
acCellMarginLeft = 2
acCellMarginBottom = 4
acCellMarginRight = 8
acCellMarginHorzSpacing = 16
acCellMarginVertSpacing = 32
AcCellMargin = c_int # enum

# values for enumeration 'AcCellContentLayout'
acCellContentLayoutFlow = 1
acCellContentLayoutStackedHorizontal = 2
acCellContentLayoutStackedVertical = 4
AcCellContentLayout = c_int # enum

# values for enumeration 'AcCellProperty'
acInvalidCellProperty = 0
acLock = 1
acDataType = 2
acDataFormat = 4
acRotation = 8
acScale = 16
acAlignmentProperty = 32
acContentColor = 64
acBackgroundColor = 128
acTextStyle = 256
acTextHeight = 512
acMarginLeft = 1024
acMarginTop = 2048
acMarginRight = 4096
acMarginBottom = 8192
acEnableBackgroundColor = 16384
acAutoScale = 32768
acMergeAll = 65536
acFlowDirBtoT = 131072
acContentLayout = 262144
acDataTypeAndFormat = 6
acContentProperties = 33662
acBitProperties = 245760
acAllCellProperties = 524287
AcCellProperty = c_int # enum

# values for enumeration 'AcGridLineStyle'
acGridLineStyleSingle = 1
acGridLineStyleDouble = 2
AcGridLineStyle = c_int # enum

# values for enumeration 'AcCellState'
acCellStateNone = 0
acCellStateContentLocked = 1
acCellStateContentReadOnly = 2
acCellStateFormatLocked = 4
acCellStateFormatReadOnly = 8
acCellStateLinked = 16
acCellStateContentModified = 32
acCellStateFormatModified = 64
AcCellState = c_int # enum

# values for enumeration 'AcTableFlowDirection'
acTableFlowRight = 1
acTableFlowDownOrUp = 2
acTableFlowLeft = 4
AcTableFlowDirection = c_int # enum
IAcadTable._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'StyleName',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'StyleName',
              ( ['in'], BSTR, 'bstrName' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'Rows',
              ( ['out', 'retval'], POINTER(c_int), 'pRows' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'Rows',
              ( ['in'], c_int, 'pRows' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'Columns',
              ( ['out', 'retval'], POINTER(c_int), 'pColumns' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'Columns',
              ( ['in'], c_int, 'pColumns' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'FlowDirection',
              ( ['out', 'retval'], POINTER(AcTableDirection), 'pFlow' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'FlowDirection',
              ( ['in'], AcTableDirection, 'pFlow' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(c_double), 'pWidth' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'Width',
              ( ['in'], c_double, 'pWidth' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'Height',
              ( ['out', 'retval'], POINTER(c_double), 'pHeight' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'Height',
              ( ['in'], c_double, 'pHeight' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'VertCellMargin',
              ( ['out', 'retval'], POINTER(c_double), 'pGap' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'VertCellMargin',
              ( ['in'], c_double, 'pGap' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'HorzCellMargin',
              ( ['out', 'retval'], POINTER(c_double), 'pGap' )),
    COMMETHOD([dispid(8), 'propput'], HRESULT, 'HorzCellMargin',
              ( ['in'], c_double, 'pGap' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'InsertionPoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'insPoint' )),
    COMMETHOD([dispid(9), 'propput'], HRESULT, 'InsertionPoint',
              ( ['in'], VARIANT, 'insPoint' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetColumnWidth',
              ( ['in'], c_int, 'col' ),
              ( ['out', 'retval'], POINTER(c_double), 'pWidth' )),
    COMMETHOD([dispid(11)], HRESULT, 'SetColumnWidth',
              ( ['in'], c_int, 'col' ),
              ( ['in'], c_double, 'Width' )),
    COMMETHOD([dispid(12), 'propput'], HRESULT, 'ColumnWidth',
              ( ['in'], c_double, 'rhs' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetRowHeight',
              ( ['in'], c_int, 'row' ),
              ( ['out', 'retval'], POINTER(c_double), 'pHeight' )),
    COMMETHOD([dispid(14)], HRESULT, 'SetRowHeight',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_double, 'Height' )),
    COMMETHOD([dispid(15), 'propput'], HRESULT, 'RowHeight',
              ( ['in'], c_double, 'rhs' )),
    COMMETHOD([dispid(26)], HRESULT, 'GetMinimumColumnWidth',
              ( ['in'], c_int, 'col' ),
              ( ['out', 'retval'], POINTER(c_double), 'pWidth' )),
    COMMETHOD([dispid(27)], HRESULT, 'GetMinimumRowHeight',
              ( ['in'], c_int, 'row' ),
              ( ['out', 'retval'], POINTER(c_double), 'pHeight' )),
    COMMETHOD([dispid(28), 'propget'], HRESULT, 'MinimumTableWidth',
              ( ['out', 'retval'], POINTER(c_double), 'pWidth' )),
    COMMETHOD([dispid(29), 'propget'], HRESULT, 'MinimumTableHeight',
              ( ['out', 'retval'], POINTER(c_double), 'pHeight' )),
    COMMETHOD([dispid(30), 'propget'], HRESULT, 'Direction',
              ( ['out', 'retval'], POINTER(VARIANT), 'DirectionVector' )),
    COMMETHOD([dispid(30), 'propput'], HRESULT, 'Direction',
              ( ['in'], VARIANT, 'DirectionVector' )),
    COMMETHOD([dispid(31), 'propget'], HRESULT, 'TitleSuppressed',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue' )),
    COMMETHOD([dispid(31), 'propput'], HRESULT, 'TitleSuppressed',
              ( ['in'], VARIANT_BOOL, 'bValue' )),
    COMMETHOD([dispid(32), 'propget'], HRESULT, 'HeaderSuppressed',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue' )),
    COMMETHOD([dispid(32), 'propput'], HRESULT, 'HeaderSuppressed',
              ( ['in'], VARIANT_BOOL, 'bValue' )),
    COMMETHOD([dispid(33)], HRESULT, 'GetAlignment',
              ( ['in'], AcRowType, 'rowType' ),
              ( ['out', 'retval'], POINTER(AcCellAlignment), 'pCellAlignment' )),
    COMMETHOD([dispid(34)], HRESULT, 'SetAlignment',
              ( ['in'], c_int, 'rowTypes' ),
              ( ['in'], AcCellAlignment, 'cellAlignment' )),
    COMMETHOD([dispid(35)], HRESULT, 'GetBackgroundColorNone',
              ( ['in'], AcRowType, 'rowType' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue' )),
    COMMETHOD([dispid(36)], HRESULT, 'SetBackgroundColorNone',
              ( ['in'], c_int, 'rowTypes' ),
              ( ['in'], POINTER(VARIANT_BOOL), 'bValue' )),
    COMMETHOD([dispid(37)], HRESULT, 'GetBackgroundColor',
              ( ['in'], AcRowType, 'rowType' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor' )),
    COMMETHOD([dispid(38)], HRESULT, 'SetBackgroundColor',
              ( ['in'], c_int, 'rowTypes' ),
              ( ['in'], POINTER(IAcadAcCmColor), 'pColor' )),
    COMMETHOD([dispid(39)], HRESULT, 'GetContentColor',
              ( ['in'], AcRowType, 'rowType' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor' )),
    COMMETHOD([dispid(40)], HRESULT, 'SetContentColor',
              ( ['in'], c_int, 'rowTypes' ),
              ( ['in'], POINTER(IAcadAcCmColor), 'pColor' )),
    COMMETHOD([dispid(41)], HRESULT, 'GetTextStyle',
              ( ['in'], AcRowType, 'rowType' ),
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(42)], HRESULT, 'SetTextStyle',
              ( ['in'], c_int, 'rowTypes' ),
              ( ['in'], BSTR, 'bstrName' )),
    COMMETHOD([dispid(43)], HRESULT, 'GetTextHeight',
              ( ['in'], AcRowType, 'rowType' ),
              ( ['out', 'retval'], POINTER(c_double), 'pTextHeight' )),
    COMMETHOD([dispid(44)], HRESULT, 'SetTextHeight',
              ( ['in'], c_int, 'rowTypes' ),
              ( ['in'], c_double, 'TextHeight' )),
    COMMETHOD([dispid(45)], HRESULT, 'GetGridLineWeight',
              ( ['in'], AcGridLineType, 'gridLineType' ),
              ( ['in'], AcRowType, 'rowType' ),
              ( ['out', 'retval'], POINTER(ACAD_LWEIGHT), 'Lineweight' )),
    COMMETHOD([dispid(46)], HRESULT, 'SetGridLineWeight',
              ( ['in'], c_int, 'gridLineTypes' ),
              ( ['in'], c_int, 'rowTypes' ),
              ( ['in'], ACAD_LWEIGHT, 'Lineweight' )),
    COMMETHOD([dispid(47)], HRESULT, 'GetGridColor',
              ( ['in'], AcGridLineType, 'gridLineType' ),
              ( ['in'], AcRowType, 'rowType' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor' )),
    COMMETHOD([dispid(48)], HRESULT, 'SetGridColor',
              ( ['in'], c_int, 'gridLineTypes' ),
              ( ['in'], c_int, 'rowTypes' ),
              ( ['in'], POINTER(IAcadAcCmColor), 'pColor' )),
    COMMETHOD([dispid(49)], HRESULT, 'GetGridVisibility',
              ( ['in'], AcGridLineType, 'gridLineType' ),
              ( ['in'], AcRowType, 'rowType' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue' )),
    COMMETHOD([dispid(50)], HRESULT, 'SetGridVisibility',
              ( ['in'], c_int, 'gridLineTypes' ),
              ( ['in'], c_int, 'rowTypes' ),
              ( ['in'], VARIANT_BOOL, 'bValue' )),
    COMMETHOD([dispid(51), 'propget'], HRESULT, 'TableStyleOverrides',
              ( ['out', 'retval'], POINTER(VARIANT), 'pIntArray' )),
    COMMETHOD([dispid(52)], HRESULT, 'ClearTableStyleOverrides',
              ( ['in'], c_int, 'flag' )),
    COMMETHOD([dispid(53)], HRESULT, 'GetCellType',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['out', 'retval'], POINTER(AcCellType), 'pCellType' )),
    COMMETHOD([dispid(54)], HRESULT, 'SetCellType',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['in'], AcCellType, 'CellType' )),
    COMMETHOD([dispid(55)], HRESULT, 'GetCellExtents',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['in'], VARIANT_BOOL, 'bOuterCell' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'pPts' )),
    COMMETHOD([dispid(56)], HRESULT, 'GetAttachmentPoint',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'pAttachmentPoint' )),
    COMMETHOD([dispid(58)], HRESULT, 'GetCellAlignment',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['out', 'retval'], POINTER(AcCellAlignment), 'pCellAlignment' )),
    COMMETHOD([dispid(59)], HRESULT, 'SetCellAlignment',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['in'], AcCellAlignment, 'cellAlignment' )),
    COMMETHOD([dispid(60)], HRESULT, 'GetCellBackgroundColorNone',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue' )),
    COMMETHOD([dispid(61)], HRESULT, 'SetCellBackgroundColorNone',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['in'], POINTER(VARIANT_BOOL), 'bValue' )),
    COMMETHOD([dispid(62)], HRESULT, 'GetCellBackgroundColor',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor' )),
    COMMETHOD([dispid(63)], HRESULT, 'SetCellBackgroundColor',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['in'], POINTER(IAcadAcCmColor), 'pColor' )),
    COMMETHOD([dispid(64)], HRESULT, 'GetCellContentColor',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor' )),
    COMMETHOD([dispid(65)], HRESULT, 'SetCellContentColor',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['in'], POINTER(IAcadAcCmColor), 'pColor' )),
    COMMETHOD([dispid(66)], HRESULT, 'GetCellStyleOverrides',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'pIntArray' )),
    COMMETHOD([dispid(67)], HRESULT, 'DeleteCellContent',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' )),
    COMMETHOD([dispid(68)], HRESULT, 'GetRowType',
              ( ['in'], c_int, 'row' ),
              ( ['out', 'retval'], POINTER(AcRowType), 'pRowType' )),
    COMMETHOD([dispid(69)], HRESULT, 'GetText',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['out', 'retval'], POINTER(BSTR), 'pStr' )),
    COMMETHOD([dispid(70)], HRESULT, 'SetText',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['in'], BSTR, 'pStr' )),
    COMMETHOD([dispid(71)], HRESULT, 'GetCellTextStyle',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(72)], HRESULT, 'SetCellTextStyle',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['in'], BSTR, 'bstrName' )),
    COMMETHOD([dispid(73)], HRESULT, 'GetCellTextHeight',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['out', 'retval'], POINTER(c_double), 'pTextHeight' )),
    COMMETHOD([dispid(74)], HRESULT, 'SetCellTextHeight',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['in'], c_double, 'TextHeight' )),
    COMMETHOD([dispid(75)], HRESULT, 'GetTextRotation',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['out', 'retval'], POINTER(AcRotationAngle), 'TextRotation' )),
    COMMETHOD([dispid(76)], HRESULT, 'SetTextRotation',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['in'], AcRotationAngle, 'TextRotation' )),
    COMMETHOD([dispid(77)], HRESULT, 'GetAutoScale',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue' )),
    COMMETHOD([dispid(78)], HRESULT, 'SetAutoScale',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['in'], POINTER(VARIANT_BOOL), 'bValue' )),
    COMMETHOD([dispid(79)], HRESULT, 'GetBlockTableRecordId',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['out', 'retval'], POINTER(LONG_PTR), 'blkId' )),
    COMMETHOD([dispid(80)], HRESULT, 'SetBlockTableRecordId',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['in'], LONG_PTR, 'blkId' ),
              ( ['in'], VARIANT_BOOL, 'bAutoFit' )),
    COMMETHOD([dispid(81)], HRESULT, 'GetBlockScale',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['out', 'retval'], POINTER(c_double), 'blkScale' )),
    COMMETHOD([dispid(82)], HRESULT, 'SetBlockScale',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['in'], c_double, 'blkScale' )),
    COMMETHOD([dispid(83)], HRESULT, 'GetBlockRotation',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['out', 'retval'], POINTER(c_double), 'blkRotation' )),
    COMMETHOD([dispid(84)], HRESULT, 'SetBlockRotation',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['in'], c_double, 'blkRotation' )),
    COMMETHOD([dispid(112)], HRESULT, 'GetBlockAttributeValue',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['in'], LONG_PTR, 'attdefId' ),
              ( ['out', 'retval'], POINTER(BSTR), 'bstrValue' )),
    COMMETHOD([dispid(113)], HRESULT, 'SetBlockAttributeValue',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['in'], LONG_PTR, 'attdefId' ),
              ( ['in'], BSTR, 'bstrValue' )),
    COMMETHOD([dispid(85)], HRESULT, 'GetCellGridLineWeight',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['in'], AcCellEdgeMask, 'edge' ),
              ( ['out', 'retval'], POINTER(ACAD_LWEIGHT), 'plineweight' )),
    COMMETHOD([dispid(86)], HRESULT, 'SetCellGridLineWeight',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['in'], c_int, 'edges' ),
              ( ['in'], ACAD_LWEIGHT, 'Lineweight' )),
    COMMETHOD([dispid(87)], HRESULT, 'GetCellGridColor',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['in'], AcCellEdgeMask, 'edge' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor' )),
    COMMETHOD([dispid(88)], HRESULT, 'SetCellGridColor',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['in'], c_int, 'edges' ),
              ( ['in'], POINTER(IAcadAcCmColor), 'pColor' )),
    COMMETHOD([dispid(89)], HRESULT, 'GetCellGridVisibility',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['in'], AcCellEdgeMask, 'edge' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue' )),
    COMMETHOD([dispid(90)], HRESULT, 'SetCellGridVisibility',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['in'], c_int, 'edges' ),
              ( ['in'], VARIANT_BOOL, 'bValue' )),
    COMMETHOD([dispid(95)], HRESULT, 'InsertColumns',
              ( ['in'], c_int, 'col' ),
              ( ['in'], c_double, 'Width' ),
              ( ['in'], c_int, 'cols' )),
    COMMETHOD([dispid(96)], HRESULT, 'DeleteColumns',
              ( ['in'], c_int, 'col' ),
              ( ['in'], c_int, 'cols' )),
    COMMETHOD([dispid(97)], HRESULT, 'InsertRows',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_double, 'Height' ),
              ( ['in'], c_int, 'Rows' )),
    COMMETHOD([dispid(98)], HRESULT, 'DeleteRows',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'Rows' )),
    COMMETHOD([dispid(99)], HRESULT, 'MergeCells',
              ( ['in'], c_int, 'minRow' ),
              ( ['in'], c_int, 'maxRow' ),
              ( ['in'], c_int, 'minCol' ),
              ( ['in'], c_int, 'maxCol' )),
    COMMETHOD([dispid(100)], HRESULT, 'UnmergeCells',
              ( ['in'], c_int, 'minRow' ),
              ( ['in'], c_int, 'maxRow' ),
              ( ['in'], c_int, 'minCol' ),
              ( ['in'], c_int, 'maxCol' )),
    COMMETHOD([dispid(101)], HRESULT, 'IsMergedCell',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['out'], POINTER(c_int), 'minRow' ),
              ( ['out'], POINTER(c_int), 'maxRow' ),
              ( ['out'], POINTER(c_int), 'minCol' ),
              ( ['out'], POINTER(c_int), 'maxCol' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pbValue' )),
    COMMETHOD([dispid(114)], HRESULT, 'GetFieldId',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['out', 'retval'], POINTER(LONG_PTR), 'fieldId' )),
    COMMETHOD([dispid(115)], HRESULT, 'SetFieldId',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['in'], LONG_PTR, 'fieldId' )),
    COMMETHOD([dispid(102)], HRESULT, 'GenerateLayout'),
    COMMETHOD([dispid(103)], HRESULT, 'RecomputeTableBlock',
              ( ['in'], VARIANT_BOOL, 'bForceUpdate' )),
    COMMETHOD([dispid(104)], HRESULT, 'HitTest',
              ( ['in'], VARIANT, 'wpt' ),
              ( ['in'], VARIANT, 'wviewVec' ),
              ( ['out'], POINTER(c_int), 'resultRowIndex' ),
              ( ['out'], POINTER(c_int), 'resultColumnIndex' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bReturn' )),
    COMMETHOD([dispid(105)], HRESULT, 'Select',
              ( ['in'], VARIANT, 'wpt' ),
              ( ['in'], VARIANT, 'wvwVec' ),
              ( ['in'], VARIANT, 'wvwxVec' ),
              ( ['in'], c_double, 'wxaper' ),
              ( ['in'], c_double, 'wyaper' ),
              ( ['in'], VARIANT_BOOL, 'allowOutside' ),
              ( ['out'], POINTER(c_int), 'resultRowIndex' ),
              ( ['out'], POINTER(c_int), 'resultColumnIndex' )),
    COMMETHOD([dispid(106)], HRESULT, 'SelectSubRegion',
              ( ['in'], VARIANT, 'wpt1' ),
              ( ['in'], VARIANT, 'wpt2' ),
              ( ['in'], VARIANT, 'wvwVec' ),
              ( ['in'], VARIANT, 'wvwxVec' ),
              ( ['in'], AcSelectType, 'seltype' ),
              ( ['in'], VARIANT_BOOL, 'bIncludeCurrentSelection' ),
              ( ['out'], POINTER(c_int), 'rowMin' ),
              ( ['out'], POINTER(c_int), 'rowMax' ),
              ( ['out'], POINTER(c_int), 'colMin' ),
              ( ['out'], POINTER(c_int), 'colMax' )),
    COMMETHOD([dispid(107)], HRESULT, 'ReselectSubRegion'),
    COMMETHOD([dispid(108)], HRESULT, 'GetSubSelection',
              ( ['out'], POINTER(c_int), 'rowMin' ),
              ( ['out'], POINTER(c_int), 'rowMax' ),
              ( ['out'], POINTER(c_int), 'colMin' ),
              ( ['out'], POINTER(c_int), 'colMax' )),
    COMMETHOD([dispid(109)], HRESULT, 'SetSubSelection',
              ( ['in'], c_int, 'rowMin' ),
              ( ['in'], c_int, 'rowMax' ),
              ( ['in'], c_int, 'colMin' ),
              ( ['in'], c_int, 'colMax' )),
    COMMETHOD([dispid(110)], HRESULT, 'ClearSubSelection'),
    COMMETHOD([dispid(111), 'propget'], HRESULT, 'HasSubSelection',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pbValue' )),
    COMMETHOD([dispid(116), 'propget'], HRESULT, 'RegenerateTableSuppressed',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue' )),
    COMMETHOD([dispid(116), 'propput'], HRESULT, 'RegenerateTableSuppressed',
              ( ['in'], VARIANT_BOOL, 'bValue' )),
    COMMETHOD([dispid(117)], HRESULT, 'GetDataType',
              ( ['in'], AcRowType, 'rowType' ),
              ( ['out'], POINTER(AcValueDataType), 'pDataType' ),
              ( ['out'], POINTER(AcValueUnitType), 'pUnitType' )),
    COMMETHOD([dispid(118)], HRESULT, 'SetDataType',
              ( ['in'], c_int, 'rowTypes' ),
              ( ['in'], AcValueDataType, 'dataType' ),
              ( ['in'], AcValueUnitType, 'unitType' )),
    COMMETHOD([dispid(119)], HRESULT, 'GetFormat',
              ( ['in'], AcRowType, 'rowType' ),
              ( ['out', 'retval'], POINTER(BSTR), 'pFormat' )),
    COMMETHOD([dispid(120)], HRESULT, 'SetFormat',
              ( ['in'], c_int, 'rowTypes' ),
              ( [], BSTR, 'pFormat' )),
    COMMETHOD([dispid(121)], HRESULT, 'FormatValue',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( [], AcFormatOption, 'nOption' ),
              ( [], POINTER(BSTR), 'pVal' )),
    COMMETHOD([dispid(1946)], HRESULT, 'GetCellDataType',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['out'], POINTER(AcValueDataType), 'pDataType' ),
              ( ['out'], POINTER(AcValueUnitType), 'pUnitType' )),
    COMMETHOD([dispid(1947)], HRESULT, 'SetCellDataType',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( [], AcValueDataType, 'dataType' ),
              ( [], AcValueUnitType, 'unitType' )),
    COMMETHOD([dispid(1948)], HRESULT, 'GetCellFormat',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['out', 'retval'], POINTER(BSTR), 'pFormat' )),
    COMMETHOD([dispid(1949)], HRESULT, 'SetCellFormat',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( [], BSTR, 'pFormat' )),
    COMMETHOD([dispid(1950)], HRESULT, 'GetCellValue',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD([dispid(1951)], HRESULT, 'SetCellValue',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( [], VARIANT, 'val' )),
    COMMETHOD([dispid(2208)], HRESULT, 'SetCellValueFromText',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['in'], BSTR, 'val' ),
              ( ['in'], AcParseOption, 'nOption' )),
    COMMETHOD([dispid(2209)], HRESULT, 'ResetCellValue',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' )),
    COMMETHOD([dispid(2210)], HRESULT, 'IsEmpty',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue' )),
    COMMETHOD([dispid(2213)], HRESULT, 'CreateContent',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nIndex' ),
              ( ['out', 'retval'], POINTER(c_int), 'pInt' )),
    COMMETHOD([dispid(2214)], HRESULT, 'MoveContent',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nFromIndex' ),
              ( ['in'], c_int, 'nToIndex' )),
    COMMETHOD([dispid(2215)], HRESULT, 'DeleteContent',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' )),
    COMMETHOD([dispid(2217)], HRESULT, 'GetValue',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nContent' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'pAcValue' )),
    COMMETHOD([dispid(2224)], HRESULT, 'SetValue',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nContent' ),
              ( ['in'], VARIANT, 'acValue' )),
    COMMETHOD([dispid(2225)], HRESULT, 'SetValueFromText',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nContent' ),
              ( ['in'], BSTR, 'szText' ),
              ( ['in'], AcParseOption, 'nOption' )),
    COMMETHOD([dispid(2227)], HRESULT, 'GetDataFormat',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nContent' ),
              ( ['out', 'retval'], POINTER(BSTR), 'pValue' )),
    COMMETHOD([dispid(2228)], HRESULT, 'SetDataFormat',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nContent' ),
              ( ['in'], BSTR, 'szFormat' )),
    COMMETHOD([dispid(2229)], HRESULT, 'GetTextString',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nContent' ),
              ( ['out', 'retval'], POINTER(BSTR), 'pTextString' )),
    COMMETHOD([dispid(2231)], HRESULT, 'SetTextString',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nContent' ),
              ( ['in'], BSTR, 'Text' )),
    COMMETHOD([dispid(2232)], HRESULT, 'GetFieldId2',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nContent' ),
              ( ['out', 'retval'], POINTER(LONG_PTR), 'pAcDbObjectId' )),
    COMMETHOD([dispid(2233)], HRESULT, 'SetFieldId2',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nContent' ),
              ( ['in'], LONG_PTR, 'acDbObjectId' ),
              ( ['in'], AcCellOption, 'nflag' )),
    COMMETHOD([dispid(2241)], HRESULT, 'GetBlockTableRecordId2',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nContent' ),
              ( ['out', 'retval'], POINTER(LONG_PTR), 'pAcDbObjectId' )),
    COMMETHOD([dispid(2242)], HRESULT, 'SetBlockTableRecordId2',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nContent' ),
              ( ['in'], LONG_PTR, 'blkId' ),
              ( ['in'], VARIANT_BOOL, 'autoFit' )),
    COMMETHOD([dispid(2243)], HRESULT, 'GetBlockAttributeValue2',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nContent' ),
              ( ['in'], LONG_PTR, 'blkId' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(2244)], HRESULT, 'SetBlockAttributeValue2',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nContent' ),
              ( ['in'], LONG_PTR, 'blkId' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(2247)], HRESULT, 'GetCustomData',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], BSTR, 'szKey' ),
              ( ['out'], POINTER(VARIANT), 'pData' )),
    COMMETHOD([dispid(2248)], HRESULT, 'SetCustomData',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], BSTR, 'szKey' ),
              ( ['in'], VARIANT, 'data' )),
    COMMETHOD([dispid(2249)], HRESULT, 'GetCellStyle',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['out', 'retval'], POINTER(BSTR), 'pCellStyle' )),
    COMMETHOD([dispid(2256)], HRESULT, 'SetCellStyle',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], BSTR, 'szCellStyle' )),
    COMMETHOD([dispid(2260)], HRESULT, 'GetContentColor2',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nContent' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor' )),
    COMMETHOD([dispid(2261)], HRESULT, 'SetContentColor2',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nContent' ),
              ( ['in'], POINTER(IAcadAcCmColor), 'pColor' )),
    COMMETHOD([dispid(2262)], HRESULT, 'GetDataType2',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nContent' ),
              ( ['out'], POINTER(AcValueDataType), 'pDataType' ),
              ( ['out'], POINTER(AcValueUnitType), 'pUnitType' )),
    COMMETHOD([dispid(2263)], HRESULT, 'SetDataType2',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nContent' ),
              ( ['in'], AcValueDataType, 'dataType' ),
              ( ['in'], AcValueUnitType, 'unitType' )),
    COMMETHOD([dispid(2264)], HRESULT, 'GetTextStyle2',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nContent' ),
              ( ['out', 'retval'], POINTER(BSTR), 'pbstrStyleName' )),
    COMMETHOD([dispid(2265)], HRESULT, 'SetTextStyle2',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nContent' ),
              ( ['in'], BSTR, 'bstrStyleName' )),
    COMMETHOD([dispid(2272)], HRESULT, 'GetTextHeight2',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nContent' ),
              ( ['out', 'retval'], POINTER(c_double), 'pHeight' )),
    COMMETHOD([dispid(2273)], HRESULT, 'SetTextHeight2',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nContent' ),
              ( ['in'], c_double, 'Height' )),
    COMMETHOD([dispid(36322)], HRESULT, 'GetRotation',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nContent' ),
              ( ['out', 'retval'], POINTER(c_double), 'pValue' )),
    COMMETHOD([dispid(2275)], HRESULT, 'SetRotation',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nContent' ),
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(2276)], HRESULT, 'GetAutoScale2',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nContent' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bAutoScale' )),
    COMMETHOD([dispid(36325)], HRESULT, 'SetAutoScale2',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nContent' ),
              ( ['in'], VARIANT_BOOL, 'bAutoFit' )),
    COMMETHOD([dispid(2278)], HRESULT, 'GetScale',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nContent' ),
              ( ['out', 'retval'], POINTER(c_double), 'pScale' )),
    COMMETHOD([dispid(2279)], HRESULT, 'SetScale',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nContent' ),
              ( ['in'], c_double, 'scale' )),
    COMMETHOD([dispid(2280)], HRESULT, 'RemoveAllOverrides',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' )),
    COMMETHOD([dispid(2281)], HRESULT, 'GetGridLineWeight2',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], AcGridLineType, 'nGridLineType' ),
              ( ['out', 'retval'], POINTER(ACAD_LWEIGHT), 'plineweight' )),
    COMMETHOD([dispid(2288)], HRESULT, 'SetGridLineWeight2',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], AcGridLineType, 'nGridLineType' ),
              ( ['in'], ACAD_LWEIGHT, 'Lineweight' )),
    COMMETHOD([dispid(2289)], HRESULT, 'GetGridLinetype',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], AcGridLineType, 'nGridLineType' ),
              ( ['out', 'retval'], POINTER(LONG_PTR), 'pacDbObjId' )),
    COMMETHOD([dispid(2290)], HRESULT, 'SetGridLinetype',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], AcGridLineType, 'nGridLineType' ),
              ( ['in'], LONG_PTR, 'idLinetype' )),
    COMMETHOD([dispid(2291)], HRESULT, 'GetGridColor2',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], AcGridLineType, 'nGridLineType' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor' )),
    COMMETHOD([dispid(2292)], HRESULT, 'SetGridColor2',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], AcGridLineType, 'nGridLineType' ),
              ( ['in'], POINTER(IAcadAcCmColor), 'pColor' )),
    COMMETHOD([dispid(2293)], HRESULT, 'GetGridVisibility2',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], AcGridLineType, 'nGridLineType' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVisible' )),
    COMMETHOD([dispid(2294)], HRESULT, 'SetGridVisibility2',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], AcGridLineType, 'nGridLineType' ),
              ( ['in'], VARIANT_BOOL, 'bVisible' )),
    COMMETHOD([dispid(2295)], HRESULT, 'GetGridDoubleLineSpacing',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], AcGridLineType, 'nGridLineType' ),
              ( ['out', 'retval'], POINTER(c_double), 'pValue' )),
    COMMETHOD([dispid(2296)], HRESULT, 'SetGridDoubleLineSpacing',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], AcGridLineType, 'nGridLineType' ),
              ( ['in'], c_double, 'fSpacing' )),
    COMMETHOD([dispid(2308), 'propput'], HRESULT, 'EnableBreak',
              ( ['in'], VARIANT_BOOL, 'rhs' )),
    COMMETHOD([dispid(2309)], HRESULT, 'GetBreakHeight',
              ( ['in'], c_int, 'nIndex' ),
              ( ['out', 'retval'], POINTER(c_double), 'pHeight' )),
    COMMETHOD([dispid(2310)], HRESULT, 'SetBreakHeight',
              ( ['in'], c_int, 'nIndex' ),
              ( ['in'], c_double, 'Height' )),
    COMMETHOD([dispid(2311)], HRESULT, 'GetContentType',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['out', 'retval'], POINTER(AcCellContentType), 'pType' )),
    COMMETHOD([dispid(2324)], HRESULT, 'GetMargin',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], AcCellMargin, 'nMargin' ),
              ( ['out', 'retval'], POINTER(c_double), 'pValue' )),
    COMMETHOD([dispid(2326)], HRESULT, 'SetMargin',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], AcCellMargin, 'nMargins' ),
              ( ['in'], c_double, 'fMargin' )),
    COMMETHOD([dispid(2327)], HRESULT, 'GetContentLayout',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['out', 'retval'], POINTER(AcCellContentLayout), 'pLayout' )),
    COMMETHOD([dispid(2328)], HRESULT, 'SetContentLayout',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['in'], AcCellContentLayout, 'nLayout' )),
    COMMETHOD([dispid(2338)], HRESULT, 'GetOverride',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nContent' ),
              ( ['out', 'retval'], POINTER(AcCellProperty), 'pValue' )),
    COMMETHOD([dispid(2339)], HRESULT, 'SetOverride',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nContent' ),
              ( ['in'], AcCellProperty, 'nProp' )),
    COMMETHOD([dispid(2340)], HRESULT, 'GetGridLineStyle',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], AcGridLineType, 'nGridLineType' ),
              ( ['out', 'retval'], POINTER(AcGridLineStyle), 'pStyle' )),
    COMMETHOD([dispid(2341)], HRESULT, 'SetGridLineStyle',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], AcGridLineType, 'nGridLineTypes' ),
              ( ['in'], AcGridLineStyle, 'nLineStyle' )),
    COMMETHOD([dispid(2345)], HRESULT, 'InsertRowsAndInherit',
              ( ['in'], c_int, 'nIndex' ),
              ( ['in'], c_int, 'nInheritFrom' ),
              ( ['in'], c_int, 'nNumRows' )),
    COMMETHOD([dispid(2353)], HRESULT, 'InsertColumnsAndInherit',
              ( ['in'], c_int, 'col' ),
              ( ['in'], c_int, 'nInheritFrom' ),
              ( ['in'], c_int, 'nNumCols' )),
    COMMETHOD([dispid(2354)], HRESULT, 'GetHasFormula',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nContent' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue' )),
    COMMETHOD([dispid(2355)], HRESULT, 'GetFormula',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nContent' ),
              ( ['out', 'retval'], POINTER(BSTR), 'pszFormula' )),
    COMMETHOD([dispid(2356)], HRESULT, 'SetFormula',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], c_int, 'nContent' ),
              ( ['in'], BSTR, 'pszFormula' )),
    COMMETHOD([dispid(2358)], HRESULT, 'IsContentEditable',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue' )),
    COMMETHOD([dispid(2359)], HRESULT, 'IsFormatEditable',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue' )),
    COMMETHOD([dispid(2360)], HRESULT, 'GetCellState',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['out', 'retval'], POINTER(AcCellState), 'pCellState' )),
    COMMETHOD([dispid(2361)], HRESULT, 'SetCellState',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], AcCellState, 'nLock' )),
    COMMETHOD([dispid(2368)], HRESULT, 'EnableMergeAll',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], VARIANT_BOOL, 'bEnable' )),
    COMMETHOD([dispid(2369)], HRESULT, 'IsMergeAllEnabled',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue' )),
    COMMETHOD([dispid(65520), 'propget'], HRESULT, 'BreaksEnabled',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bEnabled' )),
    COMMETHOD([dispid(65520), 'propput'], HRESULT, 'BreaksEnabled',
              ( ['in'], VARIANT_BOOL, 'bEnabled' )),
    COMMETHOD([dispid(65521), 'propget'], HRESULT, 'RepeatTopLabels',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bEnabled' )),
    COMMETHOD([dispid(65521), 'propput'], HRESULT, 'RepeatTopLabels',
              ( ['in'], VARIANT_BOOL, 'bEnabled' )),
    COMMETHOD([dispid(65522), 'propget'], HRESULT, 'RepeatBottomLabels',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bEnabled' )),
    COMMETHOD([dispid(65522), 'propput'], HRESULT, 'RepeatBottomLabels',
              ( ['in'], VARIANT_BOOL, 'bEnabled' )),
    COMMETHOD([dispid(65523), 'propget'], HRESULT, 'TableBreakFlowDirection',
              ( ['out', 'retval'], POINTER(AcTableFlowDirection), 'pDir' )),
    COMMETHOD([dispid(65523), 'propput'], HRESULT, 'TableBreakFlowDirection',
              ( ['in'], AcTableFlowDirection, 'pDir' )),
    COMMETHOD([dispid(65524), 'propget'], HRESULT, 'AllowManualPositions',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bEnabled' )),
    COMMETHOD([dispid(65524), 'propput'], HRESULT, 'AllowManualPositions',
              ( ['in'], VARIANT_BOOL, 'bEnabled' )),
    COMMETHOD([dispid(65525), 'propget'], HRESULT, 'AllowManualHeights',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bEnabled' )),
    COMMETHOD([dispid(65525), 'propput'], HRESULT, 'AllowManualHeights',
              ( ['in'], VARIANT_BOOL, 'bEnabled' )),
    COMMETHOD([dispid(65526), 'propget'], HRESULT, 'TableBreakHeight',
              ( ['out', 'retval'], POINTER(c_double), 'pHeight' )),
    COMMETHOD([dispid(65526), 'propput'], HRESULT, 'TableBreakHeight',
              ( ['in'], c_double, 'pHeight' )),
    COMMETHOD([dispid(65527), 'propget'], HRESULT, 'BreakSpacing',
              ( ['out', 'retval'], POINTER(c_double), 'pSpacing' )),
    COMMETHOD([dispid(65527), 'propput'], HRESULT, 'BreakSpacing',
              ( ['in'], c_double, 'pSpacing' )),
    COMMETHOD([dispid(65528)], HRESULT, 'GetColumnName',
              ( ['in'], c_int, 'nIndex' ),
              ( ['out', 'retval'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(65529)], HRESULT, 'SetColumnName',
              ( ['in'], c_int, 'nIndex' ),
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([dispid(65530)], HRESULT, 'SetToolTip',
              ( ['in'], c_int, 'nRow' ),
              ( ['in'], c_int, 'nCol' ),
              ( ['in'], BSTR, 'tip' )),
]
################################################################
## code template for IAcadTable implementation
##class IAcadTable_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return bstrName
##    def _set(self, bstrName):
##        '-no docstring-'
##    StyleName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pRows
##    def _set(self, pRows):
##        '-no docstring-'
##    Rows = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pColumns
##    def _set(self, pColumns):
##        '-no docstring-'
##    Columns = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pFlow
##    def _set(self, pFlow):
##        '-no docstring-'
##    FlowDirection = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pWidth
##    def _set(self, pWidth):
##        '-no docstring-'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pHeight
##    def _set(self, pHeight):
##        '-no docstring-'
##    Height = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pGap
##    def _set(self, pGap):
##        '-no docstring-'
##    VertCellMargin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pGap
##    def _set(self, pGap):
##        '-no docstring-'
##    HorzCellMargin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return insPoint
##    def _set(self, insPoint):
##        '-no docstring-'
##    InsertionPoint = property(_get, _set, doc = _set.__doc__)
##
##    def GetColumnWidth(self, col):
##        '-no docstring-'
##        #return pWidth
##
##    def SetColumnWidth(self, col, Width):
##        '-no docstring-'
##        #return 
##
##    def _set(self, rhs):
##        '-no docstring-'
##    ColumnWidth = property(fset = _set, doc = _set.__doc__)
##
##    def GetRowHeight(self, row):
##        '-no docstring-'
##        #return pHeight
##
##    def SetRowHeight(self, row, Height):
##        '-no docstring-'
##        #return 
##
##    def _set(self, rhs):
##        '-no docstring-'
##    RowHeight = property(fset = _set, doc = _set.__doc__)
##
##    def GetMinimumColumnWidth(self, col):
##        '-no docstring-'
##        #return pWidth
##
##    def GetMinimumRowHeight(self, row):
##        '-no docstring-'
##        #return pHeight
##
##    @property
##    def MinimumTableWidth(self):
##        '-no docstring-'
##        #return pWidth
##
##    @property
##    def MinimumTableHeight(self):
##        '-no docstring-'
##        #return pHeight
##
##    def _get(self):
##        '-no docstring-'
##        #return DirectionVector
##    def _set(self, DirectionVector):
##        '-no docstring-'
##    Direction = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bValue
##    def _set(self, bValue):
##        '-no docstring-'
##    TitleSuppressed = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bValue
##    def _set(self, bValue):
##        '-no docstring-'
##    HeaderSuppressed = property(_get, _set, doc = _set.__doc__)
##
##    def GetAlignment(self, rowType):
##        '-no docstring-'
##        #return pCellAlignment
##
##    def SetAlignment(self, rowTypes, cellAlignment):
##        '-no docstring-'
##        #return 
##
##    def GetBackgroundColorNone(self, rowType):
##        '-no docstring-'
##        #return bValue
##
##    def SetBackgroundColorNone(self, rowTypes, bValue):
##        '-no docstring-'
##        #return 
##
##    def GetBackgroundColor(self, rowType):
##        '-no docstring-'
##        #return pColor
##
##    def SetBackgroundColor(self, rowTypes, pColor):
##        '-no docstring-'
##        #return 
##
##    def GetContentColor(self, rowType):
##        '-no docstring-'
##        #return pColor
##
##    def SetContentColor(self, rowTypes, pColor):
##        '-no docstring-'
##        #return 
##
##    def GetTextStyle(self, rowType):
##        '-no docstring-'
##        #return bstrName
##
##    def SetTextStyle(self, rowTypes, bstrName):
##        '-no docstring-'
##        #return 
##
##    def GetTextHeight(self, rowType):
##        '-no docstring-'
##        #return pTextHeight
##
##    def SetTextHeight(self, rowTypes, TextHeight):
##        '-no docstring-'
##        #return 
##
##    def GetGridLineWeight(self, gridLineType, rowType):
##        '-no docstring-'
##        #return Lineweight
##
##    def SetGridLineWeight(self, gridLineTypes, rowTypes, Lineweight):
##        '-no docstring-'
##        #return 
##
##    def GetGridColor(self, gridLineType, rowType):
##        '-no docstring-'
##        #return pColor
##
##    def SetGridColor(self, gridLineTypes, rowTypes, pColor):
##        '-no docstring-'
##        #return 
##
##    def GetGridVisibility(self, gridLineType, rowType):
##        '-no docstring-'
##        #return bValue
##
##    def SetGridVisibility(self, gridLineTypes, rowTypes, bValue):
##        '-no docstring-'
##        #return 
##
##    @property
##    def TableStyleOverrides(self):
##        '-no docstring-'
##        #return pIntArray
##
##    def ClearTableStyleOverrides(self, flag):
##        '-no docstring-'
##        #return 
##
##    def GetCellType(self, row, col):
##        '-no docstring-'
##        #return pCellType
##
##    def SetCellType(self, row, col, CellType):
##        '-no docstring-'
##        #return 
##
##    def GetCellExtents(self, row, col, bOuterCell):
##        '-no docstring-'
##        #return pPts
##
##    def GetAttachmentPoint(self, row, col):
##        '-no docstring-'
##        #return pAttachmentPoint
##
##    def GetCellAlignment(self, row, col):
##        '-no docstring-'
##        #return pCellAlignment
##
##    def SetCellAlignment(self, row, col, cellAlignment):
##        '-no docstring-'
##        #return 
##
##    def GetCellBackgroundColorNone(self, row, col):
##        '-no docstring-'
##        #return bValue
##
##    def SetCellBackgroundColorNone(self, row, col, bValue):
##        '-no docstring-'
##        #return 
##
##    def GetCellBackgroundColor(self, row, col):
##        '-no docstring-'
##        #return pColor
##
##    def SetCellBackgroundColor(self, row, col, pColor):
##        '-no docstring-'
##        #return 
##
##    def GetCellContentColor(self, row, col):
##        '-no docstring-'
##        #return pColor
##
##    def SetCellContentColor(self, row, col, pColor):
##        '-no docstring-'
##        #return 
##
##    def GetCellStyleOverrides(self, row, col):
##        '-no docstring-'
##        #return pIntArray
##
##    def DeleteCellContent(self, row, col):
##        '-no docstring-'
##        #return 
##
##    def GetRowType(self, row):
##        '-no docstring-'
##        #return pRowType
##
##    def GetText(self, row, col):
##        '-no docstring-'
##        #return pStr
##
##    def SetText(self, row, col, pStr):
##        '-no docstring-'
##        #return 
##
##    def GetCellTextStyle(self, row, col):
##        '-no docstring-'
##        #return bstrName
##
##    def SetCellTextStyle(self, row, col, bstrName):
##        '-no docstring-'
##        #return 
##
##    def GetCellTextHeight(self, row, col):
##        '-no docstring-'
##        #return pTextHeight
##
##    def SetCellTextHeight(self, row, col, TextHeight):
##        '-no docstring-'
##        #return 
##
##    def GetTextRotation(self, row, col):
##        '-no docstring-'
##        #return TextRotation
##
##    def SetTextRotation(self, row, col, TextRotation):
##        '-no docstring-'
##        #return 
##
##    def GetAutoScale(self, row, col):
##        '-no docstring-'
##        #return bValue
##
##    def SetAutoScale(self, row, col, bValue):
##        '-no docstring-'
##        #return 
##
##    def GetBlockTableRecordId(self, row, col):
##        '-no docstring-'
##        #return blkId
##
##    def SetBlockTableRecordId(self, row, col, blkId, bAutoFit):
##        '-no docstring-'
##        #return 
##
##    def GetBlockScale(self, row, col):
##        '-no docstring-'
##        #return blkScale
##
##    def SetBlockScale(self, row, col, blkScale):
##        '-no docstring-'
##        #return 
##
##    def GetBlockRotation(self, row, col):
##        '-no docstring-'
##        #return blkRotation
##
##    def SetBlockRotation(self, row, col, blkRotation):
##        '-no docstring-'
##        #return 
##
##    def GetBlockAttributeValue(self, row, col, attdefId):
##        '-no docstring-'
##        #return bstrValue
##
##    def SetBlockAttributeValue(self, row, col, attdefId, bstrValue):
##        '-no docstring-'
##        #return 
##
##    def GetCellGridLineWeight(self, row, col, edge):
##        '-no docstring-'
##        #return plineweight
##
##    def SetCellGridLineWeight(self, row, col, edges, Lineweight):
##        '-no docstring-'
##        #return 
##
##    def GetCellGridColor(self, row, col, edge):
##        '-no docstring-'
##        #return pColor
##
##    def SetCellGridColor(self, row, col, edges, pColor):
##        '-no docstring-'
##        #return 
##
##    def GetCellGridVisibility(self, row, col, edge):
##        '-no docstring-'
##        #return bValue
##
##    def SetCellGridVisibility(self, row, col, edges, bValue):
##        '-no docstring-'
##        #return 
##
##    def InsertColumns(self, col, Width, cols):
##        '-no docstring-'
##        #return 
##
##    def DeleteColumns(self, col, cols):
##        '-no docstring-'
##        #return 
##
##    def InsertRows(self, row, Height, Rows):
##        '-no docstring-'
##        #return 
##
##    def DeleteRows(self, row, Rows):
##        '-no docstring-'
##        #return 
##
##    def MergeCells(self, minRow, maxRow, minCol, maxCol):
##        '-no docstring-'
##        #return 
##
##    def UnmergeCells(self, minRow, maxRow, minCol, maxCol):
##        '-no docstring-'
##        #return 
##
##    def IsMergedCell(self, row, col):
##        '-no docstring-'
##        #return minRow, maxRow, minCol, maxCol, pbValue
##
##    def GetFieldId(self, row, col):
##        '-no docstring-'
##        #return fieldId
##
##    def SetFieldId(self, row, col, fieldId):
##        '-no docstring-'
##        #return 
##
##    def GenerateLayout(self):
##        '-no docstring-'
##        #return 
##
##    def RecomputeTableBlock(self, bForceUpdate):
##        '-no docstring-'
##        #return 
##
##    def HitTest(self, wpt, wviewVec):
##        '-no docstring-'
##        #return resultRowIndex, resultColumnIndex, bReturn
##
##    def Select(self, wpt, wvwVec, wvwxVec, wxaper, wyaper, allowOutside):
##        '-no docstring-'
##        #return resultRowIndex, resultColumnIndex
##
##    def SelectSubRegion(self, wpt1, wpt2, wvwVec, wvwxVec, seltype, bIncludeCurrentSelection):
##        '-no docstring-'
##        #return rowMin, rowMax, colMin, colMax
##
##    def ReselectSubRegion(self):
##        '-no docstring-'
##        #return 
##
##    def GetSubSelection(self):
##        '-no docstring-'
##        #return rowMin, rowMax, colMin, colMax
##
##    def SetSubSelection(self, rowMin, rowMax, colMin, colMax):
##        '-no docstring-'
##        #return 
##
##    def ClearSubSelection(self):
##        '-no docstring-'
##        #return 
##
##    @property
##    def HasSubSelection(self):
##        '-no docstring-'
##        #return pbValue
##
##    def _get(self):
##        '-no docstring-'
##        #return bValue
##    def _set(self, bValue):
##        '-no docstring-'
##    RegenerateTableSuppressed = property(_get, _set, doc = _set.__doc__)
##
##    def GetDataType(self, rowType):
##        '-no docstring-'
##        #return pDataType, pUnitType
##
##    def SetDataType(self, rowTypes, dataType, unitType):
##        '-no docstring-'
##        #return 
##
##    def GetFormat(self, rowType):
##        '-no docstring-'
##        #return pFormat
##
##    def SetFormat(self, rowTypes, pFormat):
##        '-no docstring-'
##        #return 
##
##    def FormatValue(self, row, col, nOption, pVal):
##        '-no docstring-'
##        #return 
##
##    def GetCellDataType(self, row, col):
##        '-no docstring-'
##        #return pDataType, pUnitType
##
##    def SetCellDataType(self, row, col, dataType, unitType):
##        '-no docstring-'
##        #return 
##
##    def GetCellFormat(self, row, col):
##        '-no docstring-'
##        #return pFormat
##
##    def SetCellFormat(self, row, col, pFormat):
##        '-no docstring-'
##        #return 
##
##    def GetCellValue(self, row, col):
##        '-no docstring-'
##        #return pVal
##
##    def SetCellValue(self, row, col, val):
##        '-no docstring-'
##        #return 
##
##    def SetCellValueFromText(self, row, col, val, nOption):
##        '-no docstring-'
##        #return 
##
##    def ResetCellValue(self, row, col):
##        '-no docstring-'
##        #return 
##
##    def IsEmpty(self, nRow, nCol):
##        '-no docstring-'
##        #return bValue
##
##    def CreateContent(self, nRow, nCol, nIndex):
##        '-no docstring-'
##        #return pInt
##
##    def MoveContent(self, nRow, nCol, nFromIndex, nToIndex):
##        '-no docstring-'
##        #return 
##
##    def DeleteContent(self, nRow, nCol):
##        '-no docstring-'
##        #return 
##
##    def GetValue(self, nRow, nCol, nContent):
##        '-no docstring-'
##        #return pAcValue
##
##    def SetValue(self, nRow, nCol, nContent, acValue):
##        '-no docstring-'
##        #return 
##
##    def SetValueFromText(self, nRow, nCol, nContent, szText, nOption):
##        '-no docstring-'
##        #return 
##
##    def GetDataFormat(self, nRow, nCol, nContent):
##        '-no docstring-'
##        #return pValue
##
##    def SetDataFormat(self, nRow, nCol, nContent, szFormat):
##        '-no docstring-'
##        #return 
##
##    def GetTextString(self, nRow, nCol, nContent):
##        '-no docstring-'
##        #return pTextString
##
##    def SetTextString(self, nRow, nCol, nContent, Text):
##        '-no docstring-'
##        #return 
##
##    def GetFieldId2(self, nRow, nCol, nContent):
##        '-no docstring-'
##        #return pAcDbObjectId
##
##    def SetFieldId2(self, nRow, nCol, nContent, acDbObjectId, nflag):
##        '-no docstring-'
##        #return 
##
##    def GetBlockTableRecordId2(self, nRow, nCol, nContent):
##        '-no docstring-'
##        #return pAcDbObjectId
##
##    def SetBlockTableRecordId2(self, nRow, nCol, nContent, blkId, autoFit):
##        '-no docstring-'
##        #return 
##
##    def GetBlockAttributeValue2(self, nRow, nCol, nContent, blkId):
##        '-no docstring-'
##        #return Value
##
##    def SetBlockAttributeValue2(self, nRow, nCol, nContent, blkId, Value):
##        '-no docstring-'
##        #return 
##
##    def GetCustomData(self, nRow, nCol, szKey):
##        '-no docstring-'
##        #return pData
##
##    def SetCustomData(self, nRow, nCol, szKey, data):
##        '-no docstring-'
##        #return 
##
##    def GetCellStyle(self, nRow, nCol):
##        '-no docstring-'
##        #return pCellStyle
##
##    def SetCellStyle(self, nRow, nCol, szCellStyle):
##        '-no docstring-'
##        #return 
##
##    def GetContentColor2(self, nRow, nCol, nContent):
##        '-no docstring-'
##        #return pColor
##
##    def SetContentColor2(self, nRow, nCol, nContent, pColor):
##        '-no docstring-'
##        #return 
##
##    def GetDataType2(self, nRow, nCol, nContent):
##        '-no docstring-'
##        #return pDataType, pUnitType
##
##    def SetDataType2(self, nRow, nCol, nContent, dataType, unitType):
##        '-no docstring-'
##        #return 
##
##    def GetTextStyle2(self, nRow, nCol, nContent):
##        '-no docstring-'
##        #return pbstrStyleName
##
##    def SetTextStyle2(self, nRow, nCol, nContent, bstrStyleName):
##        '-no docstring-'
##        #return 
##
##    def GetTextHeight2(self, nRow, nCol, nContent):
##        '-no docstring-'
##        #return pHeight
##
##    def SetTextHeight2(self, nRow, nCol, nContent, Height):
##        '-no docstring-'
##        #return 
##
##    def GetRotation(self, nRow, nCol, nContent):
##        '-no docstring-'
##        #return pValue
##
##    def SetRotation(self, nRow, nCol, nContent, Value):
##        '-no docstring-'
##        #return 
##
##    def GetAutoScale2(self, nRow, nCol, nContent):
##        '-no docstring-'
##        #return bAutoScale
##
##    def SetAutoScale2(self, nRow, nCol, nContent, bAutoFit):
##        '-no docstring-'
##        #return 
##
##    def GetScale(self, nRow, nCol, nContent):
##        '-no docstring-'
##        #return pScale
##
##    def SetScale(self, nRow, nCol, nContent, scale):
##        '-no docstring-'
##        #return 
##
##    def RemoveAllOverrides(self, nRow, nCol):
##        '-no docstring-'
##        #return 
##
##    def GetGridLineWeight2(self, nRow, nCol, nGridLineType):
##        '-no docstring-'
##        #return plineweight
##
##    def SetGridLineWeight2(self, nRow, nCol, nGridLineType, Lineweight):
##        '-no docstring-'
##        #return 
##
##    def GetGridLinetype(self, nRow, nCol, nGridLineType):
##        '-no docstring-'
##        #return pacDbObjId
##
##    def SetGridLinetype(self, nRow, nCol, nGridLineType, idLinetype):
##        '-no docstring-'
##        #return 
##
##    def GetGridColor2(self, nRow, nCol, nGridLineType):
##        '-no docstring-'
##        #return pColor
##
##    def SetGridColor2(self, nRow, nCol, nGridLineType, pColor):
##        '-no docstring-'
##        #return 
##
##    def GetGridVisibility2(self, nRow, nCol, nGridLineType):
##        '-no docstring-'
##        #return bVisible
##
##    def SetGridVisibility2(self, nRow, nCol, nGridLineType, bVisible):
##        '-no docstring-'
##        #return 
##
##    def GetGridDoubleLineSpacing(self, nRow, nCol, nGridLineType):
##        '-no docstring-'
##        #return pValue
##
##    def SetGridDoubleLineSpacing(self, nRow, nCol, nGridLineType, fSpacing):
##        '-no docstring-'
##        #return 
##
##    def _set(self, rhs):
##        '-no docstring-'
##    EnableBreak = property(fset = _set, doc = _set.__doc__)
##
##    def GetBreakHeight(self, nIndex):
##        '-no docstring-'
##        #return pHeight
##
##    def SetBreakHeight(self, nIndex, Height):
##        '-no docstring-'
##        #return 
##
##    def GetContentType(self, nRow, nCol):
##        '-no docstring-'
##        #return pType
##
##    def GetMargin(self, nRow, nCol, nMargin):
##        '-no docstring-'
##        #return pValue
##
##    def SetMargin(self, nRow, nCol, nMargins, fMargin):
##        '-no docstring-'
##        #return 
##
##    def GetContentLayout(self, row, col):
##        '-no docstring-'
##        #return pLayout
##
##    def SetContentLayout(self, row, col, nLayout):
##        '-no docstring-'
##        #return 
##
##    def GetOverride(self, nRow, nCol, nContent):
##        '-no docstring-'
##        #return pValue
##
##    def SetOverride(self, nRow, nCol, nContent, nProp):
##        '-no docstring-'
##        #return 
##
##    def GetGridLineStyle(self, nRow, nCol, nGridLineType):
##        '-no docstring-'
##        #return pStyle
##
##    def SetGridLineStyle(self, nRow, nCol, nGridLineTypes, nLineStyle):
##        '-no docstring-'
##        #return 
##
##    def InsertRowsAndInherit(self, nIndex, nInheritFrom, nNumRows):
##        '-no docstring-'
##        #return 
##
##    def InsertColumnsAndInherit(self, col, nInheritFrom, nNumCols):
##        '-no docstring-'
##        #return 
##
##    def GetHasFormula(self, nRow, nCol, nContent):
##        '-no docstring-'
##        #return bValue
##
##    def GetFormula(self, nRow, nCol, nContent):
##        '-no docstring-'
##        #return pszFormula
##
##    def SetFormula(self, nRow, nCol, nContent, pszFormula):
##        '-no docstring-'
##        #return 
##
##    def IsContentEditable(self, nRow, nCol):
##        '-no docstring-'
##        #return bValue
##
##    def IsFormatEditable(self, nRow, nCol):
##        '-no docstring-'
##        #return bValue
##
##    def GetCellState(self, nRow, nCol):
##        '-no docstring-'
##        #return pCellState
##
##    def SetCellState(self, nRow, nCol, nLock):
##        '-no docstring-'
##        #return 
##
##    def EnableMergeAll(self, nRow, nCol, bEnable):
##        '-no docstring-'
##        #return 
##
##    def IsMergeAllEnabled(self, nRow, nCol):
##        '-no docstring-'
##        #return bValue
##
##    def _get(self):
##        '-no docstring-'
##        #return bEnabled
##    def _set(self, bEnabled):
##        '-no docstring-'
##    BreaksEnabled = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bEnabled
##    def _set(self, bEnabled):
##        '-no docstring-'
##    RepeatTopLabels = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bEnabled
##    def _set(self, bEnabled):
##        '-no docstring-'
##    RepeatBottomLabels = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pDir
##    def _set(self, pDir):
##        '-no docstring-'
##    TableBreakFlowDirection = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bEnabled
##    def _set(self, bEnabled):
##        '-no docstring-'
##    AllowManualPositions = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bEnabled
##    def _set(self, bEnabled):
##        '-no docstring-'
##    AllowManualHeights = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pHeight
##    def _set(self, pHeight):
##        '-no docstring-'
##    TableBreakHeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pSpacing
##    def _set(self, pSpacing):
##        '-no docstring-'
##    BreakSpacing = property(_get, _set, doc = _set.__doc__)
##
##    def GetColumnName(self, nIndex):
##        '-no docstring-'
##        #return Name
##
##    def SetColumnName(self, nIndex, Name):
##        '-no docstring-'
##        #return 
##
##    def SetToolTip(self, nRow, nCol, tip):
##        '-no docstring-'
##        #return 
##

class IAcadXline(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{8EB9FFF6-5191-418E-851D-2FF0E3ADA0F0}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadXline._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'BasePoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'BasePoint' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'BasePoint',
              ( ['in'], VARIANT, 'BasePoint' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'SecondPoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'SecondPoint' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'SecondPoint',
              ( ['in'], VARIANT, 'SecondPoint' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'DirectionVector',
              ( ['out', 'retval'], POINTER(VARIANT), 'dirVector' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'DirectionVector',
              ( ['in'], VARIANT, 'dirVector' )),
    COMMETHOD([dispid(4)], HRESULT, 'Offset',
              ( ['in'], c_double, 'Distance' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'pOffsetCurves' )),
]
################################################################
## code template for IAcadXline implementation
##class IAcadXline_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return BasePoint
##    def _set(self, BasePoint):
##        '-no docstring-'
##    BasePoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return SecondPoint
##    def _set(self, SecondPoint):
##        '-no docstring-'
##    SecondPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return dirVector
##    def _set(self, dirVector):
##        '-no docstring-'
##    DirectionVector = property(_get, _set, doc = _set.__doc__)
##
##    def Offset(self, Distance):
##        '-no docstring-'
##        #return pOffsetCurves
##

class IAcadDimRadialLarge(IAcadDimension):
    _case_insensitive_ = True
    _iid_ = GUID('{FB88D657-0421-4E94-BDDA-267B6663EB9C}')
    _idlflags_ = ['dual', 'oleautomation']

# values for enumeration 'AcDimUnits'
acDimScientific = 1
acDimDecimal = 2
acDimEngineering = 3
acDimArchitecturalStacked = 4
acDimFractionalStacked = 5
acDimArchitectural = 6
acDimFractional = 7
acDimWindowsDesktop = 8
AcDimUnits = c_int # enum

# values for enumeration 'AcDimCenterType'
acCenterMark = 0
acCenterLine = 1
acCenterNone = 2
AcDimCenterType = c_int # enum

# values for enumeration 'AcDimFractionType'
acHorizontal = 0
acDiagonal = 1
acNotStacked = 2
AcDimFractionType = c_int # enum

# values for enumeration 'AcDimLUnits'
acDimLScientific = 1
acDimLDecimal = 2
acDimLEngineering = 3
acDimLArchitectural = 4
acDimLFractional = 5
acDimLWindowsDesktop = 6
AcDimLUnits = c_int # enum
IAcadDimRadialLarge._methods_ = [
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'AltUnits',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bAlternate' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'AltUnits',
              ( ['in'], VARIANT_BOOL, 'bAlternate' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'AltUnitsPrecision',
              ( ['out', 'retval'], POINTER(AcDimPrecision), 'precision' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'AltUnitsPrecision',
              ( ['in'], AcDimPrecision, 'precision' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'AltUnitsScale',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'scale' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'AltUnitsScale',
              ( ['in'], ACAD_NOUNITS, 'scale' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'AltRoundDistance',
              ( ['out', 'retval'], POINTER(c_double), 'Distance' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'AltRoundDistance',
              ( ['in'], c_double, 'Distance' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'AltTolerancePrecision',
              ( ['out', 'retval'], POINTER(AcDimPrecision), 'Distance' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'AltTolerancePrecision',
              ( ['in'], AcDimPrecision, 'Distance' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'AltUnitsFormat',
              ( ['out', 'retval'], POINTER(AcDimUnits), 'Units' )),
    COMMETHOD([dispid(9), 'propput'], HRESULT, 'AltUnitsFormat',
              ( ['in'], AcDimUnits, 'Units' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'AltTextPrefix',
              ( ['out', 'retval'], POINTER(BSTR), 'prefix' )),
    COMMETHOD([dispid(11), 'propput'], HRESULT, 'AltTextPrefix',
              ( ['in'], BSTR, 'prefix' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'AltTextSuffix',
              ( ['out', 'retval'], POINTER(BSTR), 'prefix' )),
    COMMETHOD([dispid(12), 'propput'], HRESULT, 'AltTextSuffix',
              ( ['in'], BSTR, 'prefix' )),
    COMMETHOD([dispid(43), 'propget'], HRESULT, 'CenterType',
              ( ['out', 'retval'], POINTER(AcDimCenterType), 'Type' )),
    COMMETHOD([dispid(43), 'propput'], HRESULT, 'CenterType',
              ( ['in'], AcDimCenterType, 'Type' )),
    COMMETHOD([dispid(44), 'propget'], HRESULT, 'CenterMarkSize',
              ( ['out', 'retval'], POINTER(c_double), 'Type' )),
    COMMETHOD([dispid(44), 'propput'], HRESULT, 'CenterMarkSize',
              ( ['in'], c_double, 'Type' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'DimensionLineColor',
              ( ['out', 'retval'], POINTER(ACAD_COLOR), 'Type' )),
    COMMETHOD([dispid(13), 'propput'], HRESULT, 'DimensionLineColor',
              ( ['in'], ACAD_COLOR, 'Type' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'PrimaryUnitsPrecision',
              ( ['out', 'retval'], POINTER(AcDimPrecision), 'Prec' )),
    COMMETHOD([dispid(15), 'propput'], HRESULT, 'PrimaryUnitsPrecision',
              ( ['in'], AcDimPrecision, 'Prec' )),
    COMMETHOD([dispid(19), 'propget'], HRESULT, 'FractionFormat',
              ( ['out', 'retval'], POINTER(AcDimFractionType), 'Type' )),
    COMMETHOD([dispid(19), 'propput'], HRESULT, 'FractionFormat',
              ( ['in'], AcDimFractionType, 'Type' )),
    COMMETHOD([dispid(18), 'propget'], HRESULT, 'Fit',
              ( ['out', 'retval'], POINTER(AcDimFit), 'fittype' )),
    COMMETHOD([dispid(18), 'propput'], HRESULT, 'Fit',
              ( ['in'], AcDimFit, 'fittype' )),
    COMMETHOD([dispid(21), 'propget'], HRESULT, 'LinearScaleFactor',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'Type' )),
    COMMETHOD([dispid(21), 'propput'], HRESULT, 'LinearScaleFactor',
              ( ['in'], ACAD_NOUNITS, 'Type' )),
    COMMETHOD([dispid(22), 'propget'], HRESULT, 'UnitsFormat',
              ( ['out', 'retval'], POINTER(AcDimLUnits), 'format' )),
    COMMETHOD([dispid(22), 'propput'], HRESULT, 'UnitsFormat',
              ( ['in'], AcDimLUnits, 'format' )),
    COMMETHOD([dispid(24), 'propget'], HRESULT, 'RoundDistance',
              ( ['out', 'retval'], POINTER(c_double), 'Distance' )),
    COMMETHOD([dispid(24), 'propput'], HRESULT, 'RoundDistance',
              ( ['in'], c_double, 'Distance' )),
    COMMETHOD([dispid(26), 'propget'], HRESULT, 'DimLineSuppress',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress' )),
    COMMETHOD([dispid(26), 'propput'], HRESULT, 'DimLineSuppress',
              ( ['in'], VARIANT_BOOL, 'bSuppress' )),
    COMMETHOD([dispid(30), 'propget'], HRESULT, 'TextInsideAlign',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(30), 'propput'], HRESULT, 'TextInsideAlign',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(31), 'propget'], HRESULT, 'TextInside',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(31), 'propput'], HRESULT, 'TextInside',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(32), 'propget'], HRESULT, 'ForceLineInside',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(32), 'propput'], HRESULT, 'ForceLineInside',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(33), 'propget'], HRESULT, 'TextOutsideAlign',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(33), 'propput'], HRESULT, 'TextOutsideAlign',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(48), 'propget'], HRESULT, 'AltSuppressLeadingZeros',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(48), 'propput'], HRESULT, 'AltSuppressLeadingZeros',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(49), 'propget'], HRESULT, 'AltSuppressTrailingZeros',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(49), 'propput'], HRESULT, 'AltSuppressTrailingZeros',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(50), 'propget'], HRESULT, 'AltSuppressZeroFeet',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(50), 'propput'], HRESULT, 'AltSuppressZeroFeet',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(51), 'propget'], HRESULT, 'AltSuppressZeroInches',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(51), 'propput'], HRESULT, 'AltSuppressZeroInches',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(52), 'propget'], HRESULT, 'AltToleranceSuppressLeadingZeros',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(52), 'propput'], HRESULT, 'AltToleranceSuppressLeadingZeros',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(53), 'propget'], HRESULT, 'AltToleranceSuppressTrailingZeros',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(53), 'propput'], HRESULT, 'AltToleranceSuppressTrailingZeros',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(54), 'propget'], HRESULT, 'AltToleranceSuppressZeroFeet',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(54), 'propput'], HRESULT, 'AltToleranceSuppressZeroFeet',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(55), 'propget'], HRESULT, 'AltToleranceSuppressZeroInches',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(55), 'propput'], HRESULT, 'AltToleranceSuppressZeroInches',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(56), 'propget'], HRESULT, 'SuppressZeroFeet',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(56), 'propput'], HRESULT, 'SuppressZeroFeet',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(57), 'propget'], HRESULT, 'SuppressZeroInches',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(57), 'propput'], HRESULT, 'SuppressZeroInches',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(58), 'propget'], HRESULT, 'ToleranceSuppressZeroFeet',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(58), 'propput'], HRESULT, 'ToleranceSuppressZeroFeet',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(59), 'propget'], HRESULT, 'ToleranceSuppressZeroInches',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(59), 'propput'], HRESULT, 'ToleranceSuppressZeroInches',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(60), 'propget'], HRESULT, 'DimensionLineWeight',
              ( ['out', 'retval'], POINTER(ACAD_LWEIGHT), 'weight' )),
    COMMETHOD([dispid(60), 'propput'], HRESULT, 'DimensionLineWeight',
              ( ['in'], ACAD_LWEIGHT, 'weight' )),
    COMMETHOD([dispid(61), 'propget'], HRESULT, 'ArrowheadSize',
              ( ['out', 'retval'], POINTER(c_double), 'size' )),
    COMMETHOD([dispid(61), 'propput'], HRESULT, 'ArrowheadSize',
              ( ['in'], c_double, 'size' )),
    COMMETHOD([dispid(63), 'propget'], HRESULT, 'ArrowheadType',
              ( ['out', 'retval'], POINTER(AcDimArrowheadType), 'Type' )),
    COMMETHOD([dispid(63), 'propput'], HRESULT, 'ArrowheadType',
              ( ['in'], AcDimArrowheadType, 'Type' )),
    COMMETHOD([dispid(64), 'propget'], HRESULT, 'Measurement',
              ( ['out', 'retval'], POINTER(c_double), 'bVal' )),
    COMMETHOD([dispid(66), 'nonbrowsable', 'propget'], HRESULT, 'ArrowheadBlock',
              ( ['out', 'retval'], POINTER(BSTR), 'BlockName' )),
    COMMETHOD([dispid(66), 'nonbrowsable', 'propput'], HRESULT, 'ArrowheadBlock',
              ( ['in'], BSTR, 'BlockName' )),
    COMMETHOD([dispid(68), 'propget'], HRESULT, 'OverrideCenter',
              ( ['out', 'retval'], POINTER(VARIANT), 'overrideCenterPos' )),
    COMMETHOD([dispid(68), 'propput'], HRESULT, 'OverrideCenter',
              ( ['in'], VARIANT, 'overrideCenterPos' )),
    COMMETHOD([dispid(69), 'propget'], HRESULT, 'JogLocation',
              ( ['out', 'retval'], POINTER(VARIANT), 'jogPos' )),
    COMMETHOD([dispid(69), 'propput'], HRESULT, 'JogLocation',
              ( ['in'], VARIANT, 'jogPos' )),
    COMMETHOD([dispid(70), 'propget'], HRESULT, 'JogAngle',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'JogAngle' )),
    COMMETHOD([dispid(70), 'propput'], HRESULT, 'JogAngle',
              ( ['in'], ACAD_ANGLE, 'JogAngle' )),
    COMMETHOD([dispid(71), 'propget'], HRESULT, 'Center',
              ( ['out', 'retval'], POINTER(VARIANT), 'pVar' )),
    COMMETHOD([dispid(71), 'propput'], HRESULT, 'Center',
              ( ['in'], VARIANT, 'pVar' )),
    COMMETHOD([dispid(72), 'propget'], HRESULT, 'ChordPoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD([dispid(72), 'propput'], HRESULT, 'ChordPoint',
              ( ['in'], VARIANT, 'pVal' )),
    COMMETHOD([dispid(80), 'propget'], HRESULT, 'DimensionLinetype',
              ( ['out', 'retval'], POINTER(BSTR), 'Linetype' )),
    COMMETHOD([dispid(80), 'propput'], HRESULT, 'DimensionLinetype',
              ( ['in'], BSTR, 'Linetype' )),
]
################################################################
## code template for IAcadDimRadialLarge implementation
##class IAcadDimRadialLarge_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return bAlternate
##    def _set(self, bAlternate):
##        '-no docstring-'
##    AltUnits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return precision
##    def _set(self, precision):
##        '-no docstring-'
##    AltUnitsPrecision = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return scale
##    def _set(self, scale):
##        '-no docstring-'
##    AltUnitsScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Distance
##    def _set(self, Distance):
##        '-no docstring-'
##    AltRoundDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Distance
##    def _set(self, Distance):
##        '-no docstring-'
##    AltTolerancePrecision = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Units
##    def _set(self, Units):
##        '-no docstring-'
##    AltUnitsFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return prefix
##    def _set(self, prefix):
##        '-no docstring-'
##    AltTextPrefix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return prefix
##    def _set(self, prefix):
##        '-no docstring-'
##    AltTextSuffix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    CenterType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    CenterMarkSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    DimensionLineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Prec
##    def _set(self, Prec):
##        '-no docstring-'
##    PrimaryUnitsPrecision = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    FractionFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return fittype
##    def _set(self, fittype):
##        '-no docstring-'
##    Fit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    LinearScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return format
##    def _set(self, format):
##        '-no docstring-'
##    UnitsFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Distance
##    def _set(self, Distance):
##        '-no docstring-'
##    RoundDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bSuppress
##    def _set(self, bSuppress):
##        '-no docstring-'
##    DimLineSuppress = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    TextInsideAlign = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    TextInside = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    ForceLineInside = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    TextOutsideAlign = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltSuppressLeadingZeros = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltSuppressTrailingZeros = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltToleranceSuppressLeadingZeros = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltToleranceSuppressTrailingZeros = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltToleranceSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltToleranceSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    SuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    SuppressZeroInches = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    ToleranceSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    ToleranceSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return weight
##    def _set(self, weight):
##        '-no docstring-'
##    DimensionLineWeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return size
##    def _set(self, size):
##        '-no docstring-'
##    ArrowheadSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    ArrowheadType = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Measurement(self):
##        '-no docstring-'
##        #return bVal
##
##    def _get(self):
##        '-no docstring-'
##        #return BlockName
##    def _set(self, BlockName):
##        '-no docstring-'
##    ArrowheadBlock = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return overrideCenterPos
##    def _set(self, overrideCenterPos):
##        '-no docstring-'
##    OverrideCenter = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return jogPos
##    def _set(self, jogPos):
##        '-no docstring-'
##    JogLocation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return JogAngle
##    def _set(self, JogAngle):
##        '-no docstring-'
##    JogAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVar
##    def _set(self, pVar):
##        '-no docstring-'
##    Center = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    ChordPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Linetype
##    def _set(self, Linetype):
##        '-no docstring-'
##    DimensionLinetype = property(_get, _set, doc = _set.__doc__)
##

class IAcad3DFace(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{9E90071E-1E01-44B6-9A99-3FB911453352}')
    _idlflags_ = ['dual', 'oleautomation']
IAcad3DFace._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Coordinates',
              ( ['out', 'retval'], POINTER(VARIANT), 'corners' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'Coordinates',
              ( ['in'], VARIANT, 'corners' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'VisibilityEdge1',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'visibility' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'VisibilityEdge1',
              ( ['in'], VARIANT_BOOL, 'visibility' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'VisibilityEdge2',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'visibility' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'VisibilityEdge2',
              ( ['in'], VARIANT_BOOL, 'visibility' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'VisibilityEdge3',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'visibility' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'VisibilityEdge3',
              ( ['in'], VARIANT_BOOL, 'visibility' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'VisibilityEdge4',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'visibility' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'VisibilityEdge4',
              ( ['in'], VARIANT_BOOL, 'visibility' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetInvisibleEdge',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVisible' )),
    COMMETHOD([dispid(7)], HRESULT, 'SetInvisibleEdge',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], VARIANT_BOOL, 'State' )),
    COMMETHOD([dispid(8), 'nonbrowsable', 'propget'], HRESULT, 'Coordinate',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD([dispid(8), 'nonbrowsable', 'propput'], HRESULT, 'Coordinate',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], VARIANT, 'pVal' )),
]
################################################################
## code template for IAcad3DFace implementation
##class IAcad3DFace_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return corners
##    def _set(self, corners):
##        '-no docstring-'
##    Coordinates = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return visibility
##    def _set(self, visibility):
##        '-no docstring-'
##    VisibilityEdge1 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return visibility
##    def _set(self, visibility):
##        '-no docstring-'
##    VisibilityEdge2 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return visibility
##    def _set(self, visibility):
##        '-no docstring-'
##    VisibilityEdge3 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return visibility
##    def _set(self, visibility):
##        '-no docstring-'
##    VisibilityEdge4 = property(_get, _set, doc = _set.__doc__)
##
##    def GetInvisibleEdge(self, Index):
##        '-no docstring-'
##        #return bVisible
##
##    def SetInvisibleEdge(self, Index, State):
##        '-no docstring-'
##        #return 
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return pVal
##    def _set(self, Index, pVal):
##        '-no docstring-'
##    Coordinate = property(_get, _set, doc = _set.__doc__)
##

class IAcadPolygonMesh(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{626CDFD0-9BCF-4FB8-9A65-DA17BC86B42B}')
    _idlflags_ = ['dual', 'oleautomation']

# values for enumeration 'AcPolymeshType'
acSimpleMesh = 0
acQuadSurfaceMesh = 5
acCubicSurfaceMesh = 6
acBezierSurfaceMesh = 8
AcPolymeshType = c_int # enum
IAcadPolygonMesh._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Coordinates',
              ( ['out', 'retval'], POINTER(VARIANT), 'Coordinates' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'Coordinates',
              ( ['in'], VARIANT, 'Coordinates' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'MClose',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bClose' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'MClose',
              ( ['in'], VARIANT_BOOL, 'bClose' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'NClose',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bClose' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'NClose',
              ( ['in'], VARIANT_BOOL, 'bClose' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'MDensity',
              ( ['out', 'retval'], POINTER(c_int), 'density' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'MDensity',
              ( ['in'], c_int, 'density' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'NDensity',
              ( ['out', 'retval'], POINTER(c_int), 'density' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'NDensity',
              ( ['in'], c_int, 'density' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'MVertexCount',
              ( ['out', 'retval'], POINTER(c_int), 'Count' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'NVertexCount',
              ( ['out', 'retval'], POINTER(c_int), 'Count' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AcPolymeshType), 'Type' )),
    COMMETHOD([dispid(8), 'propput'], HRESULT, 'Type',
              ( ['in'], AcPolymeshType, 'Type' )),
    COMMETHOD([dispid(9)], HRESULT, 'AppendVertex',
              ( ['in'], VARIANT, 'vertex' )),
    COMMETHOD([dispid(10)], HRESULT, 'Explode',
              ( ['out', 'retval'], POINTER(VARIANT), 'pArrayObjs' )),
    COMMETHOD([dispid(11), 'nonbrowsable', 'propget'], HRESULT, 'Coordinate',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD([dispid(11), 'nonbrowsable', 'propput'], HRESULT, 'Coordinate',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], VARIANT, 'pVal' )),
]
################################################################
## code template for IAcadPolygonMesh implementation
##class IAcadPolygonMesh_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Coordinates
##    def _set(self, Coordinates):
##        '-no docstring-'
##    Coordinates = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bClose
##    def _set(self, bClose):
##        '-no docstring-'
##    MClose = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bClose
##    def _set(self, bClose):
##        '-no docstring-'
##    NClose = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return density
##    def _set(self, density):
##        '-no docstring-'
##    MDensity = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return density
##    def _set(self, density):
##        '-no docstring-'
##    NDensity = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MVertexCount(self):
##        '-no docstring-'
##        #return Count
##
##    @property
##    def NVertexCount(self):
##        '-no docstring-'
##        #return Count
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    Type = property(_get, _set, doc = _set.__doc__)
##
##    def AppendVertex(self, vertex):
##        '-no docstring-'
##        #return 
##
##    def Explode(self):
##        '-no docstring-'
##        #return pArrayObjs
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return pVal
##    def _set(self, Index, pVal):
##        '-no docstring-'
##    Coordinate = property(_get, _set, doc = _set.__doc__)
##

class IAcadDimArcLength(IAcadDimension):
    _case_insensitive_ = True
    _iid_ = GUID('{F529C8B5-977E-401D-9136-D69C74D9761B}')
    _idlflags_ = ['dual', 'oleautomation']

# values for enumeration 'AcDimArcLengthSymbol'
acSymInFront = 0
acSymAbove = 1
acSymNone = 2
AcDimArcLengthSymbol = c_int # enum
IAcadDimArcLength._methods_ = [
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'AltUnits',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bAlternate' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'AltUnits',
              ( ['in'], VARIANT_BOOL, 'bAlternate' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'AltUnitsPrecision',
              ( ['out', 'retval'], POINTER(AcDimPrecision), 'precision' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'AltUnitsPrecision',
              ( ['in'], AcDimPrecision, 'precision' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'AltUnitsScale',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'scale' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'AltUnitsScale',
              ( ['in'], ACAD_NOUNITS, 'scale' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'AltRoundDistance',
              ( ['out', 'retval'], POINTER(c_double), 'Distance' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'AltRoundDistance',
              ( ['in'], c_double, 'Distance' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'AltTolerancePrecision',
              ( ['out', 'retval'], POINTER(AcDimPrecision), 'Distance' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'AltTolerancePrecision',
              ( ['in'], AcDimPrecision, 'Distance' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'AltUnitsFormat',
              ( ['out', 'retval'], POINTER(AcDimUnits), 'Units' )),
    COMMETHOD([dispid(9), 'propput'], HRESULT, 'AltUnitsFormat',
              ( ['in'], AcDimUnits, 'Units' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'AltTextPrefix',
              ( ['out', 'retval'], POINTER(BSTR), 'prefix' )),
    COMMETHOD([dispid(11), 'propput'], HRESULT, 'AltTextPrefix',
              ( ['in'], BSTR, 'prefix' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'AltTextSuffix',
              ( ['out', 'retval'], POINTER(BSTR), 'prefix' )),
    COMMETHOD([dispid(12), 'propput'], HRESULT, 'AltTextSuffix',
              ( ['in'], BSTR, 'prefix' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'DimensionLineColor',
              ( ['out', 'retval'], POINTER(ACAD_COLOR), 'Type' )),
    COMMETHOD([dispid(13), 'propput'], HRESULT, 'DimensionLineColor',
              ( ['in'], ACAD_COLOR, 'Type' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'ExtensionLineColor',
              ( ['out', 'retval'], POINTER(ACAD_COLOR), 'Type' )),
    COMMETHOD([dispid(14), 'propput'], HRESULT, 'ExtensionLineColor',
              ( ['in'], ACAD_COLOR, 'Type' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'PrimaryUnitsPrecision',
              ( ['out', 'retval'], POINTER(AcDimPrecision), 'Prec' )),
    COMMETHOD([dispid(15), 'propput'], HRESULT, 'PrimaryUnitsPrecision',
              ( ['in'], AcDimPrecision, 'Prec' )),
    COMMETHOD([dispid(16), 'propget'], HRESULT, 'DimensionLineExtend',
              ( ['out', 'retval'], POINTER(c_double), 'extend' )),
    COMMETHOD([dispid(16), 'propput'], HRESULT, 'DimensionLineExtend',
              ( ['in'], c_double, 'extend' )),
    COMMETHOD([dispid(17), 'propget'], HRESULT, 'ExtensionLineExtend',
              ( ['out', 'retval'], POINTER(c_double), 'extend' )),
    COMMETHOD([dispid(17), 'propput'], HRESULT, 'ExtensionLineExtend',
              ( ['in'], c_double, 'extend' )),
    COMMETHOD([dispid(18), 'propget'], HRESULT, 'Fit',
              ( ['out', 'retval'], POINTER(AcDimFit), 'fittype' )),
    COMMETHOD([dispid(18), 'propput'], HRESULT, 'Fit',
              ( ['in'], AcDimFit, 'fittype' )),
    COMMETHOD([dispid(19), 'propget'], HRESULT, 'FractionFormat',
              ( ['out', 'retval'], POINTER(AcDimFractionType), 'Type' )),
    COMMETHOD([dispid(19), 'propput'], HRESULT, 'FractionFormat',
              ( ['in'], AcDimFractionType, 'Type' )),
    COMMETHOD([dispid(20), 'propget'], HRESULT, 'HorizontalTextPosition',
              ( ['out', 'retval'], POINTER(AcDimHorizontalJustification), 'Type' )),
    COMMETHOD([dispid(20), 'propput'], HRESULT, 'HorizontalTextPosition',
              ( ['in'], AcDimHorizontalJustification, 'Type' )),
    COMMETHOD([dispid(21), 'propget'], HRESULT, 'LinearScaleFactor',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'Type' )),
    COMMETHOD([dispid(21), 'propput'], HRESULT, 'LinearScaleFactor',
              ( ['in'], ACAD_NOUNITS, 'Type' )),
    COMMETHOD([dispid(22), 'propget'], HRESULT, 'UnitsFormat',
              ( ['out', 'retval'], POINTER(AcDimLUnits), 'format' )),
    COMMETHOD([dispid(22), 'propput'], HRESULT, 'UnitsFormat',
              ( ['in'], AcDimLUnits, 'format' )),
    COMMETHOD([dispid(23), 'propget'], HRESULT, 'ExtensionLineWeight',
              ( ['out', 'retval'], POINTER(ACAD_LWEIGHT), 'lweight' )),
    COMMETHOD([dispid(23), 'propput'], HRESULT, 'ExtensionLineWeight',
              ( ['in'], ACAD_LWEIGHT, 'lweight' )),
    COMMETHOD([dispid(24), 'propget'], HRESULT, 'RoundDistance',
              ( ['out', 'retval'], POINTER(c_double), 'Distance' )),
    COMMETHOD([dispid(24), 'propput'], HRESULT, 'RoundDistance',
              ( ['in'], c_double, 'Distance' )),
    COMMETHOD([dispid(25), 'propget'], HRESULT, 'DimLine1Suppress',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress' )),
    COMMETHOD([dispid(25), 'propput'], HRESULT, 'DimLine1Suppress',
              ( ['in'], VARIANT_BOOL, 'bSuppress' )),
    COMMETHOD([dispid(26), 'propget'], HRESULT, 'DimLine2Suppress',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress' )),
    COMMETHOD([dispid(26), 'propput'], HRESULT, 'DimLine2Suppress',
              ( ['in'], VARIANT_BOOL, 'bSuppress' )),
    COMMETHOD([dispid(27), 'propget'], HRESULT, 'ExtLine1Suppress',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress' )),
    COMMETHOD([dispid(27), 'propput'], HRESULT, 'ExtLine1Suppress',
              ( ['in'], VARIANT_BOOL, 'bSuppress' )),
    COMMETHOD([dispid(28), 'propget'], HRESULT, 'ExtLine2Suppress',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress' )),
    COMMETHOD([dispid(28), 'propput'], HRESULT, 'ExtLine2Suppress',
              ( ['in'], VARIANT_BOOL, 'bSuppress' )),
    COMMETHOD([dispid(29), 'propget'], HRESULT, 'DimLineInside',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(29), 'propput'], HRESULT, 'DimLineInside',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(30), 'propget'], HRESULT, 'TextInsideAlign',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(30), 'propput'], HRESULT, 'TextInsideAlign',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(31), 'propget'], HRESULT, 'TextInside',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(31), 'propput'], HRESULT, 'TextInside',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(32), 'propget'], HRESULT, 'ForceLineInside',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(32), 'propput'], HRESULT, 'ForceLineInside',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(33), 'propget'], HRESULT, 'TextOutsideAlign',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(33), 'propput'], HRESULT, 'TextOutsideAlign',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(35), 'propget'], HRESULT, 'ExtensionLineOffset',
              ( ['out', 'retval'], POINTER(c_double), 'Offset' )),
    COMMETHOD([dispid(35), 'propput'], HRESULT, 'ExtensionLineOffset',
              ( ['in'], c_double, 'Offset' )),
    COMMETHOD([dispid(48), 'propget'], HRESULT, 'AltSuppressLeadingZeros',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(48), 'propput'], HRESULT, 'AltSuppressLeadingZeros',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(49), 'propget'], HRESULT, 'AltSuppressTrailingZeros',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(49), 'propput'], HRESULT, 'AltSuppressTrailingZeros',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(50), 'propget'], HRESULT, 'AltSuppressZeroFeet',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(50), 'propput'], HRESULT, 'AltSuppressZeroFeet',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(51), 'propget'], HRESULT, 'AltSuppressZeroInches',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(51), 'propput'], HRESULT, 'AltSuppressZeroInches',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(52), 'propget'], HRESULT, 'AltToleranceSuppressLeadingZeros',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(52), 'propput'], HRESULT, 'AltToleranceSuppressLeadingZeros',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(53), 'propget'], HRESULT, 'AltToleranceSuppressTrailingZeros',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(53), 'propput'], HRESULT, 'AltToleranceSuppressTrailingZeros',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(54), 'propget'], HRESULT, 'AltToleranceSuppressZeroFeet',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(54), 'propput'], HRESULT, 'AltToleranceSuppressZeroFeet',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(55), 'propget'], HRESULT, 'AltToleranceSuppressZeroInches',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(55), 'propput'], HRESULT, 'AltToleranceSuppressZeroInches',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(56), 'propget'], HRESULT, 'SuppressZeroFeet',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(56), 'propput'], HRESULT, 'SuppressZeroFeet',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(57), 'propget'], HRESULT, 'SuppressZeroInches',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(57), 'propput'], HRESULT, 'SuppressZeroInches',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(58), 'propget'], HRESULT, 'ToleranceSuppressZeroFeet',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(58), 'propput'], HRESULT, 'ToleranceSuppressZeroFeet',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(59), 'propget'], HRESULT, 'ToleranceSuppressZeroInches',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(59), 'propput'], HRESULT, 'ToleranceSuppressZeroInches',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(60), 'propget'], HRESULT, 'DimensionLineWeight',
              ( ['out', 'retval'], POINTER(ACAD_LWEIGHT), 'weight' )),
    COMMETHOD([dispid(60), 'propput'], HRESULT, 'DimensionLineWeight',
              ( ['in'], ACAD_LWEIGHT, 'weight' )),
    COMMETHOD([dispid(61), 'propget'], HRESULT, 'ArrowheadSize',
              ( ['out', 'retval'], POINTER(c_double), 'size' )),
    COMMETHOD([dispid(61), 'propput'], HRESULT, 'ArrowheadSize',
              ( ['in'], c_double, 'size' )),
    COMMETHOD([dispid(62), 'propget'], HRESULT, 'Arrowhead1Type',
              ( ['out', 'retval'], POINTER(AcDimArrowheadType), 'Type' )),
    COMMETHOD([dispid(62), 'propput'], HRESULT, 'Arrowhead1Type',
              ( ['in'], AcDimArrowheadType, 'Type' )),
    COMMETHOD([dispid(63), 'propget'], HRESULT, 'Arrowhead2Type',
              ( ['out', 'retval'], POINTER(AcDimArrowheadType), 'Type' )),
    COMMETHOD([dispid(63), 'propput'], HRESULT, 'Arrowhead2Type',
              ( ['in'], AcDimArrowheadType, 'Type' )),
    COMMETHOD([dispid(64), 'propget'], HRESULT, 'Measurement',
              ( ['out', 'retval'], POINTER(c_double), 'bVal' )),
    COMMETHOD([dispid(65), 'nonbrowsable', 'propget'], HRESULT, 'Arrowhead1Block',
              ( ['out', 'retval'], POINTER(BSTR), 'BlockName' )),
    COMMETHOD([dispid(65), 'nonbrowsable', 'propput'], HRESULT, 'Arrowhead1Block',
              ( ['in'], BSTR, 'BlockName' )),
    COMMETHOD([dispid(66), 'nonbrowsable', 'propget'], HRESULT, 'Arrowhead2Block',
              ( ['out', 'retval'], POINTER(BSTR), 'BlockName' )),
    COMMETHOD([dispid(66), 'nonbrowsable', 'propput'], HRESULT, 'Arrowhead2Block',
              ( ['in'], BSTR, 'BlockName' )),
    COMMETHOD([dispid(68), 'propget'], HRESULT, 'ArcPoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD([dispid(68), 'propput'], HRESULT, 'ArcPoint',
              ( ['in'], VARIANT, 'pVal' )),
    COMMETHOD([dispid(69), 'propget'], HRESULT, 'ExtLine1Point',
              ( ['out', 'retval'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD([dispid(69), 'propput'], HRESULT, 'ExtLine1Point',
              ( ['in'], VARIANT, 'pVal' )),
    COMMETHOD([dispid(70), 'propget'], HRESULT, 'ExtLine2Point',
              ( ['out', 'retval'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD([dispid(70), 'propput'], HRESULT, 'ExtLine2Point',
              ( ['in'], VARIANT, 'pVal' )),
    COMMETHOD([dispid(71), 'propget'], HRESULT, 'CenterPoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD([dispid(71), 'propput'], HRESULT, 'CenterPoint',
              ( ['in'], VARIANT, 'pVal' )),
    COMMETHOD([dispid(72), 'propget'], HRESULT, 'Leader1Point',
              ( ['out', 'retval'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD([dispid(72), 'propput'], HRESULT, 'Leader1Point',
              ( ['in'], VARIANT, 'pVal' )),
    COMMETHOD([dispid(73), 'propget'], HRESULT, 'Leader2Point',
              ( ['out', 'retval'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD([dispid(73), 'propput'], HRESULT, 'Leader2Point',
              ( ['in'], VARIANT, 'pVal' )),
    COMMETHOD([dispid(74), 'propget'], HRESULT, 'IsPartial',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal' )),
    COMMETHOD([dispid(74), 'propput'], HRESULT, 'IsPartial',
              ( ['in'], VARIANT_BOOL, 'pVal' )),
    COMMETHOD([dispid(75), 'propget'], HRESULT, 'ArcStartParam',
              ( ['out', 'retval'], POINTER(c_double), 'pVal' )),
    COMMETHOD([dispid(75), 'propput'], HRESULT, 'ArcStartParam',
              ( ['in'], c_double, 'pVal' )),
    COMMETHOD([dispid(76), 'propget'], HRESULT, 'ArcEndParam',
              ( ['out', 'retval'], POINTER(c_double), 'pVal' )),
    COMMETHOD([dispid(76), 'propput'], HRESULT, 'ArcEndParam',
              ( ['in'], c_double, 'pVal' )),
    COMMETHOD([dispid(77), 'propget'], HRESULT, 'HasLeader',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal' )),
    COMMETHOD([dispid(77), 'propput'], HRESULT, 'HasLeader',
              ( ['in'], VARIANT_BOOL, 'pVal' )),
    COMMETHOD([dispid(67), 'propget'], HRESULT, 'SymbolPosition',
              ( ['out', 'retval'], POINTER(AcDimArcLengthSymbol), 'Position' )),
    COMMETHOD([dispid(67), 'propput'], HRESULT, 'SymbolPosition',
              ( ['in'], AcDimArcLengthSymbol, 'Position' )),
    COMMETHOD([dispid(80), 'propget'], HRESULT, 'DimensionLinetype',
              ( ['out', 'retval'], POINTER(BSTR), 'Linetype' )),
    COMMETHOD([dispid(80), 'propput'], HRESULT, 'DimensionLinetype',
              ( ['in'], BSTR, 'Linetype' )),
    COMMETHOD([dispid(81), 'propget'], HRESULT, 'ExtLine1Linetype',
              ( ['out', 'retval'], POINTER(BSTR), 'Linetype' )),
    COMMETHOD([dispid(81), 'propput'], HRESULT, 'ExtLine1Linetype',
              ( ['in'], BSTR, 'Linetype' )),
    COMMETHOD([dispid(82), 'propget'], HRESULT, 'ExtLine2Linetype',
              ( ['out', 'retval'], POINTER(BSTR), 'Linetype' )),
    COMMETHOD([dispid(82), 'propput'], HRESULT, 'ExtLine2Linetype',
              ( ['in'], BSTR, 'Linetype' )),
    COMMETHOD([dispid(83), 'propget'], HRESULT, 'ExtLineFixedLenSuppress',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bFixedLen' )),
    COMMETHOD([dispid(83), 'propput'], HRESULT, 'ExtLineFixedLenSuppress',
              ( ['in'], VARIANT_BOOL, 'bFixedLen' )),
    COMMETHOD([dispid(84), 'propget'], HRESULT, 'ExtLineFixedLen',
              ( ['out', 'retval'], POINTER(c_double), 'FixedLen' )),
    COMMETHOD([dispid(84), 'propput'], HRESULT, 'ExtLineFixedLen',
              ( ['in'], c_double, 'FixedLen' )),
    COMMETHOD([dispid(1574), 'propget'], HRESULT, 'SubUnitsSuffix',
              ( ['out', 'retval'], POINTER(BSTR), 'suffix' )),
    COMMETHOD([dispid(1574), 'propput'], HRESULT, 'SubUnitsSuffix',
              ( ['in'], BSTR, 'suffix' )),
    COMMETHOD([dispid(1575), 'propget'], HRESULT, 'SubUnitsFactor',
              ( ['out', 'retval'], POINTER(c_double), 'factor' )),
    COMMETHOD([dispid(1575), 'propput'], HRESULT, 'SubUnitsFactor',
              ( ['in'], c_double, 'factor' )),
    COMMETHOD([dispid(1576), 'propget'], HRESULT, 'AltSubUnitsSuffix',
              ( ['out', 'retval'], POINTER(BSTR), 'suffix' )),
    COMMETHOD([dispid(1576), 'propput'], HRESULT, 'AltSubUnitsSuffix',
              ( ['in'], BSTR, 'suffix' )),
    COMMETHOD([dispid(1577), 'propget'], HRESULT, 'AltSubUnitsFactor',
              ( ['out', 'retval'], POINTER(c_double), 'factor' )),
    COMMETHOD([dispid(1577), 'propput'], HRESULT, 'AltSubUnitsFactor',
              ( ['in'], c_double, 'factor' )),
]
################################################################
## code template for IAcadDimArcLength implementation
##class IAcadDimArcLength_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return bAlternate
##    def _set(self, bAlternate):
##        '-no docstring-'
##    AltUnits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return precision
##    def _set(self, precision):
##        '-no docstring-'
##    AltUnitsPrecision = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return scale
##    def _set(self, scale):
##        '-no docstring-'
##    AltUnitsScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Distance
##    def _set(self, Distance):
##        '-no docstring-'
##    AltRoundDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Distance
##    def _set(self, Distance):
##        '-no docstring-'
##    AltTolerancePrecision = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Units
##    def _set(self, Units):
##        '-no docstring-'
##    AltUnitsFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return prefix
##    def _set(self, prefix):
##        '-no docstring-'
##    AltTextPrefix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return prefix
##    def _set(self, prefix):
##        '-no docstring-'
##    AltTextSuffix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    DimensionLineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    ExtensionLineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Prec
##    def _set(self, Prec):
##        '-no docstring-'
##    PrimaryUnitsPrecision = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return extend
##    def _set(self, extend):
##        '-no docstring-'
##    DimensionLineExtend = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return extend
##    def _set(self, extend):
##        '-no docstring-'
##    ExtensionLineExtend = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return fittype
##    def _set(self, fittype):
##        '-no docstring-'
##    Fit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    FractionFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    HorizontalTextPosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    LinearScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return format
##    def _set(self, format):
##        '-no docstring-'
##    UnitsFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return lweight
##    def _set(self, lweight):
##        '-no docstring-'
##    ExtensionLineWeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Distance
##    def _set(self, Distance):
##        '-no docstring-'
##    RoundDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bSuppress
##    def _set(self, bSuppress):
##        '-no docstring-'
##    DimLine1Suppress = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bSuppress
##    def _set(self, bSuppress):
##        '-no docstring-'
##    DimLine2Suppress = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bSuppress
##    def _set(self, bSuppress):
##        '-no docstring-'
##    ExtLine1Suppress = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bSuppress
##    def _set(self, bSuppress):
##        '-no docstring-'
##    ExtLine2Suppress = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    DimLineInside = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    TextInsideAlign = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    TextInside = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    ForceLineInside = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    TextOutsideAlign = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Offset
##    def _set(self, Offset):
##        '-no docstring-'
##    ExtensionLineOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltSuppressLeadingZeros = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltSuppressTrailingZeros = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltToleranceSuppressLeadingZeros = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltToleranceSuppressTrailingZeros = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltToleranceSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltToleranceSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    SuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    SuppressZeroInches = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    ToleranceSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    ToleranceSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return weight
##    def _set(self, weight):
##        '-no docstring-'
##    DimensionLineWeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return size
##    def _set(self, size):
##        '-no docstring-'
##    ArrowheadSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    Arrowhead1Type = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    Arrowhead2Type = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Measurement(self):
##        '-no docstring-'
##        #return bVal
##
##    def _get(self):
##        '-no docstring-'
##        #return BlockName
##    def _set(self, BlockName):
##        '-no docstring-'
##    Arrowhead1Block = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return BlockName
##    def _set(self, BlockName):
##        '-no docstring-'
##    Arrowhead2Block = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    ArcPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    ExtLine1Point = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    ExtLine2Point = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    CenterPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    Leader1Point = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    Leader2Point = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    IsPartial = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    ArcStartParam = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    ArcEndParam = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    HasLeader = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Position
##    def _set(self, Position):
##        '-no docstring-'
##    SymbolPosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Linetype
##    def _set(self, Linetype):
##        '-no docstring-'
##    DimensionLinetype = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Linetype
##    def _set(self, Linetype):
##        '-no docstring-'
##    ExtLine1Linetype = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Linetype
##    def _set(self, Linetype):
##        '-no docstring-'
##    ExtLine2Linetype = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bFixedLen
##    def _set(self, bFixedLen):
##        '-no docstring-'
##    ExtLineFixedLenSuppress = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return FixedLen
##    def _set(self, FixedLen):
##        '-no docstring-'
##    ExtLineFixedLen = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return suffix
##    def _set(self, suffix):
##        '-no docstring-'
##    SubUnitsSuffix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return factor
##    def _set(self, factor):
##        '-no docstring-'
##    SubUnitsFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return suffix
##    def _set(self, suffix):
##        '-no docstring-'
##    AltSubUnitsSuffix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return factor
##    def _set(self, factor):
##        '-no docstring-'
##    AltSubUnitsFactor = property(_get, _set, doc = _set.__doc__)
##

class IAcad3DPolyline(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{00CAB518-C86C-4C36-B790-8226AD41B764}')
    _idlflags_ = ['dual', 'oleautomation']

# values for enumeration 'Ac3DPolylineType'
acSimple3DPoly = 0
acQuadSpline3DPoly = 1
acCubicSpline3DPoly = 2
Ac3DPolylineType = c_int # enum
IAcad3DPolyline._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Coordinates',
              ( ['out', 'retval'], POINTER(VARIANT), 'Coordinates' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'Coordinates',
              ( ['in'], VARIANT, 'Coordinates' )),
    COMMETHOD([dispid(2)], HRESULT, 'AppendVertex',
              ( ['in'], VARIANT, 'vertex' )),
    COMMETHOD([dispid(3)], HRESULT, 'Explode',
              ( ['out', 'retval'], POINTER(VARIANT), 'pArrayObjs' )),
    COMMETHOD([dispid(4), 'nonbrowsable', 'propget'], HRESULT, 'Coordinate',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD([dispid(4), 'nonbrowsable', 'propput'], HRESULT, 'Coordinate',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], VARIANT, 'pVal' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(Ac3DPolylineType), 'Type' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'Type',
              ( ['in'], Ac3DPolylineType, 'Type' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'Closed',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'fClose' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'Closed',
              ( ['in'], VARIANT_BOOL, 'fClose' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'Length',
              ( ['out', 'retval'], POINTER(c_double), 'Length' )),
]
################################################################
## code template for IAcad3DPolyline implementation
##class IAcad3DPolyline_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Coordinates
##    def _set(self, Coordinates):
##        '-no docstring-'
##    Coordinates = property(_get, _set, doc = _set.__doc__)
##
##    def AppendVertex(self, vertex):
##        '-no docstring-'
##        #return 
##
##    def Explode(self):
##        '-no docstring-'
##        #return pArrayObjs
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return pVal
##    def _set(self, Index, pVal):
##        '-no docstring-'
##    Coordinate = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    Type = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return fClose
##    def _set(self, fClose):
##        '-no docstring-'
##    Closed = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Length(self):
##        '-no docstring-'
##        #return Length
##

class IAcadSection(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{B4019484-035B-4502-BA74-880633FC0ADF}')
    _idlflags_ = ['dual', 'oleautomation']

# values for enumeration 'AcSectionState'
acSectionStatePlane = 1
acSectionStateBoundary = 2
acSectionStateVolume = 4
AcSectionState = c_int # enum

# values for enumeration 'AcSectionSubItem'
acSectionSubItemkNone = 0
acSectionSubItemSectionLine = 1
acSectionSubItemSectionLineTop = 2
acSectionSubItemSectionLineBottom = 4
acSectionSubItemBackLine = 8
acSectionSubItemBackLineTop = 16
acSectionSubItemBackLineBottom = 32
acSectionSubItemVerticalLineTop = 64
acSectionSubItemVerticalLineBottom = 128
AcSectionSubItem = c_int # enum
IAcadSection._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pbstrName' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'Name',
              ( ['in'], BSTR, 'pbstrName' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'State',
              ( ['out', 'retval'], POINTER(AcSectionState), 'pVal' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'State',
              ( ['in'], AcSectionState, 'pVal' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'ViewingDirection',
              ( ['out', 'retval'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'ViewingDirection',
              ( ['in'], VARIANT, 'pVal' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'VerticalDirection',
              ( ['out', 'retval'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'VerticalDirection',
              ( ['in'], VARIANT, 'pVal' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'Normal',
              ( ['out', 'retval'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'LiveSectionEnabled',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'LiveSectionEnabled',
              ( ['in'], VARIANT_BOOL, 'pVal' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'IndicatorTransparency',
              ( ['out', 'retval'], POINTER(c_int), 'pVal' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'IndicatorTransparency',
              ( ['in'], c_int, 'pVal' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'IndicatorFillColor',
              ( ['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor' )),
    COMMETHOD([dispid(8), 'propput'], HRESULT, 'IndicatorFillColor',
              ( ['in'], POINTER(IAcadAcCmColor), 'pColor' )),
    COMMETHOD([dispid(9), 'nonbrowsable', 'propget'], HRESULT, 'Elevation',
              ( ['out', 'retval'], POINTER(c_double), 'pVal' )),
    COMMETHOD([dispid(9), 'nonbrowsable', 'propput'], HRESULT, 'Elevation',
              ( ['in'], c_double, 'pVal' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'TopHeight',
              ( ['out', 'retval'], POINTER(c_double), 'pVal' )),
    COMMETHOD([dispid(10), 'propput'], HRESULT, 'TopHeight',
              ( ['in'], c_double, 'pVal' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'BottomHeight',
              ( ['out', 'retval'], POINTER(c_double), 'pVal' )),
    COMMETHOD([dispid(11), 'propput'], HRESULT, 'BottomHeight',
              ( ['in'], c_double, 'pVal' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'NumVertices',
              ( ['out', 'retval'], POINTER(c_int), 'pVal' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'Vertices',
              ( ['out', 'retval'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD([dispid(13), 'propput'], HRESULT, 'Vertices',
              ( ['in'], VARIANT, 'pVal' )),
    COMMETHOD([dispid(14), 'nonbrowsable', 'propget'], HRESULT, 'Coordinate',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD([dispid(14), 'nonbrowsable', 'propput'], HRESULT, 'Coordinate',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], VARIANT, 'pVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'AddVertex',
              ( ['in'], c_int, 'nIndex' ),
              ( ['in'], VARIANT, 'val' )),
    COMMETHOD([dispid(16)], HRESULT, 'RemoveVertex',
              ( ['in'], c_int, 'nIndex' )),
    COMMETHOD([dispid(17)], HRESULT, 'HitTest',
              ( ['in'], VARIANT, 'varPtHit' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'pHit' ),
              ( ['out'], POINTER(c_int), 'pSegmentIndex' ),
              ( ['out'], POINTER(VARIANT), 'pPtOnSegment' ),
              ( ['out'], POINTER(AcSectionSubItem), 'pSubItem' )),
    COMMETHOD([dispid(18)], HRESULT, 'CreateJog',
              ( ['in'], VARIANT, 'varPt' )),
    COMMETHOD([dispid(19), 'propget'], HRESULT, 'Settings',
              ( ['out', 'retval'], POINTER(POINTER(IAcadSectionSettings)), 'pUnk' )),
    COMMETHOD([dispid(20)], HRESULT, 'GenerateSectionGeometry',
              ( ['in'], POINTER(IAcadEntity), 'pEntity' ),
              ( ['out'], POINTER(VARIANT), 'pIntersectionBoundaryObjs' ),
              ( ['out'], POINTER(VARIANT), 'pIntersectionFillObjs' ),
              ( ['out'], POINTER(VARIANT), 'pBackgroudnObjs' ),
              ( ['out'], POINTER(VARIANT), 'pForegroudObjs' ),
              ( ['out'], POINTER(VARIANT), 'pCurveTangencyObjs' )),
]
################################################################
## code template for IAcadSection implementation
##class IAcadSection_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return pbstrName
##    def _set(self, pbstrName):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    State = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    ViewingDirection = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    VerticalDirection = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Normal(self):
##        '-no docstring-'
##        #return pVal
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    LiveSectionEnabled = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    IndicatorTransparency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pColor
##    def _set(self, pColor):
##        '-no docstring-'
##    IndicatorFillColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    Elevation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    TopHeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    BottomHeight = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def NumVertices(self):
##        '-no docstring-'
##        #return pVal
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    Vertices = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return pVal
##    def _set(self, Index, pVal):
##        '-no docstring-'
##    Coordinate = property(_get, _set, doc = _set.__doc__)
##
##    def AddVertex(self, nIndex, val):
##        '-no docstring-'
##        #return 
##
##    def RemoveVertex(self, nIndex):
##        '-no docstring-'
##        #return 
##
##    def HitTest(self, varPtHit):
##        '-no docstring-'
##        #return pHit, pSegmentIndex, pPtOnSegment, pSubItem
##
##    def CreateJog(self, varPt):
##        '-no docstring-'
##        #return 
##
##    @property
##    def Settings(self):
##        '-no docstring-'
##        #return pUnk
##
##    def GenerateSectionGeometry(self, pEntity):
##        '-no docstring-'
##        #return pIntersectionBoundaryObjs, pIntersectionFillObjs, pBackgroudnObjs, pForegroudObjs, pCurveTangencyObjs
##

class IAcadAttribute(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{8117164C-A63F-4AD1-8E1D-9349E6DCC718}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadAttribute._methods_ = [
    COMMETHOD([dispid(1), 'nonbrowsable', 'propget'], HRESULT, 'FieldLength',
              ( ['out', 'retval'], POINTER(c_int), 'fieldLen' )),
    COMMETHOD([dispid(1), 'nonbrowsable', 'propput'], HRESULT, 'FieldLength',
              ( ['in'], c_int, 'fieldLen' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'TagString',
              ( ['out', 'retval'], POINTER(BSTR), 'Tag' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'TagString',
              ( ['in'], BSTR, 'Tag' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'PromptString',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrPrompt' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'PromptString',
              ( ['in'], BSTR, 'bstrPrompt' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'TextString',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrText' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'TextString',
              ( ['in'], BSTR, 'bstrText' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'StyleName',
              ( ['out', 'retval'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'StyleName',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'Alignment',
              ( ['out', 'retval'], POINTER(AcAlignment), 'align' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'Alignment',
              ( ['in'], AcAlignment, 'align' )),
    COMMETHOD([dispid(7), 'hidden', 'propget'], HRESULT, 'HorizontalAlignment',
              ( ['out', 'retval'], POINTER(AcHorizontalAlignment), 'horizAlign' )),
    COMMETHOD([dispid(7), 'hidden', 'propput'], HRESULT, 'HorizontalAlignment',
              ( ['in'], AcHorizontalAlignment, 'horizAlign' )),
    COMMETHOD([dispid(8), 'hidden', 'propget'], HRESULT, 'VerticalAlignment',
              ( ['out', 'retval'], POINTER(AcVerticalAlignment), 'vertiAlign' )),
    COMMETHOD([dispid(8), 'hidden', 'propput'], HRESULT, 'VerticalAlignment',
              ( ['in'], AcVerticalAlignment, 'vertiAlign' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'Height',
              ( ['out', 'retval'], POINTER(c_double), 'Height' )),
    COMMETHOD([dispid(9), 'propput'], HRESULT, 'Height',
              ( ['in'], c_double, 'Height' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'Rotation',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'rotAngle' )),
    COMMETHOD([dispid(10), 'propput'], HRESULT, 'Rotation',
              ( ['in'], ACAD_ANGLE, 'rotAngle' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'ScaleFactor',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'scalFactor' )),
    COMMETHOD([dispid(11), 'propput'], HRESULT, 'ScaleFactor',
              ( ['in'], ACAD_NOUNITS, 'scalFactor' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'ObliqueAngle',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'obliAngle' )),
    COMMETHOD([dispid(12), 'propput'], HRESULT, 'ObliqueAngle',
              ( ['in'], ACAD_ANGLE, 'obliAngle' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'TextAlignmentPoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'alignPoint' )),
    COMMETHOD([dispid(13), 'propput'], HRESULT, 'TextAlignmentPoint',
              ( ['in'], VARIANT, 'alignPoint' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'InsertionPoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'insPoint' )),
    COMMETHOD([dispid(14), 'propput'], HRESULT, 'InsertionPoint',
              ( ['in'], VARIANT, 'insPoint' )),
    COMMETHOD([dispid(15), 'nonbrowsable', 'propget'], HRESULT, 'Normal',
              ( ['out', 'retval'], POINTER(VARIANT), 'Normal' )),
    COMMETHOD([dispid(15), 'nonbrowsable', 'propput'], HRESULT, 'Normal',
              ( ['in'], VARIANT, 'Normal' )),
    COMMETHOD([dispid(16), 'nonbrowsable', 'propget'], HRESULT, 'TextGenerationFlag',
              ( ['out', 'retval'], POINTER(c_int), 'textGenFlag' )),
    COMMETHOD([dispid(16), 'nonbrowsable', 'propput'], HRESULT, 'TextGenerationFlag',
              ( ['in'], c_int, 'textGenFlag' )),
    COMMETHOD([dispid(17), 'propget'], HRESULT, 'Thickness',
              ( ['out', 'retval'], POINTER(c_double), 'Thickness' )),
    COMMETHOD([dispid(17), 'propput'], HRESULT, 'Thickness',
              ( ['in'], c_double, 'Thickness' )),
    COMMETHOD([dispid(18), 'nonbrowsable', 'propget'], HRESULT, 'Mode',
              ( ['out', 'retval'], POINTER(c_int), 'Mode' )),
    COMMETHOD([dispid(18), 'nonbrowsable', 'propput'], HRESULT, 'Mode',
              ( ['in'], c_int, 'Mode' )),
    COMMETHOD([dispid(19), 'propget'], HRESULT, 'UpsideDown',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bUpsideDown' )),
    COMMETHOD([dispid(19), 'propput'], HRESULT, 'UpsideDown',
              ( ['in'], VARIANT_BOOL, 'bUpsideDown' )),
    COMMETHOD([dispid(20), 'propget'], HRESULT, 'Backward',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bBackward' )),
    COMMETHOD([dispid(20), 'propput'], HRESULT, 'Backward',
              ( ['in'], VARIANT_BOOL, 'bBackward' )),
    COMMETHOD([dispid(21), 'propget'], HRESULT, 'Invisible',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInvisible' )),
    COMMETHOD([dispid(21), 'propput'], HRESULT, 'Invisible',
              ( ['in'], VARIANT_BOOL, 'bInvisible' )),
    COMMETHOD([dispid(22), 'propget'], HRESULT, 'Constant',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bConstant' )),
    COMMETHOD([dispid(22), 'propput'], HRESULT, 'Constant',
              ( ['in'], VARIANT_BOOL, 'bConstant' )),
    COMMETHOD([dispid(23), 'propget'], HRESULT, 'Verify',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVerify' )),
    COMMETHOD([dispid(23), 'propput'], HRESULT, 'Verify',
              ( ['in'], VARIANT_BOOL, 'bVerify' )),
    COMMETHOD([dispid(24), 'propget'], HRESULT, 'Preset',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bPreset' )),
    COMMETHOD([dispid(24), 'propput'], HRESULT, 'Preset',
              ( ['in'], VARIANT_BOOL, 'bPreset' )),
    COMMETHOD([dispid(25), 'propget'], HRESULT, 'LockPosition',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bLockPosition' )),
    COMMETHOD([dispid(25), 'propput'], HRESULT, 'LockPosition',
              ( ['in'], VARIANT_BOOL, 'bLockPosition' )),
    COMMETHOD([dispid(26), 'propget'], HRESULT, 'MTextAttribute',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bMTextAttribute' )),
    COMMETHOD([dispid(26), 'propput'], HRESULT, 'MTextAttribute',
              ( ['in'], VARIANT_BOOL, 'bMTextAttribute' )),
    COMMETHOD([dispid(27), 'propget'], HRESULT, 'MTextAttributeContent',
              ( ['out', 'retval'], POINTER(BSTR), 'content' )),
    COMMETHOD([dispid(27), 'propput'], HRESULT, 'MTextAttributeContent',
              ( ['in'], BSTR, 'content' )),
    COMMETHOD([dispid(28)], HRESULT, 'UpdateMTextAttribute'),
    COMMETHOD([dispid(29), 'propget'], HRESULT, 'MTextBoundaryWidth',
              ( ['out', 'retval'], POINTER(c_double), 'boundaryWidth' )),
    COMMETHOD([dispid(29), 'propput'], HRESULT, 'MTextBoundaryWidth',
              ( [], c_double, 'boundaryWidth' )),
    COMMETHOD([dispid(30), 'propget'], HRESULT, 'MTextDrawingDirection',
              ( ['out', 'retval'], POINTER(AcDrawingDirection), 'drawDir' )),
    COMMETHOD([dispid(30), 'propput'], HRESULT, 'MTextDrawingDirection',
              ( ['in'], AcDrawingDirection, 'drawDir' )),
]
################################################################
## code template for IAcadAttribute implementation
##class IAcadAttribute_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return fieldLen
##    def _set(self, fieldLen):
##        '-no docstring-'
##    FieldLength = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Tag
##    def _set(self, Tag):
##        '-no docstring-'
##    TagString = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrPrompt
##    def _set(self, bstrPrompt):
##        '-no docstring-'
##    PromptString = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrText
##    def _set(self, bstrText):
##        '-no docstring-'
##    TextString = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Name
##    def _set(self, Name):
##        '-no docstring-'
##    StyleName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return align
##    def _set(self, align):
##        '-no docstring-'
##    Alignment = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return horizAlign
##    def _set(self, horizAlign):
##        '-no docstring-'
##    HorizontalAlignment = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return vertiAlign
##    def _set(self, vertiAlign):
##        '-no docstring-'
##    VerticalAlignment = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Height
##    def _set(self, Height):
##        '-no docstring-'
##    Height = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return rotAngle
##    def _set(self, rotAngle):
##        '-no docstring-'
##    Rotation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return scalFactor
##    def _set(self, scalFactor):
##        '-no docstring-'
##    ScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return obliAngle
##    def _set(self, obliAngle):
##        '-no docstring-'
##    ObliqueAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return alignPoint
##    def _set(self, alignPoint):
##        '-no docstring-'
##    TextAlignmentPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return insPoint
##    def _set(self, insPoint):
##        '-no docstring-'
##    InsertionPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Normal
##    def _set(self, Normal):
##        '-no docstring-'
##    Normal = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return textGenFlag
##    def _set(self, textGenFlag):
##        '-no docstring-'
##    TextGenerationFlag = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Thickness
##    def _set(self, Thickness):
##        '-no docstring-'
##    Thickness = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Mode
##    def _set(self, Mode):
##        '-no docstring-'
##    Mode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bUpsideDown
##    def _set(self, bUpsideDown):
##        '-no docstring-'
##    UpsideDown = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bBackward
##    def _set(self, bBackward):
##        '-no docstring-'
##    Backward = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInvisible
##    def _set(self, bInvisible):
##        '-no docstring-'
##    Invisible = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bConstant
##    def _set(self, bConstant):
##        '-no docstring-'
##    Constant = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVerify
##    def _set(self, bVerify):
##        '-no docstring-'
##    Verify = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bPreset
##    def _set(self, bPreset):
##        '-no docstring-'
##    Preset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bLockPosition
##    def _set(self, bLockPosition):
##        '-no docstring-'
##    LockPosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bMTextAttribute
##    def _set(self, bMTextAttribute):
##        '-no docstring-'
##    MTextAttribute = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return content
##    def _set(self, content):
##        '-no docstring-'
##    MTextAttributeContent = property(_get, _set, doc = _set.__doc__)
##
##    def UpdateMTextAttribute(self):
##        '-no docstring-'
##        #return 
##
##    def _get(self):
##        '-no docstring-'
##        #return boundaryWidth
##    def _set(self, boundaryWidth):
##        '-no docstring-'
##    MTextBoundaryWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return drawDir
##    def _set(self, drawDir):
##        '-no docstring-'
##    MTextDrawingDirection = property(_get, _set, doc = _set.__doc__)
##

class IAcadEllipse(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{3D79E537-8535-4493-98E0-4B8CA5F2EC43}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadEllipse._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'StartPoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'StartPoint' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'Center',
              ( ['out', 'retval'], POINTER(VARIANT), 'Center' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'Center',
              ( ['in'], VARIANT, 'Center' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'EndPoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'EndPoint' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'MajorRadius',
              ( ['out', 'retval'], POINTER(c_double), 'MajorRadius' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'MajorRadius',
              ( ['in'], c_double, 'MajorRadius' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'MinorRadius',
              ( ['out', 'retval'], POINTER(c_double), 'MinorRadius' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'MinorRadius',
              ( ['in'], c_double, 'MinorRadius' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'RadiusRatio',
              ( ['out', 'retval'], POINTER(c_double), 'RadiusRatio' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'RadiusRatio',
              ( ['in'], c_double, 'RadiusRatio' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'StartAngle',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'StartAngle' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'StartAngle',
              ( ['in'], ACAD_ANGLE, 'StartAngle' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'EndAngle',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'EndAngle' )),
    COMMETHOD([dispid(8), 'propput'], HRESULT, 'EndAngle',
              ( ['in'], ACAD_ANGLE, 'EndAngle' )),
    COMMETHOD([dispid(9), 'nonbrowsable', 'propget'], HRESULT, 'StartParameter',
              ( ['out', 'retval'], POINTER(c_double), 'StartParameter' )),
    COMMETHOD([dispid(9), 'nonbrowsable', 'propput'], HRESULT, 'StartParameter',
              ( ['in'], c_double, 'StartParameter' )),
    COMMETHOD([dispid(10), 'nonbrowsable', 'propget'], HRESULT, 'EndParameter',
              ( ['out', 'retval'], POINTER(c_double), 'EndParameter' )),
    COMMETHOD([dispid(10), 'nonbrowsable', 'propput'], HRESULT, 'EndParameter',
              ( ['in'], c_double, 'EndParameter' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'MajorAxis',
              ( ['out', 'retval'], POINTER(VARIANT), 'MajorAxis' )),
    COMMETHOD([dispid(11), 'propput'], HRESULT, 'MajorAxis',
              ( ['in'], VARIANT, 'MajorAxis' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'MinorAxis',
              ( ['out', 'retval'], POINTER(VARIANT), 'MinorAxis' )),
    COMMETHOD([dispid(13), 'nonbrowsable', 'propget'], HRESULT, 'Normal',
              ( ['out', 'retval'], POINTER(VARIANT), 'Normal' )),
    COMMETHOD([dispid(13), 'nonbrowsable', 'propput'], HRESULT, 'Normal',
              ( ['in'], VARIANT, 'Normal' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'Area',
              ( ['out', 'retval'], POINTER(c_double), 'Area' )),
    COMMETHOD([dispid(15)], HRESULT, 'Offset',
              ( ['in'], c_double, 'Distance' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'pOffsetCurves' )),
]
################################################################
## code template for IAcadEllipse implementation
##class IAcadEllipse_Impl(object):
##    @property
##    def StartPoint(self):
##        '-no docstring-'
##        #return StartPoint
##
##    def _get(self):
##        '-no docstring-'
##        #return Center
##    def _set(self, Center):
##        '-no docstring-'
##    Center = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def EndPoint(self):
##        '-no docstring-'
##        #return EndPoint
##
##    def _get(self):
##        '-no docstring-'
##        #return MajorRadius
##    def _set(self, MajorRadius):
##        '-no docstring-'
##    MajorRadius = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return MinorRadius
##    def _set(self, MinorRadius):
##        '-no docstring-'
##    MinorRadius = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return RadiusRatio
##    def _set(self, RadiusRatio):
##        '-no docstring-'
##    RadiusRatio = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return StartAngle
##    def _set(self, StartAngle):
##        '-no docstring-'
##    StartAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return EndAngle
##    def _set(self, EndAngle):
##        '-no docstring-'
##    EndAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return StartParameter
##    def _set(self, StartParameter):
##        '-no docstring-'
##    StartParameter = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return EndParameter
##    def _set(self, EndParameter):
##        '-no docstring-'
##    EndParameter = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return MajorAxis
##    def _set(self, MajorAxis):
##        '-no docstring-'
##    MajorAxis = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MinorAxis(self):
##        '-no docstring-'
##        #return MinorAxis
##
##    def _get(self):
##        '-no docstring-'
##        #return Normal
##    def _set(self, Normal):
##        '-no docstring-'
##    Normal = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Area(self):
##        '-no docstring-'
##        #return Area
##
##    def Offset(self, Distance):
##        '-no docstring-'
##        #return pOffsetCurves
##

class IAcadDimRotated(IAcadDimension):
    _case_insensitive_ = True
    _iid_ = GUID('{B1D87367-FFAF-460C-877B-CF1F15B5FE3F}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadDimRotated._methods_ = [
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'AltUnits',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bAlternate' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'AltUnits',
              ( ['in'], VARIANT_BOOL, 'bAlternate' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'AltUnitsPrecision',
              ( ['out', 'retval'], POINTER(AcDimPrecision), 'precision' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'AltUnitsPrecision',
              ( ['in'], AcDimPrecision, 'precision' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'AltUnitsScale',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'scale' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'AltUnitsScale',
              ( ['in'], ACAD_NOUNITS, 'scale' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'AltRoundDistance',
              ( ['out', 'retval'], POINTER(c_double), 'Distance' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'AltRoundDistance',
              ( ['in'], c_double, 'Distance' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'AltTolerancePrecision',
              ( ['out', 'retval'], POINTER(AcDimPrecision), 'Distance' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'AltTolerancePrecision',
              ( ['in'], AcDimPrecision, 'Distance' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'AltUnitsFormat',
              ( ['out', 'retval'], POINTER(AcDimUnits), 'Units' )),
    COMMETHOD([dispid(9), 'propput'], HRESULT, 'AltUnitsFormat',
              ( ['in'], AcDimUnits, 'Units' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'AltTextPrefix',
              ( ['out', 'retval'], POINTER(BSTR), 'prefix' )),
    COMMETHOD([dispid(11), 'propput'], HRESULT, 'AltTextPrefix',
              ( ['in'], BSTR, 'prefix' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'AltTextSuffix',
              ( ['out', 'retval'], POINTER(BSTR), 'prefix' )),
    COMMETHOD([dispid(12), 'propput'], HRESULT, 'AltTextSuffix',
              ( ['in'], BSTR, 'prefix' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'DimensionLineColor',
              ( ['out', 'retval'], POINTER(ACAD_COLOR), 'Type' )),
    COMMETHOD([dispid(13), 'propput'], HRESULT, 'DimensionLineColor',
              ( ['in'], ACAD_COLOR, 'Type' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'ExtensionLineColor',
              ( ['out', 'retval'], POINTER(ACAD_COLOR), 'Type' )),
    COMMETHOD([dispid(14), 'propput'], HRESULT, 'ExtensionLineColor',
              ( ['in'], ACAD_COLOR, 'Type' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'PrimaryUnitsPrecision',
              ( ['out', 'retval'], POINTER(AcDimPrecision), 'Prec' )),
    COMMETHOD([dispid(15), 'propput'], HRESULT, 'PrimaryUnitsPrecision',
              ( ['in'], AcDimPrecision, 'Prec' )),
    COMMETHOD([dispid(16), 'propget'], HRESULT, 'DimensionLineExtend',
              ( ['out', 'retval'], POINTER(c_double), 'extend' )),
    COMMETHOD([dispid(16), 'propput'], HRESULT, 'DimensionLineExtend',
              ( ['in'], c_double, 'extend' )),
    COMMETHOD([dispid(17), 'propget'], HRESULT, 'ExtensionLineExtend',
              ( ['out', 'retval'], POINTER(c_double), 'extend' )),
    COMMETHOD([dispid(17), 'propput'], HRESULT, 'ExtensionLineExtend',
              ( ['in'], c_double, 'extend' )),
    COMMETHOD([dispid(18), 'propget'], HRESULT, 'Fit',
              ( ['out', 'retval'], POINTER(AcDimFit), 'fittype' )),
    COMMETHOD([dispid(18), 'propput'], HRESULT, 'Fit',
              ( ['in'], AcDimFit, 'fittype' )),
    COMMETHOD([dispid(19), 'propget'], HRESULT, 'FractionFormat',
              ( ['out', 'retval'], POINTER(AcDimFractionType), 'Type' )),
    COMMETHOD([dispid(19), 'propput'], HRESULT, 'FractionFormat',
              ( ['in'], AcDimFractionType, 'Type' )),
    COMMETHOD([dispid(20), 'propget'], HRESULT, 'HorizontalTextPosition',
              ( ['out', 'retval'], POINTER(AcDimHorizontalJustification), 'Type' )),
    COMMETHOD([dispid(20), 'propput'], HRESULT, 'HorizontalTextPosition',
              ( ['in'], AcDimHorizontalJustification, 'Type' )),
    COMMETHOD([dispid(21), 'propget'], HRESULT, 'LinearScaleFactor',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'Type' )),
    COMMETHOD([dispid(21), 'propput'], HRESULT, 'LinearScaleFactor',
              ( ['in'], ACAD_NOUNITS, 'Type' )),
    COMMETHOD([dispid(22), 'propget'], HRESULT, 'UnitsFormat',
              ( ['out', 'retval'], POINTER(AcDimLUnits), 'format' )),
    COMMETHOD([dispid(22), 'propput'], HRESULT, 'UnitsFormat',
              ( ['in'], AcDimLUnits, 'format' )),
    COMMETHOD([dispid(23), 'propget'], HRESULT, 'ExtensionLineWeight',
              ( ['out', 'retval'], POINTER(ACAD_LWEIGHT), 'lweight' )),
    COMMETHOD([dispid(23), 'propput'], HRESULT, 'ExtensionLineWeight',
              ( ['in'], ACAD_LWEIGHT, 'lweight' )),
    COMMETHOD([dispid(24), 'propget'], HRESULT, 'RoundDistance',
              ( ['out', 'retval'], POINTER(c_double), 'Distance' )),
    COMMETHOD([dispid(24), 'propput'], HRESULT, 'RoundDistance',
              ( ['in'], c_double, 'Distance' )),
    COMMETHOD([dispid(25), 'propget'], HRESULT, 'DimLine1Suppress',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress' )),
    COMMETHOD([dispid(25), 'propput'], HRESULT, 'DimLine1Suppress',
              ( ['in'], VARIANT_BOOL, 'bSuppress' )),
    COMMETHOD([dispid(26), 'propget'], HRESULT, 'DimLine2Suppress',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress' )),
    COMMETHOD([dispid(26), 'propput'], HRESULT, 'DimLine2Suppress',
              ( ['in'], VARIANT_BOOL, 'bSuppress' )),
    COMMETHOD([dispid(27), 'propget'], HRESULT, 'ExtLine1Suppress',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress' )),
    COMMETHOD([dispid(27), 'propput'], HRESULT, 'ExtLine1Suppress',
              ( ['in'], VARIANT_BOOL, 'bSuppress' )),
    COMMETHOD([dispid(28), 'propget'], HRESULT, 'ExtLine2Suppress',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress' )),
    COMMETHOD([dispid(28), 'propput'], HRESULT, 'ExtLine2Suppress',
              ( ['in'], VARIANT_BOOL, 'bSuppress' )),
    COMMETHOD([dispid(29), 'propget'], HRESULT, 'DimLineInside',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(29), 'propput'], HRESULT, 'DimLineInside',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(30), 'propget'], HRESULT, 'TextInsideAlign',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(30), 'propput'], HRESULT, 'TextInsideAlign',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(31), 'propget'], HRESULT, 'TextInside',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(31), 'propput'], HRESULT, 'TextInside',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(32), 'propget'], HRESULT, 'ForceLineInside',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(32), 'propput'], HRESULT, 'ForceLineInside',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(33), 'propget'], HRESULT, 'TextOutsideAlign',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(33), 'propput'], HRESULT, 'TextOutsideAlign',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(35), 'propget'], HRESULT, 'ExtensionLineOffset',
              ( ['out', 'retval'], POINTER(c_double), 'Offset' )),
    COMMETHOD([dispid(35), 'propput'], HRESULT, 'ExtensionLineOffset',
              ( ['in'], c_double, 'Offset' )),
    COMMETHOD([dispid(48), 'propget'], HRESULT, 'AltSuppressLeadingZeros',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(48), 'propput'], HRESULT, 'AltSuppressLeadingZeros',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(49), 'propget'], HRESULT, 'AltSuppressTrailingZeros',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(49), 'propput'], HRESULT, 'AltSuppressTrailingZeros',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(50), 'propget'], HRESULT, 'AltSuppressZeroFeet',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(50), 'propput'], HRESULT, 'AltSuppressZeroFeet',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(51), 'propget'], HRESULT, 'AltSuppressZeroInches',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(51), 'propput'], HRESULT, 'AltSuppressZeroInches',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(52), 'propget'], HRESULT, 'AltToleranceSuppressLeadingZeros',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(52), 'propput'], HRESULT, 'AltToleranceSuppressLeadingZeros',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(53), 'propget'], HRESULT, 'AltToleranceSuppressTrailingZeros',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(53), 'propput'], HRESULT, 'AltToleranceSuppressTrailingZeros',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(54), 'propget'], HRESULT, 'AltToleranceSuppressZeroFeet',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(54), 'propput'], HRESULT, 'AltToleranceSuppressZeroFeet',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(55), 'propget'], HRESULT, 'AltToleranceSuppressZeroInches',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(55), 'propput'], HRESULT, 'AltToleranceSuppressZeroInches',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(56), 'propget'], HRESULT, 'SuppressZeroFeet',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(56), 'propput'], HRESULT, 'SuppressZeroFeet',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(57), 'propget'], HRESULT, 'SuppressZeroInches',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(57), 'propput'], HRESULT, 'SuppressZeroInches',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(58), 'propget'], HRESULT, 'ToleranceSuppressZeroFeet',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(58), 'propput'], HRESULT, 'ToleranceSuppressZeroFeet',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(59), 'propget'], HRESULT, 'ToleranceSuppressZeroInches',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(59), 'propput'], HRESULT, 'ToleranceSuppressZeroInches',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(60), 'propget'], HRESULT, 'DimensionLineWeight',
              ( ['out', 'retval'], POINTER(ACAD_LWEIGHT), 'weight' )),
    COMMETHOD([dispid(60), 'propput'], HRESULT, 'DimensionLineWeight',
              ( ['in'], ACAD_LWEIGHT, 'weight' )),
    COMMETHOD([dispid(61), 'propget'], HRESULT, 'ArrowheadSize',
              ( ['out', 'retval'], POINTER(c_double), 'size' )),
    COMMETHOD([dispid(61), 'propput'], HRESULT, 'ArrowheadSize',
              ( ['in'], c_double, 'size' )),
    COMMETHOD([dispid(62), 'propget'], HRESULT, 'Arrowhead1Type',
              ( ['out', 'retval'], POINTER(AcDimArrowheadType), 'Type' )),
    COMMETHOD([dispid(62), 'propput'], HRESULT, 'Arrowhead1Type',
              ( ['in'], AcDimArrowheadType, 'Type' )),
    COMMETHOD([dispid(63), 'propget'], HRESULT, 'Arrowhead2Type',
              ( ['out', 'retval'], POINTER(AcDimArrowheadType), 'Type' )),
    COMMETHOD([dispid(63), 'propput'], HRESULT, 'Arrowhead2Type',
              ( ['in'], AcDimArrowheadType, 'Type' )),
    COMMETHOD([dispid(64), 'propget'], HRESULT, 'Measurement',
              ( ['out', 'retval'], POINTER(c_double), 'bVal' )),
    COMMETHOD([dispid(65), 'nonbrowsable', 'propget'], HRESULT, 'Arrowhead1Block',
              ( ['out', 'retval'], POINTER(BSTR), 'BlockName' )),
    COMMETHOD([dispid(65), 'nonbrowsable', 'propput'], HRESULT, 'Arrowhead1Block',
              ( ['in'], BSTR, 'BlockName' )),
    COMMETHOD([dispid(66), 'nonbrowsable', 'propget'], HRESULT, 'Arrowhead2Block',
              ( ['out', 'retval'], POINTER(BSTR), 'BlockName' )),
    COMMETHOD([dispid(66), 'nonbrowsable', 'propput'], HRESULT, 'Arrowhead2Block',
              ( ['in'], BSTR, 'BlockName' )),
    COMMETHOD([dispid(80), 'propget'], HRESULT, 'DimensionLinetype',
              ( ['out', 'retval'], POINTER(BSTR), 'Linetype' )),
    COMMETHOD([dispid(80), 'propput'], HRESULT, 'DimensionLinetype',
              ( ['in'], BSTR, 'Linetype' )),
    COMMETHOD([dispid(81), 'propget'], HRESULT, 'ExtLine1Linetype',
              ( ['out', 'retval'], POINTER(BSTR), 'Linetype' )),
    COMMETHOD([dispid(81), 'propput'], HRESULT, 'ExtLine1Linetype',
              ( ['in'], BSTR, 'Linetype' )),
    COMMETHOD([dispid(82), 'propget'], HRESULT, 'ExtLine2Linetype',
              ( ['out', 'retval'], POINTER(BSTR), 'Linetype' )),
    COMMETHOD([dispid(82), 'propput'], HRESULT, 'ExtLine2Linetype',
              ( ['in'], BSTR, 'Linetype' )),
    COMMETHOD([dispid(83), 'propget'], HRESULT, 'ExtLineFixedLenSuppress',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bFixedLen' )),
    COMMETHOD([dispid(83), 'propput'], HRESULT, 'ExtLineFixedLenSuppress',
              ( ['in'], VARIANT_BOOL, 'bFixedLen' )),
    COMMETHOD([dispid(84), 'propget'], HRESULT, 'ExtLineFixedLen',
              ( ['out', 'retval'], POINTER(c_double), 'FixedLen' )),
    COMMETHOD([dispid(84), 'propput'], HRESULT, 'ExtLineFixedLen',
              ( ['in'], c_double, 'FixedLen' )),
    COMMETHOD([dispid(85), 'propget'], HRESULT, 'DimConstrForm',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bIsDynamic' )),
    COMMETHOD([dispid(85), 'propput'], HRESULT, 'DimConstrForm',
              ( ['in'], VARIANT_BOOL, 'bIsDynamic' )),
    COMMETHOD([dispid(86), 'propget'], HRESULT, 'DimConstrReference',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bIsReference' )),
    COMMETHOD([dispid(86), 'propput'], HRESULT, 'DimConstrReference',
              ( ['in'], VARIANT_BOOL, 'bIsReference' )),
    COMMETHOD([dispid(87), 'propget'], HRESULT, 'DimConstrName',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(87), 'propput'], HRESULT, 'DimConstrName',
              ( ['in'], BSTR, 'bstrName' )),
    COMMETHOD([dispid(88), 'propget'], HRESULT, 'DimConstrExpression',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrExpression' )),
    COMMETHOD([dispid(88), 'propput'], HRESULT, 'DimConstrExpression',
              ( ['in'], BSTR, 'bstrExpression' )),
    COMMETHOD([dispid(89), 'propget'], HRESULT, 'DimConstrValue',
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(89), 'propput'], HRESULT, 'DimConstrValue',
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(90), 'propget'], HRESULT, 'DimConstrDesc',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrDescription' )),
    COMMETHOD([dispid(90), 'propput'], HRESULT, 'DimConstrDesc',
              ( ['in'], BSTR, 'bstrDescription' )),
    COMMETHOD([dispid(1574), 'propget'], HRESULT, 'SubUnitsSuffix',
              ( ['out', 'retval'], POINTER(BSTR), 'suffix' )),
    COMMETHOD([dispid(1574), 'propput'], HRESULT, 'SubUnitsSuffix',
              ( ['in'], BSTR, 'suffix' )),
    COMMETHOD([dispid(1575), 'propget'], HRESULT, 'SubUnitsFactor',
              ( ['out', 'retval'], POINTER(c_double), 'factor' )),
    COMMETHOD([dispid(1575), 'propput'], HRESULT, 'SubUnitsFactor',
              ( ['in'], c_double, 'factor' )),
    COMMETHOD([dispid(1576), 'propget'], HRESULT, 'AltSubUnitsSuffix',
              ( ['out', 'retval'], POINTER(BSTR), 'suffix' )),
    COMMETHOD([dispid(1576), 'propput'], HRESULT, 'AltSubUnitsSuffix',
              ( ['in'], BSTR, 'suffix' )),
    COMMETHOD([dispid(1577), 'propget'], HRESULT, 'AltSubUnitsFactor',
              ( ['out', 'retval'], POINTER(c_double), 'factor' )),
    COMMETHOD([dispid(1577), 'propput'], HRESULT, 'AltSubUnitsFactor',
              ( ['in'], c_double, 'factor' )),
]
################################################################
## code template for IAcadDimRotated implementation
##class IAcadDimRotated_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return bAlternate
##    def _set(self, bAlternate):
##        '-no docstring-'
##    AltUnits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return precision
##    def _set(self, precision):
##        '-no docstring-'
##    AltUnitsPrecision = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return scale
##    def _set(self, scale):
##        '-no docstring-'
##    AltUnitsScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Distance
##    def _set(self, Distance):
##        '-no docstring-'
##    AltRoundDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Distance
##    def _set(self, Distance):
##        '-no docstring-'
##    AltTolerancePrecision = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Units
##    def _set(self, Units):
##        '-no docstring-'
##    AltUnitsFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return prefix
##    def _set(self, prefix):
##        '-no docstring-'
##    AltTextPrefix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return prefix
##    def _set(self, prefix):
##        '-no docstring-'
##    AltTextSuffix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    DimensionLineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    ExtensionLineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Prec
##    def _set(self, Prec):
##        '-no docstring-'
##    PrimaryUnitsPrecision = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return extend
##    def _set(self, extend):
##        '-no docstring-'
##    DimensionLineExtend = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return extend
##    def _set(self, extend):
##        '-no docstring-'
##    ExtensionLineExtend = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return fittype
##    def _set(self, fittype):
##        '-no docstring-'
##    Fit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    FractionFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    HorizontalTextPosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    LinearScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return format
##    def _set(self, format):
##        '-no docstring-'
##    UnitsFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return lweight
##    def _set(self, lweight):
##        '-no docstring-'
##    ExtensionLineWeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Distance
##    def _set(self, Distance):
##        '-no docstring-'
##    RoundDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bSuppress
##    def _set(self, bSuppress):
##        '-no docstring-'
##    DimLine1Suppress = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bSuppress
##    def _set(self, bSuppress):
##        '-no docstring-'
##    DimLine2Suppress = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bSuppress
##    def _set(self, bSuppress):
##        '-no docstring-'
##    ExtLine1Suppress = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bSuppress
##    def _set(self, bSuppress):
##        '-no docstring-'
##    ExtLine2Suppress = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    DimLineInside = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    TextInsideAlign = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    TextInside = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    ForceLineInside = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    TextOutsideAlign = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Offset
##    def _set(self, Offset):
##        '-no docstring-'
##    ExtensionLineOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltSuppressLeadingZeros = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltSuppressTrailingZeros = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltToleranceSuppressLeadingZeros = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltToleranceSuppressTrailingZeros = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltToleranceSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltToleranceSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    SuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    SuppressZeroInches = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    ToleranceSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    ToleranceSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return weight
##    def _set(self, weight):
##        '-no docstring-'
##    DimensionLineWeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return size
##    def _set(self, size):
##        '-no docstring-'
##    ArrowheadSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    Arrowhead1Type = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    Arrowhead2Type = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Measurement(self):
##        '-no docstring-'
##        #return bVal
##
##    def _get(self):
##        '-no docstring-'
##        #return BlockName
##    def _set(self, BlockName):
##        '-no docstring-'
##    Arrowhead1Block = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return BlockName
##    def _set(self, BlockName):
##        '-no docstring-'
##    Arrowhead2Block = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Linetype
##    def _set(self, Linetype):
##        '-no docstring-'
##    DimensionLinetype = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Linetype
##    def _set(self, Linetype):
##        '-no docstring-'
##    ExtLine1Linetype = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Linetype
##    def _set(self, Linetype):
##        '-no docstring-'
##    ExtLine2Linetype = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bFixedLen
##    def _set(self, bFixedLen):
##        '-no docstring-'
##    ExtLineFixedLenSuppress = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return FixedLen
##    def _set(self, FixedLen):
##        '-no docstring-'
##    ExtLineFixedLen = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bIsDynamic
##    def _set(self, bIsDynamic):
##        '-no docstring-'
##    DimConstrForm = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bIsReference
##    def _set(self, bIsReference):
##        '-no docstring-'
##    DimConstrReference = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrName
##    def _set(self, bstrName):
##        '-no docstring-'
##    DimConstrName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrExpression
##    def _set(self, bstrExpression):
##        '-no docstring-'
##    DimConstrExpression = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    DimConstrValue = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrDescription
##    def _set(self, bstrDescription):
##        '-no docstring-'
##    DimConstrDesc = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return suffix
##    def _set(self, suffix):
##        '-no docstring-'
##    SubUnitsSuffix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return factor
##    def _set(self, factor):
##        '-no docstring-'
##    SubUnitsFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return suffix
##    def _set(self, suffix):
##        '-no docstring-'
##    AltSubUnitsSuffix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return factor
##    def _set(self, factor):
##        '-no docstring-'
##    AltSubUnitsFactor = property(_get, _set, doc = _set.__doc__)
##

class AcadDynamicBlockReferenceProperty(CoClass):
    _reg_clsid_ = GUID('{B3593347-A1DA-4935-8C70-21413D4F5FFF}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
class IAcadDynamicBlockReferenceProperty(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{453DEB34-3382-46BD-8BA3-5C5A4FBD280F}')
    _idlflags_ = ['dual', 'oleautomation']
AcadDynamicBlockReferenceProperty._com_interfaces_ = [IAcadDynamicBlockReferenceProperty]


# values for enumeration 'AcDynamicBlockReferencePropertyUnitsType'
acNoUnits = 0
acAngular = 1
acDistance = 2
acArea = 3
AcDynamicBlockReferencePropertyUnitsType = c_int # enum
class AcadAcCmColor(CoClass):
    _reg_clsid_ = GUID('{ADE381BD-D32B-4E2E-93D7-0DF3575710ED}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadAcCmColor._com_interfaces_ = [IAcadAcCmColor]

IAcadObjectEvents._methods_ = [
    COMMETHOD([], HRESULT, 'Modified',
              ( ['in'], POINTER(IAcadObject), 'pObject' )),
]
################################################################
## code template for IAcadObjectEvents implementation
##class IAcadObjectEvents_Impl(object):
##    def Modified(self, pObject):
##        '-no docstring-'
##        #return 
##


# values for enumeration 'AcSectionState2'
acSectionState2Plane = 1
acSectionState2Slice = 2
acSectionState2Boundary = 4
acSectionState2Volume = 8
AcSectionState2 = c_int # enum
class AcadObject(CoClass):
    _reg_clsid_ = GUID('{019768E6-D267-4031-8117-B2B1A10FD4A3}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadObject._com_interfaces_ = [IAcadObject]
AcadObject._outgoing_interfaces_ = [IAcadObjectEvents]

class IAcadCircle(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{55FAC7C1-D956-4DCE-A889-543A6DC545AE}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadCircle._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Center',
              ( ['out', 'retval'], POINTER(VARIANT), 'CenterPoint' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'Center',
              ( ['in'], VARIANT, 'CenterPoint' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'Radius',
              ( ['out', 'retval'], POINTER(c_double), 'Radius' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'Radius',
              ( ['in'], c_double, 'Radius' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'Diameter',
              ( ['out', 'retval'], POINTER(c_double), 'Diameter' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'Diameter',
              ( ['in'], c_double, 'Diameter' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'Circumference',
              ( ['out', 'retval'], POINTER(c_double), 'Circumference' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'Circumference',
              ( ['in'], c_double, 'Circumference' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'Area',
              ( ['out', 'retval'], POINTER(c_double), 'Area' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'Area',
              ( ['in'], c_double, 'Area' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'Normal',
              ( ['out', 'retval'], POINTER(VARIANT), 'Normal' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'Normal',
              ( ['in'], VARIANT, 'Normal' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'Thickness',
              ( ['out', 'retval'], POINTER(c_double), 'Thickness' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'Thickness',
              ( ['in'], c_double, 'Thickness' )),
    COMMETHOD([dispid(8)], HRESULT, 'Offset',
              ( ['in'], c_double, 'Distance' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'pOffsetCurves' )),
]
################################################################
## code template for IAcadCircle implementation
##class IAcadCircle_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return CenterPoint
##    def _set(self, CenterPoint):
##        '-no docstring-'
##    Center = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Radius
##    def _set(self, Radius):
##        '-no docstring-'
##    Radius = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Diameter
##    def _set(self, Diameter):
##        '-no docstring-'
##    Diameter = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Circumference
##    def _set(self, Circumference):
##        '-no docstring-'
##    Circumference = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Area
##    def _set(self, Area):
##        '-no docstring-'
##    Area = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Normal
##    def _set(self, Normal):
##        '-no docstring-'
##    Normal = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Thickness
##    def _set(self, Thickness):
##        '-no docstring-'
##    Thickness = property(_get, _set, doc = _set.__doc__)
##
##    def Offset(self, Distance):
##        '-no docstring-'
##        #return pOffsetCurves
##

class AcadXRecord(CoClass):
    _reg_clsid_ = GUID('{23CBC146-98D8-4E9E-A1E6-2919787F9576}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadXRecord._com_interfaces_ = [IAcadXRecord]
AcadXRecord._outgoing_interfaces_ = [IAcadObjectEvents]

class IAcadIdPair(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{1800AF96-E59B-47EE-9792-E98596E3EDF3}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadIdPair._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'IsCloned',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'IsOwnerXlated',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'IsPrimary',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'key',
              ( ['out', 'retval'], POINTER(LONG_PTR), 'pVal' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'Value',
              ( ['out', 'retval'], POINTER(LONG_PTR), 'pVal' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'Application',
              ( ['out', 'retval'], POINTER(POINTER(IDispatch)), 'ApplicationObject' )),
]
################################################################
## code template for IAcadIdPair implementation
##class IAcadIdPair_Impl(object):
##    @property
##    def IsCloned(self):
##        '-no docstring-'
##        #return pVal
##
##    @property
##    def IsOwnerXlated(self):
##        '-no docstring-'
##        #return pVal
##
##    @property
##    def IsPrimary(self):
##        '-no docstring-'
##        #return pVal
##
##    @property
##    def key(self):
##        '-no docstring-'
##        #return pVal
##
##    @property
##    def Value(self):
##        '-no docstring-'
##        #return pVal
##
##    @property
##    def Application(self):
##        '-no docstring-'
##        #return ApplicationObject
##

class IAcadMInsertBlock(IAcadBlockReference):
    _case_insensitive_ = True
    _iid_ = GUID('{1209185B-7180-482C-A261-3B4522C15D96}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadMInsertBlock._methods_ = [
    COMMETHOD([dispid(256), 'propput'], HRESULT, 'Columns',
              ( ['in'], c_int, 'NumColumns' )),
    COMMETHOD([dispid(256), 'propget'], HRESULT, 'Columns',
              ( ['out', 'retval'], POINTER(c_int), 'NumColumns' )),
    COMMETHOD([dispid(257), 'propput'], HRESULT, 'ColumnSpacing',
              ( ['in'], c_double, 'Spacing' )),
    COMMETHOD([dispid(257), 'propget'], HRESULT, 'ColumnSpacing',
              ( ['out', 'retval'], POINTER(c_double), 'Spacing' )),
    COMMETHOD([dispid(258), 'propput'], HRESULT, 'Rows',
              ( ['in'], c_int, 'NumRows' )),
    COMMETHOD([dispid(258), 'propget'], HRESULT, 'Rows',
              ( ['out', 'retval'], POINTER(c_int), 'NumRows' )),
    COMMETHOD([dispid(259), 'propput'], HRESULT, 'RowSpacing',
              ( ['in'], c_double, 'Spacing' )),
    COMMETHOD([dispid(259), 'propget'], HRESULT, 'RowSpacing',
              ( ['out', 'retval'], POINTER(c_double), 'Spacing' )),
]
################################################################
## code template for IAcadMInsertBlock implementation
##class IAcadMInsertBlock_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return NumColumns
##    def _set(self, NumColumns):
##        '-no docstring-'
##    Columns = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Spacing
##    def _set(self, Spacing):
##        '-no docstring-'
##    ColumnSpacing = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return NumRows
##    def _set(self, NumRows):
##        '-no docstring-'
##    Rows = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Spacing
##    def _set(self, Spacing):
##        '-no docstring-'
##    RowSpacing = property(_get, _set, doc = _set.__doc__)
##

class IAcadPlotConfiguration(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{7611472B-E81B-4F50-903A-6FDE34CFA9D7}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadLayout(IAcadPlotConfiguration):
    _case_insensitive_ = True
    _iid_ = GUID('{482ED7B3-2ED1-4B22-A0C2-F94CF5BDE39B}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadPlotConfiguration._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pName' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'Name',
              ( ['in'], BSTR, 'pName' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'ConfigName',
              ( ['out', 'retval'], POINTER(BSTR), 'pName' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'ConfigName',
              ( ['in'], BSTR, 'pName' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'CanonicalMediaName',
              ( ['out', 'retval'], POINTER(BSTR), 'pName' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'CanonicalMediaName',
              ( ['in'], BSTR, 'pName' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'PaperUnits',
              ( ['out', 'retval'], POINTER(AcPlotPaperUnits), 'pPaperUnits' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'PaperUnits',
              ( ['in'], AcPlotPaperUnits, 'pPaperUnits' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'PlotViewportBorders',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pViewportBorders' )),
    COMMETHOD([dispid(8), 'propput'], HRESULT, 'PlotViewportBorders',
              ( ['in'], VARIANT_BOOL, 'pViewportBorders' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'ShowPlotStyles',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pStyles' )),
    COMMETHOD([dispid(9), 'propput'], HRESULT, 'ShowPlotStyles',
              ( ['in'], VARIANT_BOOL, 'pStyles' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'PlotRotation',
              ( ['out', 'retval'], POINTER(AcPlotRotation), 'pRotation' )),
    COMMETHOD([dispid(10), 'propput'], HRESULT, 'PlotRotation',
              ( ['in'], AcPlotRotation, 'pRotation' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'CenterPlot',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pCentered' )),
    COMMETHOD([dispid(11), 'propput'], HRESULT, 'CenterPlot',
              ( ['in'], VARIANT_BOOL, 'pCentered' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'PlotHidden',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pHidden' )),
    COMMETHOD([dispid(12), 'propput'], HRESULT, 'PlotHidden',
              ( ['in'], VARIANT_BOOL, 'pHidden' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'PlotType',
              ( ['out', 'retval'], POINTER(AcPlotType), 'pType' )),
    COMMETHOD([dispid(13), 'propput'], HRESULT, 'PlotType',
              ( ['in'], AcPlotType, 'pType' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'ViewToPlot',
              ( ['out', 'retval'], POINTER(BSTR), 'pName' )),
    COMMETHOD([dispid(14), 'propput'], HRESULT, 'ViewToPlot',
              ( ['in'], BSTR, 'pName' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'UseStandardScale',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pUseStdScale' )),
    COMMETHOD([dispid(15), 'propput'], HRESULT, 'UseStandardScale',
              ( ['in'], VARIANT_BOOL, 'pUseStdScale' )),
    COMMETHOD([dispid(16), 'propget'], HRESULT, 'StandardScale',
              ( ['out', 'retval'], POINTER(AcPlotScale), 'pStdScale' )),
    COMMETHOD([dispid(16), 'propput'], HRESULT, 'StandardScale',
              ( ['in'], AcPlotScale, 'pStdScale' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetCustomScale',
              ( ['out'], POINTER(c_double), 'Numerator' ),
              ( ['out'], POINTER(c_double), 'Denominator' )),
    COMMETHOD([dispid(18)], HRESULT, 'SetCustomScale',
              ( ['in'], c_double, 'Numerator' ),
              ( ['in'], c_double, 'Denominator' )),
    COMMETHOD([dispid(20), 'propget'], HRESULT, 'ScaleLineweights',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pScale' )),
    COMMETHOD([dispid(20), 'propput'], HRESULT, 'ScaleLineweights',
              ( ['in'], VARIANT_BOOL, 'pScale' )),
    COMMETHOD([dispid(21), 'propget'], HRESULT, 'PlotWithLineweights',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pPlot' )),
    COMMETHOD([dispid(21), 'propput'], HRESULT, 'PlotWithLineweights',
              ( ['in'], VARIANT_BOOL, 'pPlot' )),
    COMMETHOD([dispid(24), 'propget'], HRESULT, 'PlotViewportsFirst',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pViewportsFirst' )),
    COMMETHOD([dispid(24), 'propput'], HRESULT, 'PlotViewportsFirst',
              ( ['in'], VARIANT_BOOL, 'pViewportsFirst' )),
    COMMETHOD([dispid(25), 'propget'], HRESULT, 'StyleSheet',
              ( ['out', 'retval'], POINTER(BSTR), 'pName' )),
    COMMETHOD([dispid(25), 'propput'], HRESULT, 'StyleSheet',
              ( ['in'], BSTR, 'pName' )),
    COMMETHOD([dispid(26)], HRESULT, 'GetPaperMargins',
              ( ['out'], POINTER(VARIANT), 'LowerLeft' ),
              ( ['out'], POINTER(VARIANT), 'UpperRight' )),
    COMMETHOD([dispid(28)], HRESULT, 'GetPaperSize',
              ( ['out'], POINTER(c_double), 'Width' ),
              ( ['out'], POINTER(c_double), 'Height' )),
    COMMETHOD([dispid(30), 'propget'], HRESULT, 'PlotOrigin',
              ( ['out', 'retval'], POINTER(VARIANT), 'pOrigin' )),
    COMMETHOD([dispid(30), 'propput'], HRESULT, 'PlotOrigin',
              ( ['in'], VARIANT, 'pOrigin' )),
    COMMETHOD([dispid(31)], HRESULT, 'GetWindowToPlot',
              ( ['out'], POINTER(VARIANT), 'LowerLeft' ),
              ( ['out'], POINTER(VARIANT), 'UpperRight' )),
    COMMETHOD([dispid(32)], HRESULT, 'SetWindowToPlot',
              ( ['in'], VARIANT, 'LowerLeft' ),
              ( ['in'], VARIANT, 'UpperRight' )),
    COMMETHOD([dispid(33), 'propget'], HRESULT, 'PlotWithPlotStyles',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pStyles' )),
    COMMETHOD([dispid(33), 'propput'], HRESULT, 'PlotWithPlotStyles',
              ( ['in'], VARIANT_BOOL, 'pStyles' )),
    COMMETHOD([dispid(34), 'propget'], HRESULT, 'ModelType',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pType' )),
    COMMETHOD([dispid(35)], HRESULT, 'CopyFrom',
              ( ['in'], POINTER(IAcadPlotConfiguration), 'pPlotConfig' )),
    COMMETHOD([dispid(36)], HRESULT, 'GetCanonicalMediaNames',
              ( ['out', 'retval'], POINTER(VARIANT), 'pNames' )),
    COMMETHOD([dispid(37)], HRESULT, 'GetPlotDeviceNames',
              ( ['out', 'retval'], POINTER(VARIANT), 'pNames' )),
    COMMETHOD([dispid(38)], HRESULT, 'GetPlotStyleTableNames',
              ( ['out', 'retval'], POINTER(VARIANT), 'pNames' )),
    COMMETHOD([dispid(39)], HRESULT, 'RefreshPlotDeviceInfo'),
    COMMETHOD([dispid(40)], HRESULT, 'GetLocaleMediaName',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(BSTR), 'pLocalName' )),
]
################################################################
## code template for IAcadPlotConfiguration implementation
##class IAcadPlotConfiguration_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return pName
##    def _set(self, pName):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pName
##    def _set(self, pName):
##        '-no docstring-'
##    ConfigName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pName
##    def _set(self, pName):
##        '-no docstring-'
##    CanonicalMediaName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pPaperUnits
##    def _set(self, pPaperUnits):
##        '-no docstring-'
##    PaperUnits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pViewportBorders
##    def _set(self, pViewportBorders):
##        '-no docstring-'
##    PlotViewportBorders = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pStyles
##    def _set(self, pStyles):
##        '-no docstring-'
##    ShowPlotStyles = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pRotation
##    def _set(self, pRotation):
##        '-no docstring-'
##    PlotRotation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pCentered
##    def _set(self, pCentered):
##        '-no docstring-'
##    CenterPlot = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pHidden
##    def _set(self, pHidden):
##        '-no docstring-'
##    PlotHidden = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pType
##    def _set(self, pType):
##        '-no docstring-'
##    PlotType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pName
##    def _set(self, pName):
##        '-no docstring-'
##    ViewToPlot = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pUseStdScale
##    def _set(self, pUseStdScale):
##        '-no docstring-'
##    UseStandardScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pStdScale
##    def _set(self, pStdScale):
##        '-no docstring-'
##    StandardScale = property(_get, _set, doc = _set.__doc__)
##
##    def GetCustomScale(self):
##        '-no docstring-'
##        #return Numerator, Denominator
##
##    def SetCustomScale(self, Numerator, Denominator):
##        '-no docstring-'
##        #return 
##
##    def _get(self):
##        '-no docstring-'
##        #return pScale
##    def _set(self, pScale):
##        '-no docstring-'
##    ScaleLineweights = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pPlot
##    def _set(self, pPlot):
##        '-no docstring-'
##    PlotWithLineweights = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pViewportsFirst
##    def _set(self, pViewportsFirst):
##        '-no docstring-'
##    PlotViewportsFirst = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pName
##    def _set(self, pName):
##        '-no docstring-'
##    StyleSheet = property(_get, _set, doc = _set.__doc__)
##
##    def GetPaperMargins(self):
##        '-no docstring-'
##        #return LowerLeft, UpperRight
##
##    def GetPaperSize(self):
##        '-no docstring-'
##        #return Width, Height
##
##    def _get(self):
##        '-no docstring-'
##        #return pOrigin
##    def _set(self, pOrigin):
##        '-no docstring-'
##    PlotOrigin = property(_get, _set, doc = _set.__doc__)
##
##    def GetWindowToPlot(self):
##        '-no docstring-'
##        #return LowerLeft, UpperRight
##
##    def SetWindowToPlot(self, LowerLeft, UpperRight):
##        '-no docstring-'
##        #return 
##
##    def _get(self):
##        '-no docstring-'
##        #return pStyles
##    def _set(self, pStyles):
##        '-no docstring-'
##    PlotWithPlotStyles = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ModelType(self):
##        '-no docstring-'
##        #return pType
##
##    def CopyFrom(self, pPlotConfig):
##        '-no docstring-'
##        #return 
##
##    def GetCanonicalMediaNames(self):
##        '-no docstring-'
##        #return pNames
##
##    def GetPlotDeviceNames(self):
##        '-no docstring-'
##        #return pNames
##
##    def GetPlotStyleTableNames(self):
##        '-no docstring-'
##        #return pNames
##
##    def RefreshPlotDeviceInfo(self):
##        '-no docstring-'
##        #return 
##
##    def GetLocaleMediaName(self, Name):
##        '-no docstring-'
##        #return pLocalName
##

IAcadLayout._methods_ = [
    COMMETHOD([dispid(48), 'propget'], HRESULT, 'Block',
              ( ['out', 'retval'], POINTER(POINTER(IAcadBlock)), 'pBlock' )),
    COMMETHOD([dispid(49), 'propget'], HRESULT, 'TabOrder',
              ( ['out', 'retval'], POINTER(c_int), 'pOrder' )),
    COMMETHOD([dispid(49), 'propput'], HRESULT, 'TabOrder',
              ( ['in'], c_int, 'pOrder' )),
]
################################################################
## code template for IAcadLayout implementation
##class IAcadLayout_Impl(object):
##    @property
##    def Block(self):
##        '-no docstring-'
##        #return pBlock
##
##    def _get(self):
##        '-no docstring-'
##        #return pOrder
##    def _set(self, pOrder):
##        '-no docstring-'
##    TabOrder = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'AcSaveAsType'
acUnknown = -1
acR12_dxf = 1
acR13_dwg = 4
acR13_dxf = 5
acR14_dwg = 8
acR14_dxf = 9
ac2000_dwg = 12
ac2000_dxf = 13
ac2000_Template = 14
ac2004_dwg = 24
ac2004_dxf = 25
ac2004_Template = 26
ac2007_dwg = 36
ac2007_dxf = 37
ac2007_Template = 38
ac2010_dwg = 48
ac2010_dxf = 49
ac2010_Template = 50
ac2013_dwg = 60
ac2013_dxf = 61
ac2013_Template = 62
ac2018_dwg = 64
ac2018_dxf = 65
ac2018_Template = 66
acNative = 64
acR15_dwg = 12
acR15_dxf = 13
acR15_Template = 14
acR18_dwg = 24
acR18_dxf = 25
acR18_Template = 26
AcSaveAsType = c_int # enum
class AcadSortentsTable(CoClass):
    _reg_clsid_ = GUID('{712D0FAE-2064-4583-8D92-FA0118C60C11}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadSortentsTable._com_interfaces_ = [IAcadSortentsTable]
AcadSortentsTable._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadDimStyle(CoClass):
    _reg_clsid_ = GUID('{F2DCADF9-A4EF-4DEE-ABCB-47C7CA9E10CF}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
class IAcadDimStyle(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{DB03A9BA-2C02-42DE-8E3A-42218C6348AB}')
    _idlflags_ = ['dual', 'oleautomation']
AcadDimStyle._com_interfaces_ = [IAcadDimStyle]
AcadDimStyle._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadLayer(CoClass):
    _reg_clsid_ = GUID('{A466FCE1-E28A-4483-B21E-A7B81F80E6AD}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
class IAcadLayer(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{39B98C50-1931-464B-903D-50A734FA3FB4}')
    _idlflags_ = ['dual', 'oleautomation']
AcadLayer._com_interfaces_ = [IAcadLayer]
AcadLayer._outgoing_interfaces_ = [IAcadObjectEvents]


# values for enumeration 'AcHelixConstrainType'
acTurnHeight = 0
acTurns = 1
acHeight = 2
AcHelixConstrainType = c_int # enum
class AcadLineType(CoClass):
    _reg_clsid_ = GUID('{F1DD5F23-20B5-43B8-BB0E-D0E587038143}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadLineType._com_interfaces_ = [IAcadLineType]
AcadLineType._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadMaterial(CoClass):
    _reg_clsid_ = GUID('{850EB596-2512-4403-B411-C82658C8F2F6}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadMaterial._com_interfaces_ = [IAcadMaterial]
AcadMaterial._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadRegisteredApplication(CoClass):
    _reg_clsid_ = GUID('{E78A05F9-0BAE-4D39-B0CE-3A49FCBC8F59}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadRegisteredApplication._com_interfaces_ = [IAcadRegisteredApplication]
AcadRegisteredApplication._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadTextStyle(CoClass):
    _reg_clsid_ = GUID('{046FFE5D-7C9F-4A63-902B-F94AD6671522}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadTextStyle._com_interfaces_ = [IAcadTextStyle]
AcadTextStyle._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadUCS(CoClass):
    _reg_clsid_ = GUID('{7667F63F-9932-4848-A40F-0F853706F6B9}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
class IAcadUCS(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{E5C0B2DA-BC5A-4A5D-A651-68F7EA1BC1E2}')
    _idlflags_ = ['dual', 'oleautomation']
AcadUCS._com_interfaces_ = [IAcadUCS]
AcadUCS._outgoing_interfaces_ = [IAcadObjectEvents]


# values for enumeration 'AcLoftedSurfaceNormalType'
acRuled = 0
acSmooth = 1
acFirstNormal = 2
acLastNormal = 3
acEndsNormal = 4
acAllNormal = 5
acUseDraftAngles = 6
AcLoftedSurfaceNormalType = c_int # enum
class AcadView(CoClass):
    _reg_clsid_ = GUID('{A79EB9E4-C596-4B44-AF05-354DE929F077}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadView._com_interfaces_ = [IAcadView]
AcadView._outgoing_interfaces_ = [IAcadObjectEvents]

class IAcadLine(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{168E880E-F8D0-4C61-9DFE-65D03908B69B}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadLine._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'StartPoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'StartPoint' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'StartPoint',
              ( ['in'], VARIANT, 'StartPoint' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'EndPoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'EndPoint' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'EndPoint',
              ( ['in'], VARIANT, 'EndPoint' )),
    COMMETHOD([dispid(3), 'nonbrowsable', 'propget'], HRESULT, 'Normal',
              ( ['out', 'retval'], POINTER(VARIANT), 'Normal' )),
    COMMETHOD([dispid(3), 'nonbrowsable', 'propput'], HRESULT, 'Normal',
              ( ['in'], VARIANT, 'Normal' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'Thickness',
              ( ['out', 'retval'], POINTER(c_double), 'Thickness' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'Thickness',
              ( ['in'], c_double, 'Thickness' )),
    COMMETHOD([dispid(5)], HRESULT, 'Offset',
              ( ['in'], c_double, 'Distance' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'pOffsetCurves' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'Delta',
              ( ['out', 'retval'], POINTER(VARIANT), 'Delta' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'Length',
              ( ['out', 'retval'], POINTER(c_double), 'Length' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'Angle',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'Angle' )),
]
################################################################
## code template for IAcadLine implementation
##class IAcadLine_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return StartPoint
##    def _set(self, StartPoint):
##        '-no docstring-'
##    StartPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return EndPoint
##    def _set(self, EndPoint):
##        '-no docstring-'
##    EndPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Normal
##    def _set(self, Normal):
##        '-no docstring-'
##    Normal = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Thickness
##    def _set(self, Thickness):
##        '-no docstring-'
##    Thickness = property(_get, _set, doc = _set.__doc__)
##
##    def Offset(self, Distance):
##        '-no docstring-'
##        #return pOffsetCurves
##
##    @property
##    def Delta(self):
##        '-no docstring-'
##        #return Delta
##
##    @property
##    def Length(self):
##        '-no docstring-'
##        #return Length
##
##    @property
##    def Angle(self):
##        '-no docstring-'
##        #return Angle
##

class AcadViewport(CoClass):
    _reg_clsid_ = GUID('{77CB9A09-C61D-4506-8B7A-0A9110E5C321}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
class IAcadViewport(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{1AD05D35-5EE6-4650-B305-F901C62CB438}')
    _idlflags_ = ['dual', 'oleautomation']
AcadViewport._com_interfaces_ = [IAcadViewport]
AcadViewport._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadGroup(CoClass):
    _reg_clsid_ = GUID('{3CDCC615-9670-48C7-877B-26ADA80520A2}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadGroup._com_interfaces_ = [IAcadGroup]
AcadGroup._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadPlotConfiguration(CoClass):
    _reg_clsid_ = GUID('{F455089D-B191-4903-9242-3A16F95DC812}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadPlotConfiguration._com_interfaces_ = [IAcadPlotConfiguration]
AcadPlotConfiguration._outgoing_interfaces_ = [IAcadObjectEvents]


# values for enumeration 'AcHelixTwistType'
acCCW = 0
acCW = 1
AcHelixTwistType = c_int # enum
class AcadLayout(CoClass):
    _reg_clsid_ = GUID('{F887D63A-8593-4C81-81C8-35856B97BB0E}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadLayout._com_interfaces_ = [IAcadLayout]
AcadLayout._outgoing_interfaces_ = [IAcadObjectEvents]

class IAcadTableStyle(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{DC9C2CB5-1BF9-4CAF-8311-0D98EFC34CEA}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadTableStyle._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrValue' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'Name',
              ( ['in'], BSTR, 'bstrValue' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'bstr' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'Description',
              ( ['in'], BSTR, 'bstr' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'BitFlags',
              ( ['out', 'retval'], POINTER(c_int), 'bitFlag' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'BitFlags',
              ( ['in'], c_int, 'bitFlag' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'FlowDirection',
              ( ['out', 'retval'], POINTER(AcTableDirection), 'pFlow' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'FlowDirection',
              ( ['in'], AcTableDirection, 'pFlow' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'HorzCellMargin',
              ( ['out', 'retval'], POINTER(c_double), 'dHorzCellMargin' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'HorzCellMargin',
              ( ['in'], c_double, 'dHorzCellMargin' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'VertCellMargin',
              ( ['out', 'retval'], POINTER(c_double), 'dVertCellMargin' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'VertCellMargin',
              ( ['in'], c_double, 'dVertCellMargin' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'TitleSuppressed',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'TitleSuppressed',
              ( ['in'], VARIANT_BOOL, 'bValue' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'HeaderSuppressed',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue' )),
    COMMETHOD([dispid(8), 'propput'], HRESULT, 'HeaderSuppressed',
              ( ['in'], VARIANT_BOOL, 'bValue' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetTextStyle',
              ( ['in'], AcRowType, 'rowType' ),
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(10)], HRESULT, 'SetTextStyle',
              ( ['in'], c_int, 'rowTypes' ),
              ( ['in'], BSTR, 'bstrName' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetTextHeight',
              ( ['in'], AcRowType, 'rowType' ),
              ( ['out', 'retval'], POINTER(c_double), 'pTextHeight' )),
    COMMETHOD([dispid(12)], HRESULT, 'SetTextHeight',
              ( ['in'], c_int, 'rowTypes' ),
              ( ['in'], c_double, 'TextHeight' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetAlignment',
              ( ['in'], AcRowType, 'rowType' ),
              ( ['out', 'retval'], POINTER(AcCellAlignment), 'pCellAlignment' )),
    COMMETHOD([dispid(14)], HRESULT, 'SetAlignment',
              ( ['in'], c_int, 'rowTypes' ),
              ( ['in'], AcCellAlignment, 'cellAlignment' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetColor',
              ( ['in'], AcRowType, 'rowType' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor' )),
    COMMETHOD([dispid(16)], HRESULT, 'SetColor',
              ( ['in'], c_int, 'rowTypes' ),
              ( ['in'], POINTER(IAcadAcCmColor), 'pColor' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetBackgroundColor',
              ( ['in'], AcRowType, 'rowType' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor' )),
    COMMETHOD([dispid(18)], HRESULT, 'SetBackgroundColor',
              ( ['in'], c_int, 'rowTypes' ),
              ( ['in'], POINTER(IAcadAcCmColor), 'pColor' )),
    COMMETHOD([dispid(19)], HRESULT, 'GetBackgroundColorNone',
              ( ['in'], AcRowType, 'rowType' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue' )),
    COMMETHOD([dispid(20)], HRESULT, 'SetBackgroundColorNone',
              ( ['in'], c_int, 'rowTypes' ),
              ( ['in'], POINTER(VARIANT_BOOL), 'bValue' )),
    COMMETHOD([dispid(21)], HRESULT, 'GetGridLineWeight',
              ( ['in'], AcGridLineType, 'gridLineType' ),
              ( ['in'], AcRowType, 'rowType' ),
              ( ['out', 'retval'], POINTER(ACAD_LWEIGHT), 'Lineweight' )),
    COMMETHOD([dispid(22)], HRESULT, 'SetGridLineWeight',
              ( ['in'], c_int, 'gridLineTypes' ),
              ( ['in'], c_int, 'rowTypes' ),
              ( ['in'], ACAD_LWEIGHT, 'Lineweight' )),
    COMMETHOD([dispid(23)], HRESULT, 'GetGridColor',
              ( ['in'], AcGridLineType, 'gridLineType' ),
              ( ['in'], AcRowType, 'rowType' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor' )),
    COMMETHOD([dispid(24)], HRESULT, 'SetGridColor',
              ( ['in'], c_int, 'gridLineTypes' ),
              ( ['in'], c_int, 'rowTypes' ),
              ( ['in'], POINTER(IAcadAcCmColor), 'pColor' )),
    COMMETHOD([dispid(25)], HRESULT, 'GetGridVisibility',
              ( ['in'], AcGridLineType, 'gridLineType' ),
              ( ['in'], AcRowType, 'rowType' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue' )),
    COMMETHOD([dispid(26)], HRESULT, 'SetGridVisibility',
              ( ['in'], c_int, 'gridLineTypes' ),
              ( ['in'], c_int, 'rowTypes' ),
              ( ['in'], VARIANT_BOOL, 'bValue' )),
    COMMETHOD([dispid(27)], HRESULT, 'GetDataType',
              ( ['in'], AcRowType, 'rowType' ),
              ( ['out'], POINTER(AcValueDataType), 'pDataType' ),
              ( ['out'], POINTER(AcValueUnitType), 'pUnitType' )),
    COMMETHOD([dispid(28)], HRESULT, 'SetDataType',
              ( ['in'], c_int, 'rowTypes' ),
              ( ['in'], AcValueDataType, 'nDataType' ),
              ( ['in'], AcValueUnitType, 'nUnitType' )),
    COMMETHOD([dispid(29)], HRESULT, 'GetFormat',
              ( ['in'], AcRowType, 'rowType' ),
              ( ['out', 'retval'], POINTER(BSTR), 'pVal' )),
    COMMETHOD([dispid(30)], HRESULT, 'SetFormat',
              ( ['in'], c_int, 'rowTypes' ),
              ( ['in'], BSTR, 'val' )),
    COMMETHOD([dispid(31)], HRESULT, 'CreateCellStyle',
              ( ['in'], BSTR, 'bstrCellStyle' )),
    COMMETHOD([dispid(32)], HRESULT, 'CreateCellStyleFromStyle',
              ( ['in'], BSTR, 'bstrCellStyle' ),
              ( ['in'], BSTR, 'bstrSourceCellStyle' )),
    COMMETHOD([dispid(33)], HRESULT, 'RenameCellStyle',
              ( ['in'], BSTR, 'bstrOldName' ),
              ( ['in'], BSTR, 'bstrNewName' )),
    COMMETHOD([dispid(34)], HRESULT, 'DeleteCellStyle',
              ( ['in'], BSTR, 'bstrCellStyle' )),
    COMMETHOD([dispid(35)], HRESULT, 'GetUniqueCellStyleName',
              ( ['in'], BSTR, 'pszBaseName' ),
              ( ['out', 'retval'], POINTER(BSTR), 'pbstrUniqueName' )),
    COMMETHOD([dispid(36)], HRESULT, 'GetIsCellStyleInUse',
              ( ['in'], BSTR, 'pszCellStyle' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal' )),
    COMMETHOD([dispid(37), 'propget'], HRESULT, 'NumCellStyles',
              ( ['out', 'retval'], POINTER(c_int), 'NumCellStyles' )),
    COMMETHOD([dispid(38)], HRESULT, 'GetCellStyles',
              ( ['in'], POINTER(VARIANT), 'cellStylesArray' )),
    COMMETHOD([dispid(39)], HRESULT, 'GetTextStyleId',
              ( ['in'], BSTR, 'bstrCellStyle' ),
              ( ['out', 'retval'], POINTER(LONG_PTR), 'pVal' )),
    COMMETHOD([dispid(40)], HRESULT, 'SetTextStyleId',
              ( ['in'], BSTR, 'bstrCellStyle' ),
              ( ['in'], LONG_PTR, 'val' )),
    COMMETHOD([dispid(41)], HRESULT, 'GetTextHeight2',
              ( ['in'], BSTR, 'bstrCellStyle' ),
              ( ['out', 'retval'], POINTER(c_double), 'pHeight' )),
    COMMETHOD([dispid(42)], HRESULT, 'SetTextHeight2',
              ( ['in'], BSTR, 'bstrCellStyle' ),
              ( ['in'], c_double, 'Height' )),
    COMMETHOD([dispid(43)], HRESULT, 'GetAlignment2',
              ( ['in'], BSTR, 'bstrCellStyle' ),
              ( ['out', 'retval'], POINTER(AcCellAlignment), 'pCellAlignment' )),
    COMMETHOD([dispid(44)], HRESULT, 'SetAlignment2',
              ( ['in'], BSTR, 'bstrCellStyle' ),
              ( ['in'], AcCellAlignment, 'cellAlignment' )),
    COMMETHOD([dispid(45)], HRESULT, 'GetColor2',
              ( ['in'], BSTR, 'bstrCellStyle' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'color' )),
    COMMETHOD([dispid(46)], HRESULT, 'SetColor2',
              ( ['in'], BSTR, 'bstrCellStyle' ),
              ( ['in'], POINTER(IAcadAcCmColor), 'color' )),
    COMMETHOD([dispid(47)], HRESULT, 'GetBackgroundColor2',
              ( ['in'], BSTR, 'bstrCellStyle' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'color' )),
    COMMETHOD([dispid(48)], HRESULT, 'SetBackgroundColor2',
              ( ['in'], BSTR, 'bstrCellStyle' ),
              ( ['in'], POINTER(IAcadAcCmColor), 'color' )),
    COMMETHOD([dispid(51)], HRESULT, 'GetDataType2',
              ( ['in'], BSTR, 'bstrCellStyle' ),
              ( ['out'], POINTER(AcValueDataType), 'pDataType' ),
              ( ['out'], POINTER(AcValueUnitType), 'pUnitType' )),
    COMMETHOD([dispid(52)], HRESULT, 'SetDataType2',
              ( ['in'], BSTR, 'bstrCellStyle' ),
              ( ['in'], AcValueDataType, 'nDataType' ),
              ( ['in'], AcValueUnitType, 'nUnitType' )),
    COMMETHOD([dispid(53)], HRESULT, 'GetFormat2',
              ( ['in'], BSTR, 'bstrCellStyle' ),
              ( ['out'], POINTER(BSTR), 'pbstrFormat' )),
    COMMETHOD([dispid(54)], HRESULT, 'SetFormat2',
              ( ['in'], BSTR, 'bstrCellStyle' ),
              ( ['in'], BSTR, 'bstrFormat' )),
    COMMETHOD([dispid(1610809404)], HRESULT, 'GetCellClass',
              ( ['in'], BSTR, 'bstrCellStyle' ),
              ( ['out', 'retval'], POINTER(c_int), 'cellClass' )),
    COMMETHOD([dispid(1610809405)], HRESULT, 'SetCellClass',
              ( ['in'], BSTR, 'bstrCellStyle' ),
              ( ['in'], c_int, 'cellClass' )),
    COMMETHOD([dispid(1610809406)], HRESULT, 'GetRotation',
              ( ['in'], BSTR, 'bstrCellStyle' ),
              ( ['out', 'retval'], POINTER(c_double), 'Rotation' )),
    COMMETHOD([dispid(1610809407)], HRESULT, 'SetRotation',
              ( ['in'], BSTR, 'bstrCellStyle' ),
              ( ['in'], c_double, 'Rotation' )),
    COMMETHOD([dispid(1610809408)], HRESULT, 'GetIsMergeAllEnabled',
              ( ['in'], BSTR, 'bstrCellStyle' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bEnable' )),
    COMMETHOD([dispid(1610809409)], HRESULT, 'EnableMergeAll',
              ( ['in'], BSTR, 'bstrCellStyle' ),
              ( ['in'], VARIANT_BOOL, 'bEnable' )),
    COMMETHOD([dispid(55)], HRESULT, 'GetGridLineWeight2',
              ( ['in'], BSTR, 'bstrCellStyle' ),
              ( ['in'], AcGridLineType, 'gridLineType' ),
              ( ['out', 'retval'], POINTER(ACAD_LWEIGHT), 'Lineweight' )),
    COMMETHOD([dispid(56)], HRESULT, 'SetGridLineWeight2',
              ( ['in'], BSTR, 'bstrCellStyle' ),
              ( ['in'], AcGridLineType, 'gridLineTypes' ),
              ( ['in'], ACAD_LWEIGHT, 'Lineweight' )),
    COMMETHOD([dispid(57)], HRESULT, 'GetGridColor2',
              ( ['in'], BSTR, 'bstrCellStyle' ),
              ( ['in'], AcGridLineType, 'gridLineType' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor' )),
    COMMETHOD([dispid(58)], HRESULT, 'SetGridColor2',
              ( ['in'], BSTR, 'bstrCellStyle' ),
              ( ['in'], AcGridLineType, 'gridLineTypes' ),
              ( ['in'], POINTER(IAcadAcCmColor), 'pColor' )),
    COMMETHOD([dispid(59)], HRESULT, 'GetGridVisibility2',
              ( ['in'], BSTR, 'bstrCellStyle' ),
              ( ['in'], AcGridLineType, 'gridLineType' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bValue' )),
    COMMETHOD([dispid(60)], HRESULT, 'SetGridVisibility2',
              ( ['in'], BSTR, 'bstrCellStyle' ),
              ( ['in'], AcGridLineType, 'gridLineTypes' ),
              ( ['in'], VARIANT_BOOL, 'bValue' )),
    COMMETHOD([dispid(61), 'propget'], HRESULT, 'TemplateId',
              ( ['out', 'retval'], POINTER(LONG_PTR), 'pVal' )),
    COMMETHOD([dispid(61), 'propput'], HRESULT, 'TemplateId',
              ( ['in'], LONG_PTR, 'pVal' )),
    COMMETHOD([dispid(65)], HRESULT, 'SetTemplateId',
              ( ['in'], LONG_PTR, 'val' ),
              ( [], AcMergeCellStyleOption, 'option' )),
]
################################################################
## code template for IAcadTableStyle implementation
##class IAcadTableStyle_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return bstrValue
##    def _set(self, bstrValue):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstr
##    def _set(self, bstr):
##        '-no docstring-'
##    Description = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bitFlag
##    def _set(self, bitFlag):
##        '-no docstring-'
##    BitFlags = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pFlow
##    def _set(self, pFlow):
##        '-no docstring-'
##    FlowDirection = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return dHorzCellMargin
##    def _set(self, dHorzCellMargin):
##        '-no docstring-'
##    HorzCellMargin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return dVertCellMargin
##    def _set(self, dVertCellMargin):
##        '-no docstring-'
##    VertCellMargin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bValue
##    def _set(self, bValue):
##        '-no docstring-'
##    TitleSuppressed = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bValue
##    def _set(self, bValue):
##        '-no docstring-'
##    HeaderSuppressed = property(_get, _set, doc = _set.__doc__)
##
##    def GetTextStyle(self, rowType):
##        '-no docstring-'
##        #return bstrName
##
##    def SetTextStyle(self, rowTypes, bstrName):
##        '-no docstring-'
##        #return 
##
##    def GetTextHeight(self, rowType):
##        '-no docstring-'
##        #return pTextHeight
##
##    def SetTextHeight(self, rowTypes, TextHeight):
##        '-no docstring-'
##        #return 
##
##    def GetAlignment(self, rowType):
##        '-no docstring-'
##        #return pCellAlignment
##
##    def SetAlignment(self, rowTypes, cellAlignment):
##        '-no docstring-'
##        #return 
##
##    def GetColor(self, rowType):
##        '-no docstring-'
##        #return pColor
##
##    def SetColor(self, rowTypes, pColor):
##        '-no docstring-'
##        #return 
##
##    def GetBackgroundColor(self, rowType):
##        '-no docstring-'
##        #return pColor
##
##    def SetBackgroundColor(self, rowTypes, pColor):
##        '-no docstring-'
##        #return 
##
##    def GetBackgroundColorNone(self, rowType):
##        '-no docstring-'
##        #return bValue
##
##    def SetBackgroundColorNone(self, rowTypes, bValue):
##        '-no docstring-'
##        #return 
##
##    def GetGridLineWeight(self, gridLineType, rowType):
##        '-no docstring-'
##        #return Lineweight
##
##    def SetGridLineWeight(self, gridLineTypes, rowTypes, Lineweight):
##        '-no docstring-'
##        #return 
##
##    def GetGridColor(self, gridLineType, rowType):
##        '-no docstring-'
##        #return pColor
##
##    def SetGridColor(self, gridLineTypes, rowTypes, pColor):
##        '-no docstring-'
##        #return 
##
##    def GetGridVisibility(self, gridLineType, rowType):
##        '-no docstring-'
##        #return bValue
##
##    def SetGridVisibility(self, gridLineTypes, rowTypes, bValue):
##        '-no docstring-'
##        #return 
##
##    def GetDataType(self, rowType):
##        '-no docstring-'
##        #return pDataType, pUnitType
##
##    def SetDataType(self, rowTypes, nDataType, nUnitType):
##        '-no docstring-'
##        #return 
##
##    def GetFormat(self, rowType):
##        '-no docstring-'
##        #return pVal
##
##    def SetFormat(self, rowTypes, val):
##        '-no docstring-'
##        #return 
##
##    def CreateCellStyle(self, bstrCellStyle):
##        '-no docstring-'
##        #return 
##
##    def CreateCellStyleFromStyle(self, bstrCellStyle, bstrSourceCellStyle):
##        '-no docstring-'
##        #return 
##
##    def RenameCellStyle(self, bstrOldName, bstrNewName):
##        '-no docstring-'
##        #return 
##
##    def DeleteCellStyle(self, bstrCellStyle):
##        '-no docstring-'
##        #return 
##
##    def GetUniqueCellStyleName(self, pszBaseName):
##        '-no docstring-'
##        #return pbstrUniqueName
##
##    def GetIsCellStyleInUse(self, pszCellStyle):
##        '-no docstring-'
##        #return pVal
##
##    @property
##    def NumCellStyles(self):
##        '-no docstring-'
##        #return NumCellStyles
##
##    def GetCellStyles(self, cellStylesArray):
##        '-no docstring-'
##        #return 
##
##    def GetTextStyleId(self, bstrCellStyle):
##        '-no docstring-'
##        #return pVal
##
##    def SetTextStyleId(self, bstrCellStyle, val):
##        '-no docstring-'
##        #return 
##
##    def GetTextHeight2(self, bstrCellStyle):
##        '-no docstring-'
##        #return pHeight
##
##    def SetTextHeight2(self, bstrCellStyle, Height):
##        '-no docstring-'
##        #return 
##
##    def GetAlignment2(self, bstrCellStyle):
##        '-no docstring-'
##        #return pCellAlignment
##
##    def SetAlignment2(self, bstrCellStyle, cellAlignment):
##        '-no docstring-'
##        #return 
##
##    def GetColor2(self, bstrCellStyle):
##        '-no docstring-'
##        #return color
##
##    def SetColor2(self, bstrCellStyle, color):
##        '-no docstring-'
##        #return 
##
##    def GetBackgroundColor2(self, bstrCellStyle):
##        '-no docstring-'
##        #return color
##
##    def SetBackgroundColor2(self, bstrCellStyle, color):
##        '-no docstring-'
##        #return 
##
##    def GetDataType2(self, bstrCellStyle):
##        '-no docstring-'
##        #return pDataType, pUnitType
##
##    def SetDataType2(self, bstrCellStyle, nDataType, nUnitType):
##        '-no docstring-'
##        #return 
##
##    def GetFormat2(self, bstrCellStyle):
##        '-no docstring-'
##        #return pbstrFormat
##
##    def SetFormat2(self, bstrCellStyle, bstrFormat):
##        '-no docstring-'
##        #return 
##
##    def GetCellClass(self, bstrCellStyle):
##        '-no docstring-'
##        #return cellClass
##
##    def SetCellClass(self, bstrCellStyle, cellClass):
##        '-no docstring-'
##        #return 
##
##    def GetRotation(self, bstrCellStyle):
##        '-no docstring-'
##        #return Rotation
##
##    def SetRotation(self, bstrCellStyle, Rotation):
##        '-no docstring-'
##        #return 
##
##    def GetIsMergeAllEnabled(self, bstrCellStyle):
##        '-no docstring-'
##        #return bEnable
##
##    def EnableMergeAll(self, bstrCellStyle, bEnable):
##        '-no docstring-'
##        #return 
##
##    def GetGridLineWeight2(self, bstrCellStyle, gridLineType):
##        '-no docstring-'
##        #return Lineweight
##
##    def SetGridLineWeight2(self, bstrCellStyle, gridLineTypes, Lineweight):
##        '-no docstring-'
##        #return 
##
##    def GetGridColor2(self, bstrCellStyle, gridLineType):
##        '-no docstring-'
##        #return pColor
##
##    def SetGridColor2(self, bstrCellStyle, gridLineTypes, pColor):
##        '-no docstring-'
##        #return 
##
##    def GetGridVisibility2(self, bstrCellStyle, gridLineType):
##        '-no docstring-'
##        #return bValue
##
##    def SetGridVisibility2(self, bstrCellStyle, gridLineTypes, bValue):
##        '-no docstring-'
##        #return 
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    TemplateId = property(_get, _set, doc = _set.__doc__)
##
##    def SetTemplateId(self, val, option):
##        '-no docstring-'
##        #return 
##


# values for enumeration 'AcPrinterSpoolAlert'
acPrinterAlwaysAlert = 0
acPrinterAlertOnce = 1
acPrinterNeverAlertLogOnce = 2
acPrinterNeverAlert = 3
AcPrinterSpoolAlert = c_int # enum

# values for enumeration 'AcUnderlayLayerOverrideType'
acNoOverrides = 0
acApplied = 1
AcUnderlayLayerOverrideType = c_int # enum

# values for enumeration 'AcPlotPolicyForNewDwgs'
acPolicyNewDefault = 0
acPolicyNewLegacy = 1
AcPlotPolicyForNewDwgs = c_int # enum

# values for enumeration 'AcPlotPolicyForLegacyDwgs'
acPolicyLegacyDefault = 0
acPolicyLegacyQuery = 1
acPolicyLegacyLegacy = 2
AcPlotPolicyForLegacyDwgs = c_int # enum
class AcadIdPair(CoClass):
    _reg_clsid_ = GUID('{EDDFF2AE-52D8-4008-BFBB-86A244D42BF6}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadIdPair._com_interfaces_ = [IAcadIdPair]


# values for enumeration 'AcOleQuality'
acOQLineArt = 0
acOQText = 1
acOQGraphics = 2
acOQPhoto = 3
acOQHighPhoto = 4
AcOleQuality = c_int # enum
class AcadTableStyle(CoClass):
    _reg_clsid_ = GUID('{ABB18238-5156-4F3D-BB26-8BEE2DAA80B7}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadTableStyle._com_interfaces_ = [IAcadTableStyle]
AcadTableStyle._outgoing_interfaces_ = [IAcadObjectEvents]


# values for enumeration 'AcLoadPalette'
acPaletteByDrawing = 0
acPaletteBySession = 1
AcLoadPalette = c_int # enum

# values for enumeration 'AcAlignmentPointAcquisition'
acAlignPntAcquisitionAutomatic = 0
acAlignPntAcquisitionShiftToAcquire = 1
AcAlignmentPointAcquisition = c_int # enum

# values for enumeration 'AcInsertUnits'
acInsertUnitsUnitless = 0
acInsertUnitsInches = 1
acInsertUnitsFeet = 2
acInsertUnitsMiles = 3
acInsertUnitsMillimeters = 4
acInsertUnitsCentimeters = 5
acInsertUnitsMeters = 6
acInsertUnitsKilometers = 7
acInsertUnitsMicroinches = 8
acInsertUnitsMils = 9
acInsertUnitsYards = 10
acInsertUnitsAngstroms = 11
acInsertUnitsNanometers = 12
acInsertUnitsMicrons = 13
acInsertUnitsDecimeters = 14
acInsertUnitsDecameters = 15
acInsertUnitsHectometers = 16
acInsertUnitsGigameters = 17
acInsertUnitsAstronomicalUnits = 18
acInsertUnitsLightYears = 19
acInsertUnitsParsecs = 20
acInsertUnitsUSSurveyFeet = 21
acInsertUnitsUSSurveyInch = 22
acInsertUnitsUSSurveyYard = 23
acInsertUnitsUSSurveyMile = 24
AcInsertUnits = c_int # enum
IAcadMaterials._methods_ = [
    COMMETHOD([dispid(0)], HRESULT, 'Item',
              ( ['in'], VARIANT, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadMaterial)), 'pItem' )),
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pCount' )),
    COMMETHOD([dispid(-4), 'restricted', 'hidden', 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadMaterial)), 'pDimStyle' )),
]
################################################################
## code template for IAcadMaterials implementation
##class IAcadMaterials_Impl(object):
##    def Item(self, Index):
##        '-no docstring-'
##        #return pItem
##
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return pCount
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return pVal
##
##    def Add(self, Name):
##        '-no docstring-'
##        #return pDimStyle
##


# values for enumeration 'AcViewportSplitType'
acViewport2Horizontal = 0
acViewport2Vertical = 1
acViewport3Left = 2
acViewport3Right = 3
acViewport3Horizontal = 4
acViewport3Vertical = 5
acViewport3Above = 6
acViewport3Below = 7
acViewport4 = 8
AcViewportSplitType = c_int # enum
IAcadSummaryInfo._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Author',
              ( ['out', 'retval'], POINTER(BSTR), 'pAuthor' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'Author',
              ( ['in'], BSTR, 'pAuthor' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'Comments',
              ( ['out', 'retval'], POINTER(BSTR), 'pComments' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'Comments',
              ( ['in'], BSTR, 'pComments' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'HyperlinkBase',
              ( ['out', 'retval'], POINTER(BSTR), 'pHyperlinkBase' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'HyperlinkBase',
              ( ['in'], BSTR, 'pHyperlinkBase' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'Keywords',
              ( ['out', 'retval'], POINTER(BSTR), 'pKeywords' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'Keywords',
              ( ['in'], BSTR, 'pKeywords' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'LastSavedBy',
              ( ['out', 'retval'], POINTER(BSTR), 'pLastSavedBy' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'LastSavedBy',
              ( ['in'], BSTR, 'pLastSavedBy' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'RevisionNumber',
              ( ['out', 'retval'], POINTER(BSTR), 'pRevisionNumber' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'RevisionNumber',
              ( ['in'], BSTR, 'pRevisionNumber' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'Subject',
              ( ['out', 'retval'], POINTER(BSTR), 'pSubject' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'Subject',
              ( ['in'], BSTR, 'pSubject' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'Title',
              ( ['out', 'retval'], POINTER(BSTR), 'pTitle' )),
    COMMETHOD([dispid(8), 'propput'], HRESULT, 'Title',
              ( ['in'], BSTR, 'pTitle' )),
    COMMETHOD([dispid(9)], HRESULT, 'NumCustomInfo',
              ( ['out', 'retval'], POINTER(c_int), 'Index' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetCustomByIndex',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(BSTR), 'pKey' ),
              ( ['out'], POINTER(BSTR), 'pValue' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetCustomByKey',
              ( ['in'], BSTR, 'key' ),
              ( ['out'], POINTER(BSTR), 'pValue' )),
    COMMETHOD([dispid(12)], HRESULT, 'SetCustomByIndex',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'key' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetCustomByKey',
              ( ['in'], BSTR, 'key' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(14)], HRESULT, 'AddCustomInfo',
              ( ['in'], BSTR, 'key' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(15)], HRESULT, 'RemoveCustomByIndex',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([dispid(16)], HRESULT, 'RemoveCustomByKey',
              ( ['in'], BSTR, 'key' )),
]
################################################################
## code template for IAcadSummaryInfo implementation
##class IAcadSummaryInfo_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return pAuthor
##    def _set(self, pAuthor):
##        '-no docstring-'
##    Author = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pComments
##    def _set(self, pComments):
##        '-no docstring-'
##    Comments = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pHyperlinkBase
##    def _set(self, pHyperlinkBase):
##        '-no docstring-'
##    HyperlinkBase = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pKeywords
##    def _set(self, pKeywords):
##        '-no docstring-'
##    Keywords = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pLastSavedBy
##    def _set(self, pLastSavedBy):
##        '-no docstring-'
##    LastSavedBy = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pRevisionNumber
##    def _set(self, pRevisionNumber):
##        '-no docstring-'
##    RevisionNumber = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pSubject
##    def _set(self, pSubject):
##        '-no docstring-'
##    Subject = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pTitle
##    def _set(self, pTitle):
##        '-no docstring-'
##    Title = property(_get, _set, doc = _set.__doc__)
##
##    def NumCustomInfo(self):
##        '-no docstring-'
##        #return Index
##
##    def GetCustomByIndex(self, Index):
##        '-no docstring-'
##        #return pKey, pValue
##
##    def GetCustomByKey(self, key):
##        '-no docstring-'
##        #return pValue
##
##    def SetCustomByIndex(self, Index, key, Value):
##        '-no docstring-'
##        #return 
##
##    def SetCustomByKey(self, key, Value):
##        '-no docstring-'
##        #return 
##
##    def AddCustomInfo(self, key, Value):
##        '-no docstring-'
##        #return 
##
##    def RemoveCustomByIndex(self, Index):
##        '-no docstring-'
##        #return 
##
##    def RemoveCustomByKey(self, key):
##        '-no docstring-'
##        #return 
##


# values for enumeration 'AcRegenType'
acActiveViewport = 0
acAllViewports = 1
AcRegenType = c_int # enum

# values for enumeration 'AcBooleanType'
acUnion = 0
acIntersection = 1
acSubtraction = 2
AcBooleanType = c_int # enum

# values for enumeration 'AcUnits'
acDefaultUnits = -1
acScientific = 1
acDecimal = 2
acEngineering = 3
acArchitectural = 4
acFractional = 5
AcUnits = c_int # enum

# values for enumeration 'AcCoordinateSystem'
acWorld = 0
acUCS = 1
acDisplayDCS = 2
acPaperSpaceDCS = 3
acOCS = 4
AcCoordinateSystem = c_int # enum

# values for enumeration 'AcMeasurementUnits'
acEnglish = 0
acMetric = 1
AcMeasurementUnits = c_int # enum

# values for enumeration 'AcXRefDemandLoad'
acDemandLoadDisabled = 0
acDemandLoadEnabled = 1
acDemandLoadEnabledWithCopy = 2
AcXRefDemandLoad = c_int # enum
IAcadSectionManager._methods_ = [
    COMMETHOD([dispid(0)], HRESULT, 'Item',
              ( ['in'], VARIANT, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadSection)), 'pSection' )),
    COMMETHOD([dispid(-4), 'restricted', 'hidden', 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal' )),
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetLiveSection',
              ( ['out', 'retval'], POINTER(POINTER(IAcadSection)), 'pSection' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetUniqueSectionName',
              ( ['in'], BSTR, 'pBaseName' ),
              ( ['out', 'retval'], POINTER(BSTR), 'ppUniqueName' )),
]
################################################################
## code template for IAcadSectionManager implementation
##class IAcadSectionManager_Impl(object):
##    def Item(self, Index):
##        '-no docstring-'
##        #return pSection
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return pVal
##
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return pVal
##
##    def GetLiveSection(self):
##        '-no docstring-'
##        #return pSection
##
##    def GetUniqueSectionName(self, pBaseName):
##        '-no docstring-'
##        #return ppUniqueName
##


# values for enumeration 'AcPreviewMode'
acPartialPreview = 0
acFullPreview = 1
AcPreviewMode = c_int # enum

# values for enumeration 'AcZoomScaleType'
acZoomScaledAbsolute = 0
acZoomScaledRelative = 1
acZoomScaledRelativePSpace = 2
AcZoomScaleType = c_int # enum

# values for enumeration 'AcDragDisplayMode'
acDragDoNotDisplay = 0
acDragDisplayOnRequest = 1
acDragDisplayAutomatically = 2
AcDragDisplayMode = c_int # enum

# values for enumeration 'AcARXDemandLoad'
acDemanLoadDisable = 0
acDemandLoadOnObjectDetect = 1
acDemandLoadCmdInvoke = 2
AcARXDemandLoad = c_int # enum

# values for enumeration 'AcProxyImage'
acProxyNotShow = 0
acProxyShow = 1
acProxyBoundingBox = 2
AcProxyImage = c_int # enum

# values for enumeration 'AcTextFontStyle'
acFontRegular = 0
acFontItalic = 1
acFontBold = 2
acFontBoldItalic = 3
AcTextFontStyle = c_int # enum

# values for enumeration 'AcDrawMLeaderOrderType'
acDrawContentFirst = 0
acDrawLeaderFirst = 1
AcDrawMLeaderOrderType = c_int # enum

# values for enumeration 'AcSegmentAngleType'
acDegreesAny = 0
acDegrees15 = 1
acDegrees30 = 2
acDegrees45 = 3
acDegrees60 = 4
acDegrees90 = 6
acDegreesHorz = 12
AcSegmentAngleType = c_int # enum
IAcadDimStyles._methods_ = [
    COMMETHOD([dispid(0)], HRESULT, 'Item',
              ( ['in'], VARIANT, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadDimStyle)), 'pItem' )),
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pCount' )),
    COMMETHOD([dispid(-4), 'restricted', 'hidden', 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadDimStyle)), 'pDimStyle' )),
]
################################################################
## code template for IAcadDimStyles implementation
##class IAcadDimStyles_Impl(object):
##    def Item(self, Index):
##        '-no docstring-'
##        #return pItem
##
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return pCount
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return pVal
##
##    def Add(self, Name):
##        '-no docstring-'
##        #return pDimStyle
##

IAcadGroup._methods_ = [
    COMMETHOD([dispid(0)], HRESULT, 'Item',
              ( ['in'], VARIANT, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadEntity)), 'ppEntity' )),
    COMMETHOD([dispid(-4), 'restricted', 'hidden', 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal' )),
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pVal' )),
    COMMETHOD([dispid(15), helpstring('Sets the true color for entities in the group.'), 'propput'], HRESULT, 'TrueColor',
              ( ['in'], POINTER(IAcadAcCmColor), 'rhs' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'Layer',
              ( ['in'], BSTR, 'rhs' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'Linetype',
              ( ['in'], BSTR, 'rhs' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'LinetypeScale',
              ( ['in'], ACAD_NOUNITS, 'rhs' )),
    COMMETHOD([dispid(6), 'nonbrowsable', 'propput'], HRESULT, 'Visible',
              ( ['in'], VARIANT_BOOL, 'rhs' )),
    COMMETHOD([dispid(7)], HRESULT, 'Highlight',
              ( ['in'], VARIANT_BOOL, 'HighlightFlag' )),
    COMMETHOD([dispid(8), 'propput'], HRESULT, 'PlotStyleName',
              ( ['in'], BSTR, 'rhs' )),
    COMMETHOD([dispid(9), 'propput'], HRESULT, 'Lineweight',
              ( ['in'], ACAD_LWEIGHT, 'rhs' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pVal' )),
    COMMETHOD([dispid(10), 'propput'], HRESULT, 'Name',
              ( ['in'], BSTR, 'pVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'AppendItems',
              ( ['in'], VARIANT, 'Objects' )),
    COMMETHOD([dispid(12)], HRESULT, 'RemoveItems',
              ( ['in'], VARIANT, 'Objects' )),
    COMMETHOD([dispid(14)], HRESULT, 'Update'),
    COMMETHOD([dispid(16), 'propput'], HRESULT, 'Material',
              ( ['in'], BSTR, 'rhs' )),
    COMMETHOD([dispid(2), 'hidden', 'propput'], HRESULT, 'color',
              ( ['in'], AcColor, 'rhs' )),
]
################################################################
## code template for IAcadGroup implementation
##class IAcadGroup_Impl(object):
##    def Item(self, Index):
##        '-no docstring-'
##        #return ppEntity
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return pVal
##
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return pVal
##
##    def _set(self, rhs):
##        'Sets the true color for entities in the group.'
##    TrueColor = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        '-no docstring-'
##    Layer = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        '-no docstring-'
##    Linetype = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        '-no docstring-'
##    LinetypeScale = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        '-no docstring-'
##    Visible = property(fset = _set, doc = _set.__doc__)
##
##    def Highlight(self, HighlightFlag):
##        '-no docstring-'
##        #return 
##
##    def _set(self, rhs):
##        '-no docstring-'
##    PlotStyleName = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        '-no docstring-'
##    Lineweight = property(fset = _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def AppendItems(self, Objects):
##        '-no docstring-'
##        #return 
##
##    def RemoveItems(self, Objects):
##        '-no docstring-'
##        #return 
##
##    def Update(self):
##        '-no docstring-'
##        #return 
##
##    def _set(self, rhs):
##        '-no docstring-'
##    Material = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        '-no docstring-'
##    color = property(fset = _set, doc = _set.__doc__)
##

IAcadViewport._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Center',
              ( ['out', 'retval'], POINTER(VARIANT), 'Center' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'Center',
              ( ['in'], VARIANT, 'Center' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'Height',
              ( ['out', 'retval'], POINTER(c_double), 'Height' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'Height',
              ( ['in'], c_double, 'Height' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(c_double), 'Width' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'Width',
              ( ['in'], c_double, 'Width' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'Target',
              ( ['out', 'retval'], POINTER(VARIANT), 'targetPoint' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'Target',
              ( ['in'], VARIANT, 'targetPoint' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'Direction',
              ( ['out', 'retval'], POINTER(VARIANT), 'dirVec' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'Direction',
              ( ['in'], VARIANT, 'dirVec' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'Name',
              ( ['in'], BSTR, 'bstrName' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'GridOn',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bGridOn' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'GridOn',
              ( ['in'], VARIANT_BOOL, 'bGridOn' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'OrthoOn',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bOrthoOn' )),
    COMMETHOD([dispid(8), 'propput'], HRESULT, 'OrthoOn',
              ( ['in'], VARIANT_BOOL, 'bOrthoOn' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'SnapBasePoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'lowLeft' )),
    COMMETHOD([dispid(9), 'propput'], HRESULT, 'SnapBasePoint',
              ( ['in'], VARIANT, 'lowLeft' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'SnapOn',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bSnapOn' )),
    COMMETHOD([dispid(10), 'propput'], HRESULT, 'SnapOn',
              ( ['in'], VARIANT_BOOL, 'bSnapOn' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'SnapRotationAngle',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'Angle' )),
    COMMETHOD([dispid(11), 'propput'], HRESULT, 'SnapRotationAngle',
              ( ['in'], ACAD_ANGLE, 'Angle' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'UCSIconOn',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bIconOn' )),
    COMMETHOD([dispid(13), 'propput'], HRESULT, 'UCSIconOn',
              ( ['in'], VARIANT_BOOL, 'bIconOn' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'UCSIconAtOrigin',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bIconAtOrigin' )),
    COMMETHOD([dispid(14), 'propput'], HRESULT, 'UCSIconAtOrigin',
              ( ['in'], VARIANT_BOOL, 'bIconAtOrigin' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'LowerLeftCorner',
              ( ['out', 'retval'], POINTER(VARIANT), 'lowLeft' )),
    COMMETHOD([dispid(16), 'propget'], HRESULT, 'UpperRightCorner',
              ( ['out', 'retval'], POINTER(VARIANT), 'UpperRight' )),
    COMMETHOD([dispid(17)], HRESULT, 'Split',
              ( ['in'], AcViewportSplitType, 'NumWins' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetGridSpacing',
              ( ['out'], POINTER(c_double), 'XSpacing' ),
              ( ['out'], POINTER(c_double), 'YSpacing' )),
    COMMETHOD([dispid(19)], HRESULT, 'SetGridSpacing',
              ( ['in'], c_double, 'XSpacing' ),
              ( ['in'], c_double, 'YSpacing' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetSnapSpacing',
              ( ['out'], POINTER(c_double), 'XSpacing' ),
              ( ['out'], POINTER(c_double), 'YSpacing' )),
    COMMETHOD([dispid(21)], HRESULT, 'SetSnapSpacing',
              ( ['in'], c_double, 'XSpacing' ),
              ( ['in'], c_double, 'YSpacing' )),
    COMMETHOD([dispid(22)], HRESULT, 'SetView',
              ( ['in'], POINTER(IAcadView), 'View' )),
    COMMETHOD([dispid(23), 'propget'], HRESULT, 'ArcSmoothness',
              ( ['out', 'retval'], POINTER(c_int), 'arcSmooth' )),
    COMMETHOD([dispid(23), 'propput'], HRESULT, 'ArcSmoothness',
              ( ['in'], c_int, 'arcSmooth' )),
]
################################################################
## code template for IAcadViewport implementation
##class IAcadViewport_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Center
##    def _set(self, Center):
##        '-no docstring-'
##    Center = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Height
##    def _set(self, Height):
##        '-no docstring-'
##    Height = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Width
##    def _set(self, Width):
##        '-no docstring-'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return targetPoint
##    def _set(self, targetPoint):
##        '-no docstring-'
##    Target = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return dirVec
##    def _set(self, dirVec):
##        '-no docstring-'
##    Direction = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrName
##    def _set(self, bstrName):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bGridOn
##    def _set(self, bGridOn):
##        '-no docstring-'
##    GridOn = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bOrthoOn
##    def _set(self, bOrthoOn):
##        '-no docstring-'
##    OrthoOn = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return lowLeft
##    def _set(self, lowLeft):
##        '-no docstring-'
##    SnapBasePoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bSnapOn
##    def _set(self, bSnapOn):
##        '-no docstring-'
##    SnapOn = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Angle
##    def _set(self, Angle):
##        '-no docstring-'
##    SnapRotationAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bIconOn
##    def _set(self, bIconOn):
##        '-no docstring-'
##    UCSIconOn = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bIconAtOrigin
##    def _set(self, bIconAtOrigin):
##        '-no docstring-'
##    UCSIconAtOrigin = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LowerLeftCorner(self):
##        '-no docstring-'
##        #return lowLeft
##
##    @property
##    def UpperRightCorner(self):
##        '-no docstring-'
##        #return UpperRight
##
##    def Split(self, NumWins):
##        '-no docstring-'
##        #return 
##
##    def GetGridSpacing(self):
##        '-no docstring-'
##        #return XSpacing, YSpacing
##
##    def SetGridSpacing(self, XSpacing, YSpacing):
##        '-no docstring-'
##        #return 
##
##    def GetSnapSpacing(self):
##        '-no docstring-'
##        #return XSpacing, YSpacing
##
##    def SetSnapSpacing(self, XSpacing, YSpacing):
##        '-no docstring-'
##        #return 
##
##    def SetView(self, View):
##        '-no docstring-'
##        #return 
##
##    def _get(self):
##        '-no docstring-'
##        #return arcSmooth
##    def _set(self, arcSmooth):
##        '-no docstring-'
##    ArcSmoothness = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'AcMeshCreaseType'
acNoneCrease = 0
acAlwaysCrease = 1
acCreaseByLevel = 2
AcMeshCreaseType = c_int # enum
IAcadDynamicBlockReferenceProperty._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'PropertyName',
              ( ['out', 'retval'], POINTER(BSTR), 'PropertyName' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'ReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'ReadOnly' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'show',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'show' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'Description' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'AllowedValues',
              ( ['out', 'retval'], POINTER(VARIANT), 'AllowedValues' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'Value',
              ( ['out', 'retval'], POINTER(VARIANT), 'Value' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'Value',
              ( ['in'], VARIANT, 'Value' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'UnitsType',
              ( ['out', 'retval'], POINTER(AcDynamicBlockReferencePropertyUnitsType), 'Units' )),
]
################################################################
## code template for IAcadDynamicBlockReferenceProperty implementation
##class IAcadDynamicBlockReferenceProperty_Impl(object):
##    @property
##    def PropertyName(self):
##        '-no docstring-'
##        #return PropertyName
##
##    @property
##    def ReadOnly(self):
##        '-no docstring-'
##        #return ReadOnly
##
##    @property
##    def show(self):
##        '-no docstring-'
##        #return show
##
##    @property
##    def Description(self):
##        '-no docstring-'
##        #return Description
##
##    @property
##    def AllowedValues(self):
##        '-no docstring-'
##        #return AllowedValues
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    Value = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def UnitsType(self):
##        '-no docstring-'
##        #return Units
##

IAcadDictionaries._methods_ = [
    COMMETHOD([dispid(0)], HRESULT, 'Item',
              ( ['in'], VARIANT, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadObject)), 'pItem' )),
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pCount' )),
    COMMETHOD([dispid(-4), 'restricted', 'hidden', 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadDictionary)), 'pDimStyle' )),
]
################################################################
## code template for IAcadDictionaries implementation
##class IAcadDictionaries_Impl(object):
##    def Item(self, Index):
##        '-no docstring-'
##        #return pItem
##
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return pCount
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return pVal
##
##    def Add(self, Name):
##        '-no docstring-'
##        #return pDimStyle
##

IAcadLayers._methods_ = [
    COMMETHOD([dispid(0)], HRESULT, 'Item',
              ( ['in'], VARIANT, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadLayer)), 'pItem' )),
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pCount' )),
    COMMETHOD([dispid(-4), 'restricted', 'hidden', 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadLayer)), 'pLayer' )),
    COMMETHOD([dispid(3)], HRESULT, 'GenerateUsageData'),
]
################################################################
## code template for IAcadLayers implementation
##class IAcadLayers_Impl(object):
##    def Item(self, Index):
##        '-no docstring-'
##        #return pItem
##
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return pCount
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return pVal
##
##    def Add(self, Name):
##        '-no docstring-'
##        #return pLayer
##
##    def GenerateUsageData(self):
##        '-no docstring-'
##        #return 
##

class IAcadArc(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{315B1140-15A4-4C5A-A5EB-9B48D3F215DD}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcad3DSolid(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{FC6A9DF5-07A4-4813-BB2D-21FFFEF225BD}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadDimAligned(IAcadDimension):
    _case_insensitive_ = True
    _iid_ = GUID('{BE51D079-C266-46D0-AB85-1CAB56FBC14F}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadDimAngular(IAcadDimension):
    _case_insensitive_ = True
    _iid_ = GUID('{6B243BD4-75B5-46AE-B265-1A164715207F}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadDimDiametric(IAcadDimension):
    _case_insensitive_ = True
    _iid_ = GUID('{3B6ED687-32F2-4F52-8ECB-AB443E04724E}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadDimOrdinate(IAcadDimension):
    _case_insensitive_ = True
    _iid_ = GUID('{86A2995D-44DF-4C50-A069-FA2D0BFBDE05}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadDimRadial(IAcadDimension):
    _case_insensitive_ = True
    _iid_ = GUID('{981899CB-7104-4732-8318-236C850E3876}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadRegion(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{13828521-3E1F-4AEC-BD05-6BD6F3E5BFC4}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadBlock._methods_ = [
    COMMETHOD([dispid(0)], HRESULT, 'Item',
              ( ['in'], VARIANT, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadEntity)), 'pItem' )),
    COMMETHOD([dispid(-4), 'restricted', 'hidden', 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal' )),
    COMMETHOD([dispid(1536), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pVal' )),
    COMMETHOD([dispid(1537), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(1537), 'propput'], HRESULT, 'Name',
              ( ['in'], BSTR, 'bstrName' )),
    COMMETHOD([dispid(1538), 'propget'], HRESULT, 'Origin',
              ( ['out', 'retval'], POINTER(VARIANT), 'Origin' )),
    COMMETHOD([dispid(1538), 'propput'], HRESULT, 'Origin',
              ( ['in'], VARIANT, 'Origin' )),
    COMMETHOD([dispid(1539)], HRESULT, 'AddCustomObject',
              ( ['in'], BSTR, 'ClassName' ),
              ( ['out', 'retval'], POINTER(POINTER(IDispatch)), 'pObject' )),
    COMMETHOD([dispid(1540)], HRESULT, 'Add3DFace',
              ( ['in'], VARIANT, 'Point1' ),
              ( ['in'], VARIANT, 'Point2' ),
              ( ['in'], VARIANT, 'point3' ),
              ( ['in'], VARIANT, 'Point4' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcad3DFace)), 'pFace3d' )),
    COMMETHOD([dispid(1541)], HRESULT, 'Add3DMesh',
              ( ['in'], c_int, 'M' ),
              ( ['in'], c_int, 'N' ),
              ( ['in'], VARIANT, 'PointsMatrix' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadPolygonMesh)), 'pMesh3d' )),
    COMMETHOD([dispid(1542)], HRESULT, 'Add3DPoly',
              ( ['in'], VARIANT, 'PointsArray' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcad3DPolyline)), 'pPoly3d' )),
    COMMETHOD([dispid(1543)], HRESULT, 'AddArc',
              ( ['in'], VARIANT, 'Center' ),
              ( ['in'], c_double, 'Radius' ),
              ( ['in'], c_double, 'StartAngle' ),
              ( ['in'], c_double, 'EndAngle' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadArc)), 'pArc' )),
    COMMETHOD([dispid(1544)], HRESULT, 'AddAttribute',
              ( ['in'], c_double, 'Height' ),
              ( ['in'], AcAttributeMode, 'Mode' ),
              ( ['in'], BSTR, 'Prompt' ),
              ( ['in'], VARIANT, 'InsertionPoint' ),
              ( ['in'], BSTR, 'Tag' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadAttribute)), 'pAttr' )),
    COMMETHOD([dispid(1545)], HRESULT, 'AddBox',
              ( ['in'], VARIANT, 'Origin' ),
              ( ['in'], c_double, 'Length' ),
              ( ['in'], c_double, 'Width' ),
              ( ['in'], c_double, 'Height' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcad3DSolid)), 'pBox' )),
    COMMETHOD([dispid(1546)], HRESULT, 'AddCircle',
              ( ['in'], VARIANT, 'Center' ),
              ( ['in'], c_double, 'Radius' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadCircle)), 'pCircle' )),
    COMMETHOD([dispid(1547)], HRESULT, 'AddCone',
              ( ['in'], VARIANT, 'Center' ),
              ( ['in'], c_double, 'BaseRadius' ),
              ( ['in'], c_double, 'Height' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcad3DSolid)), 'pCone' )),
    COMMETHOD([dispid(1548)], HRESULT, 'AddCylinder',
              ( ['in'], VARIANT, 'Center' ),
              ( ['in'], c_double, 'Radius' ),
              ( ['in'], c_double, 'Height' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcad3DSolid)), 'pCyl' )),
    COMMETHOD([dispid(1549)], HRESULT, 'AddDimAligned',
              ( ['in'], VARIANT, 'ExtLine1Point' ),
              ( ['in'], VARIANT, 'ExtLine2Point' ),
              ( ['in'], VARIANT, 'TextPosition' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadDimAligned)), 'pDim' )),
    COMMETHOD([dispid(1550)], HRESULT, 'AddDimAngular',
              ( ['in'], VARIANT, 'AngleVertex' ),
              ( ['in'], VARIANT, 'FirstEndPoint' ),
              ( ['in'], VARIANT, 'SecondEndPoint' ),
              ( ['in'], VARIANT, 'TextPoint' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadDimAngular)), 'pDim' )),
    COMMETHOD([dispid(1551)], HRESULT, 'AddDimDiametric',
              ( ['in'], VARIANT, 'ChordPoint' ),
              ( ['in'], VARIANT, 'FarChordPoint' ),
              ( ['in'], c_double, 'LeaderLength' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadDimDiametric)), 'pDim' )),
    COMMETHOD([dispid(1552)], HRESULT, 'AddDimRotated',
              ( ['in'], VARIANT, 'ExtLine1Point' ),
              ( ['in'], VARIANT, 'ExtLine2Point' ),
              ( ['in'], VARIANT, 'DimLineLocation' ),
              ( ['in'], c_double, 'RotationAngle' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadDimRotated)), 'pDim' )),
    COMMETHOD([dispid(1553)], HRESULT, 'AddDimOrdinate',
              ( ['in'], VARIANT, 'DefinitionPoint' ),
              ( ['in'], VARIANT, 'LeaderEndPoint' ),
              ( ['in'], c_int, 'UseXAxis' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadDimOrdinate)), 'pDim' )),
    COMMETHOD([dispid(1554)], HRESULT, 'AddDimRadial',
              ( ['in'], VARIANT, 'Center' ),
              ( ['in'], VARIANT, 'ChordPoint' ),
              ( ['in'], c_double, 'LeaderLength' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadDimRadial)), 'pDim' )),
    COMMETHOD([dispid(1555)], HRESULT, 'AddEllipse',
              ( ['in'], VARIANT, 'Center' ),
              ( ['in'], VARIANT, 'MajorAxis' ),
              ( ['in'], c_double, 'RadiusRatio' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadEllipse)), 'pEllipse' )),
    COMMETHOD([dispid(1556)], HRESULT, 'AddEllipticalCone',
              ( ['in'], VARIANT, 'Center' ),
              ( ['in'], c_double, 'MajorRadius' ),
              ( ['in'], c_double, 'MinorRadius' ),
              ( ['in'], c_double, 'Height' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcad3DSolid)), 'pEllipCone' )),
    COMMETHOD([dispid(1557)], HRESULT, 'AddEllipticalCylinder',
              ( ['in'], VARIANT, 'Center' ),
              ( ['in'], c_double, 'MajorRadius' ),
              ( ['in'], c_double, 'MinorRadius' ),
              ( ['in'], c_double, 'Height' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcad3DSolid)), 'pEllipCyl' )),
    COMMETHOD([dispid(1558)], HRESULT, 'AddExtrudedSolid',
              ( ['in'], POINTER(IAcadRegion), 'Profile' ),
              ( ['in'], c_double, 'Height' ),
              ( ['in'], c_double, 'TaperAngle' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcad3DSolid)), 'pExtrSolid' )),
    COMMETHOD([dispid(1559)], HRESULT, 'AddExtrudedSolidAlongPath',
              ( ['in'], POINTER(IAcadRegion), 'Profile' ),
              ( ['in'], POINTER(IDispatch), 'Path' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcad3DSolid)), 'pExtrSolid' )),
    COMMETHOD([dispid(1560)], HRESULT, 'AddLeader',
              ( ['in'], VARIANT, 'PointsArray' ),
              ( ['in'], POINTER(IAcadEntity), 'Annotation' ),
              ( ['in'], AcLeaderType, 'Type' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadLeader)), 'pLeader' )),
    COMMETHOD([dispid(1561)], HRESULT, 'AddMText',
              ( ['in'], VARIANT, 'InsertionPoint' ),
              ( ['in'], c_double, 'Width' ),
              ( ['in'], BSTR, 'Text' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadMText)), 'pMtext' )),
    COMMETHOD([dispid(1562)], HRESULT, 'AddPoint',
              ( ['in'], VARIANT, 'Point' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadPoint)), 'pPoint' )),
    COMMETHOD([dispid(1563)], HRESULT, 'AddLightWeightPolyline',
              ( ['in'], VARIANT, 'VerticesList' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadLWPolyline)), 'pLWPolyline' )),
    COMMETHOD([dispid(1564)], HRESULT, 'AddPolyline',
              ( ['in'], VARIANT, 'VerticesList' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadPolyline)), 'pPolyline' )),
    COMMETHOD([dispid(1565)], HRESULT, 'AddRay',
              ( ['in'], VARIANT, 'Point1' ),
              ( ['in'], VARIANT, 'Point2' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadRay)), 'pRay' )),
    COMMETHOD([dispid(1566)], HRESULT, 'AddRegion',
              ( ['in'], VARIANT, 'ObjectList' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'pRegions' )),
    COMMETHOD([dispid(1567)], HRESULT, 'AddRevolvedSolid',
              ( ['in'], POINTER(IAcadRegion), 'Profile' ),
              ( ['in'], VARIANT, 'AxisPoint' ),
              ( ['in'], VARIANT, 'AxisDir' ),
              ( ['in'], c_double, 'Angle' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcad3DSolid)), 'pRevolSolid' )),
    COMMETHOD([dispid(1568)], HRESULT, 'AddShape',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT, 'InsertionPoint' ),
              ( ['in'], c_double, 'ScaleFactor' ),
              ( ['in'], c_double, 'RotationAngle' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadShape)), 'pShape' )),
    COMMETHOD([dispid(1569)], HRESULT, 'AddSolid',
              ( ['in'], VARIANT, 'Point1' ),
              ( ['in'], VARIANT, 'Point2' ),
              ( ['in'], VARIANT, 'point3' ),
              ( ['in'], VARIANT, 'Point4' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadSolid)), 'pSolid' )),
    COMMETHOD([dispid(1570)], HRESULT, 'AddSphere',
              ( ['in'], VARIANT, 'Center' ),
              ( ['in'], c_double, 'Radius' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcad3DSolid)), 'pSphere' )),
    COMMETHOD([dispid(1571)], HRESULT, 'AddSpline',
              ( ['in'], VARIANT, 'PointsArray' ),
              ( ['in'], VARIANT, 'StartTangent' ),
              ( ['in'], VARIANT, 'EndTangent' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadSpline)), 'pSpline' )),
    COMMETHOD([dispid(1572)], HRESULT, 'AddText',
              ( ['in'], BSTR, 'TextString' ),
              ( ['in'], VARIANT, 'InsertionPoint' ),
              ( ['in'], c_double, 'Height' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadText)), 'pText' )),
    COMMETHOD([dispid(1573)], HRESULT, 'AddTolerance',
              ( ['in'], BSTR, 'Text' ),
              ( ['in'], VARIANT, 'InsertionPoint' ),
              ( ['in'], VARIANT, 'Direction' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadTolerance)), 'pTolerance' )),
    COMMETHOD([dispid(1574)], HRESULT, 'AddTorus',
              ( ['in'], VARIANT, 'Center' ),
              ( ['in'], c_double, 'TorusRadius' ),
              ( ['in'], c_double, 'TubeRadius' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcad3DSolid)), 'pTorus' )),
    COMMETHOD([dispid(1575)], HRESULT, 'AddTrace',
              ( ['in'], VARIANT, 'PointsArray' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadTrace)), 'pTrace' )),
    COMMETHOD([dispid(1576)], HRESULT, 'AddWedge',
              ( ['in'], VARIANT, 'Center' ),
              ( ['in'], c_double, 'Length' ),
              ( ['in'], c_double, 'Width' ),
              ( ['in'], c_double, 'Height' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcad3DSolid)), 'pWedge' )),
    COMMETHOD([dispid(1577)], HRESULT, 'AddXline',
              ( ['in'], VARIANT, 'Point1' ),
              ( ['in'], VARIANT, 'Point2' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadXline)), 'pXline' )),
    COMMETHOD([dispid(1578)], HRESULT, 'InsertBlock',
              ( ['in'], VARIANT, 'InsertionPoint' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Xscale' ),
              ( ['in'], c_double, 'Yscale' ),
              ( ['in'], c_double, 'Zscale' ),
              ( ['in'], c_double, 'Rotation' ),
              ( ['in', 'optional'], VARIANT, 'Password' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadBlockReference)), 'pBlkRef' )),
    COMMETHOD([dispid(1579)], HRESULT, 'AddHatch',
              ( ['in'], c_int, 'PatternType' ),
              ( ['in'], BSTR, 'PatternName' ),
              ( ['in'], VARIANT_BOOL, 'Associativity' ),
              ( ['in', 'optional'], VARIANT, 'HatchObjectType' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadHatch)), 'pHatch' )),
    COMMETHOD([dispid(1580)], HRESULT, 'AddRaster',
              ( ['in'], BSTR, 'imageFileName' ),
              ( ['in'], VARIANT, 'InsertionPoint' ),
              ( ['in'], c_double, 'ScaleFactor' ),
              ( ['in'], c_double, 'RotationAngle' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadRasterImage)), 'pRaster' )),
    COMMETHOD([dispid(1581)], HRESULT, 'AddLine',
              ( ['in'], VARIANT, 'StartPoint' ),
              ( ['in'], VARIANT, 'EndPoint' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadLine)), 'pLine' )),
    COMMETHOD([dispid(1582), 'propget'], HRESULT, 'IsLayout',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bIsLayout' )),
    COMMETHOD([dispid(1583), 'propget'], HRESULT, 'Layout',
              ( ['out', 'retval'], POINTER(POINTER(IAcadLayout)), 'pLayout' )),
    COMMETHOD([dispid(1584), 'propget'], HRESULT, 'IsXRef',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pIsXRref' )),
    COMMETHOD([dispid(1585)], HRESULT, 'AddMInsertBlock',
              ( ['in'], VARIANT, 'InsertionPoint' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Xscale' ),
              ( ['in'], c_double, 'Yscale' ),
              ( ['in'], c_double, 'Zscale' ),
              ( ['in'], c_double, 'Rotation' ),
              ( ['in'], c_int, 'NumRows' ),
              ( ['in'], c_int, 'NumColumns' ),
              ( ['in'], c_int, 'RowSpacing' ),
              ( ['in'], c_int, 'ColumnSpacing' ),
              ( ['in', 'optional'], VARIANT, 'Password' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadMInsertBlock)), 'pMInsertBlk' )),
    COMMETHOD([dispid(1586)], HRESULT, 'AddPolyfaceMesh',
              ( ['in'], VARIANT, 'VertexList' ),
              ( ['in'], VARIANT, 'FaceList' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadPolyfaceMesh)), 'pPFMesh' )),
    COMMETHOD([dispid(1587)], HRESULT, 'AddMLine',
              ( ['in'], VARIANT, 'VertexList' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadMLine)), 'pMLine' )),
    COMMETHOD([dispid(1588)], HRESULT, 'AddDim3PointAngular',
              ( ['in'], VARIANT, 'AngleVertex' ),
              ( ['in'], VARIANT, 'FirstEndPoint' ),
              ( ['in'], VARIANT, 'SecondEndPoint' ),
              ( ['in'], VARIANT, 'TextPoint' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadDim3PointAngular)), 'pDim' )),
    COMMETHOD([dispid(1589), 'propget'], HRESULT, 'XRefDatabase',
              ( ['out', 'retval'], POINTER(POINTER(IAcadDatabase)), 'pDatabase' )),
    COMMETHOD([dispid(1590)], HRESULT, 'AttachExternalReference',
              ( ['in'], BSTR, 'PathName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT, 'InsertionPoint' ),
              ( ['in'], c_double, 'Xscale' ),
              ( ['in'], c_double, 'Yscale' ),
              ( ['in'], c_double, 'Zscale' ),
              ( ['in'], c_double, 'Rotation' ),
              ( ['in'], VARIANT_BOOL, 'bOverlay' ),
              ( ['in', 'optional'], VARIANT, 'Password' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadExternalReference)), 'pXRef' )),
    COMMETHOD([dispid(1591)], HRESULT, 'Unload'),
    COMMETHOD([dispid(1592)], HRESULT, 'Reload'),
    COMMETHOD([dispid(1593)], HRESULT, 'Bind',
              ( ['in'], VARIANT_BOOL, 'bPrefixName' )),
    COMMETHOD([dispid(1594)], HRESULT, 'Detach'),
    COMMETHOD([dispid(1595)], HRESULT, 'AddTable',
              ( ['in'], VARIANT, 'InsertionPoint' ),
              ( ['in'], c_int, 'NumRows' ),
              ( ['in'], c_int, 'NumColumns' ),
              ( ['in'], c_double, 'RowHeight' ),
              ( ['in'], c_double, 'ColWidth' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadTable)), 'pTable' )),
    COMMETHOD([dispid(1596), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(1596), 'propput'], HRESULT, 'Path',
              ( ['in'], BSTR, 'bstrName' )),
    COMMETHOD([dispid(1597), 'propget'], HRESULT, 'Comments',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(1597), 'propput'], HRESULT, 'Comments',
              ( ['in'], BSTR, 'bstrName' )),
    COMMETHOD([dispid(1598), 'propget'], HRESULT, 'Units',
              ( ['out', 'retval'], POINTER(AcInsertUnits), 'pIU' )),
    COMMETHOD([dispid(1598), 'propput'], HRESULT, 'Units',
              ( ['in'], AcInsertUnits, 'pIU' )),
    COMMETHOD([dispid(1599), 'propget'], HRESULT, 'Explodable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bExplodable' )),
    COMMETHOD([dispid(1599), 'propput'], HRESULT, 'Explodable',
              ( ['in'], VARIANT_BOOL, 'bExplodable' )),
    COMMETHOD([dispid(1600), 'propget'], HRESULT, 'BlockScaling',
              ( ['out', 'retval'], POINTER(AcBlockScaling), 'pBS' )),
    COMMETHOD([dispid(1600), 'propput'], HRESULT, 'BlockScaling',
              ( ['in'], AcBlockScaling, 'pBS' )),
    COMMETHOD([dispid(1601), 'propget'], HRESULT, 'IsDynamicBlock',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pDynamicBlock' )),
    COMMETHOD([dispid(1602)], HRESULT, 'AddDimArc',
              ( ['in'], VARIANT, 'ArcCenter' ),
              ( ['in'], VARIANT, 'FirstEndPoint' ),
              ( ['in'], VARIANT, 'SecondEndPoint' ),
              ( ['in'], VARIANT, 'ArcPoint' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadDimArcLength)), 'pDim' )),
    COMMETHOD([dispid(1603)], HRESULT, 'AddDimRadialLarge',
              ( ['in'], VARIANT, 'Center' ),
              ( ['in'], VARIANT, 'ChordPoint' ),
              ( ['in'], VARIANT, 'OverrideCenter' ),
              ( ['in'], VARIANT, 'JogPoint' ),
              ( ['in'], c_double, 'JogAngle' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadDimRadialLarge)), 'pDim' )),
    COMMETHOD([dispid(1604)], HRESULT, 'AddSection',
              ( ['in'], VARIANT, 'FromPoint' ),
              ( ['in'], VARIANT, 'ToPoint' ),
              ( ['in'], VARIANT, 'planeVector' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadSection)), 'ppSecPlane' )),
    COMMETHOD([dispid(1605)], HRESULT, 'AddMLeader',
              ( ['in'], VARIANT, 'PointsArray' ),
              ( ['out'], POINTER(c_int), 'leaderLineIndex' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadMLeader)), 'pMLeader' )),
]
################################################################
## code template for IAcadBlock implementation
##class IAcadBlock_Impl(object):
##    def Item(self, Index):
##        '-no docstring-'
##        #return pItem
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return pVal
##
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return pVal
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrName
##    def _set(self, bstrName):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Origin
##    def _set(self, Origin):
##        '-no docstring-'
##    Origin = property(_get, _set, doc = _set.__doc__)
##
##    def AddCustomObject(self, ClassName):
##        '-no docstring-'
##        #return pObject
##
##    def Add3DFace(self, Point1, Point2, point3, Point4):
##        '-no docstring-'
##        #return pFace3d
##
##    def Add3DMesh(self, M, N, PointsMatrix):
##        '-no docstring-'
##        #return pMesh3d
##
##    def Add3DPoly(self, PointsArray):
##        '-no docstring-'
##        #return pPoly3d
##
##    def AddArc(self, Center, Radius, StartAngle, EndAngle):
##        '-no docstring-'
##        #return pArc
##
##    def AddAttribute(self, Height, Mode, Prompt, InsertionPoint, Tag, Value):
##        '-no docstring-'
##        #return pAttr
##
##    def AddBox(self, Origin, Length, Width, Height):
##        '-no docstring-'
##        #return pBox
##
##    def AddCircle(self, Center, Radius):
##        '-no docstring-'
##        #return pCircle
##
##    def AddCone(self, Center, BaseRadius, Height):
##        '-no docstring-'
##        #return pCone
##
##    def AddCylinder(self, Center, Radius, Height):
##        '-no docstring-'
##        #return pCyl
##
##    def AddDimAligned(self, ExtLine1Point, ExtLine2Point, TextPosition):
##        '-no docstring-'
##        #return pDim
##
##    def AddDimAngular(self, AngleVertex, FirstEndPoint, SecondEndPoint, TextPoint):
##        '-no docstring-'
##        #return pDim
##
##    def AddDimDiametric(self, ChordPoint, FarChordPoint, LeaderLength):
##        '-no docstring-'
##        #return pDim
##
##    def AddDimRotated(self, ExtLine1Point, ExtLine2Point, DimLineLocation, RotationAngle):
##        '-no docstring-'
##        #return pDim
##
##    def AddDimOrdinate(self, DefinitionPoint, LeaderEndPoint, UseXAxis):
##        '-no docstring-'
##        #return pDim
##
##    def AddDimRadial(self, Center, ChordPoint, LeaderLength):
##        '-no docstring-'
##        #return pDim
##
##    def AddEllipse(self, Center, MajorAxis, RadiusRatio):
##        '-no docstring-'
##        #return pEllipse
##
##    def AddEllipticalCone(self, Center, MajorRadius, MinorRadius, Height):
##        '-no docstring-'
##        #return pEllipCone
##
##    def AddEllipticalCylinder(self, Center, MajorRadius, MinorRadius, Height):
##        '-no docstring-'
##        #return pEllipCyl
##
##    def AddExtrudedSolid(self, Profile, Height, TaperAngle):
##        '-no docstring-'
##        #return pExtrSolid
##
##    def AddExtrudedSolidAlongPath(self, Profile, Path):
##        '-no docstring-'
##        #return pExtrSolid
##
##    def AddLeader(self, PointsArray, Annotation, Type):
##        '-no docstring-'
##        #return pLeader
##
##    def AddMText(self, InsertionPoint, Width, Text):
##        '-no docstring-'
##        #return pMtext
##
##    def AddPoint(self, Point):
##        '-no docstring-'
##        #return pPoint
##
##    def AddLightWeightPolyline(self, VerticesList):
##        '-no docstring-'
##        #return pLWPolyline
##
##    def AddPolyline(self, VerticesList):
##        '-no docstring-'
##        #return pPolyline
##
##    def AddRay(self, Point1, Point2):
##        '-no docstring-'
##        #return pRay
##
##    def AddRegion(self, ObjectList):
##        '-no docstring-'
##        #return pRegions
##
##    def AddRevolvedSolid(self, Profile, AxisPoint, AxisDir, Angle):
##        '-no docstring-'
##        #return pRevolSolid
##
##    def AddShape(self, Name, InsertionPoint, ScaleFactor, RotationAngle):
##        '-no docstring-'
##        #return pShape
##
##    def AddSolid(self, Point1, Point2, point3, Point4):
##        '-no docstring-'
##        #return pSolid
##
##    def AddSphere(self, Center, Radius):
##        '-no docstring-'
##        #return pSphere
##
##    def AddSpline(self, PointsArray, StartTangent, EndTangent):
##        '-no docstring-'
##        #return pSpline
##
##    def AddText(self, TextString, InsertionPoint, Height):
##        '-no docstring-'
##        #return pText
##
##    def AddTolerance(self, Text, InsertionPoint, Direction):
##        '-no docstring-'
##        #return pTolerance
##
##    def AddTorus(self, Center, TorusRadius, TubeRadius):
##        '-no docstring-'
##        #return pTorus
##
##    def AddTrace(self, PointsArray):
##        '-no docstring-'
##        #return pTrace
##
##    def AddWedge(self, Center, Length, Width, Height):
##        '-no docstring-'
##        #return pWedge
##
##    def AddXline(self, Point1, Point2):
##        '-no docstring-'
##        #return pXline
##
##    def InsertBlock(self, InsertionPoint, Name, Xscale, Yscale, Zscale, Rotation, Password):
##        '-no docstring-'
##        #return pBlkRef
##
##    def AddHatch(self, PatternType, PatternName, Associativity, HatchObjectType):
##        '-no docstring-'
##        #return pHatch
##
##    def AddRaster(self, imageFileName, InsertionPoint, ScaleFactor, RotationAngle):
##        '-no docstring-'
##        #return pRaster
##
##    def AddLine(self, StartPoint, EndPoint):
##        '-no docstring-'
##        #return pLine
##
##    @property
##    def IsLayout(self):
##        '-no docstring-'
##        #return bIsLayout
##
##    @property
##    def Layout(self):
##        '-no docstring-'
##        #return pLayout
##
##    @property
##    def IsXRef(self):
##        '-no docstring-'
##        #return pIsXRref
##
##    def AddMInsertBlock(self, InsertionPoint, Name, Xscale, Yscale, Zscale, Rotation, NumRows, NumColumns, RowSpacing, ColumnSpacing, Password):
##        '-no docstring-'
##        #return pMInsertBlk
##
##    def AddPolyfaceMesh(self, VertexList, FaceList):
##        '-no docstring-'
##        #return pPFMesh
##
##    def AddMLine(self, VertexList):
##        '-no docstring-'
##        #return pMLine
##
##    def AddDim3PointAngular(self, AngleVertex, FirstEndPoint, SecondEndPoint, TextPoint):
##        '-no docstring-'
##        #return pDim
##
##    @property
##    def XRefDatabase(self):
##        '-no docstring-'
##        #return pDatabase
##
##    def AttachExternalReference(self, PathName, Name, InsertionPoint, Xscale, Yscale, Zscale, Rotation, bOverlay, Password):
##        '-no docstring-'
##        #return pXRef
##
##    def Unload(self):
##        '-no docstring-'
##        #return 
##
##    def Reload(self):
##        '-no docstring-'
##        #return 
##
##    def Bind(self, bPrefixName):
##        '-no docstring-'
##        #return 
##
##    def Detach(self):
##        '-no docstring-'
##        #return 
##
##    def AddTable(self, InsertionPoint, NumRows, NumColumns, RowHeight, ColWidth):
##        '-no docstring-'
##        #return pTable
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrName
##    def _set(self, bstrName):
##        '-no docstring-'
##    Path = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrName
##    def _set(self, bstrName):
##        '-no docstring-'
##    Comments = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pIU
##    def _set(self, pIU):
##        '-no docstring-'
##    Units = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bExplodable
##    def _set(self, bExplodable):
##        '-no docstring-'
##    Explodable = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pBS
##    def _set(self, pBS):
##        '-no docstring-'
##    BlockScaling = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def IsDynamicBlock(self):
##        '-no docstring-'
##        #return pDynamicBlock
##
##    def AddDimArc(self, ArcCenter, FirstEndPoint, SecondEndPoint, ArcPoint):
##        '-no docstring-'
##        #return pDim
##
##    def AddDimRadialLarge(self, Center, ChordPoint, OverrideCenter, JogPoint, JogAngle):
##        '-no docstring-'
##        #return pDim
##
##    def AddSection(self, FromPoint, ToPoint, planeVector):
##        '-no docstring-'
##        #return ppSecPlane
##
##    def AddMLeader(self, PointsArray):
##        '-no docstring-'
##        #return leaderLineIndex, pMLeader
##

IAcadModelSpace._methods_ = [
]
################################################################
## code template for IAcadModelSpace implementation
##class IAcadModelSpace_Impl(object):

IAcadDimAngular._methods_ = [
    COMMETHOD([dispid(37), 'nonbrowsable', 'propget'], HRESULT, 'ExtLine1StartPoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'xLine1Point' )),
    COMMETHOD([dispid(37), 'nonbrowsable', 'propput'], HRESULT, 'ExtLine1StartPoint',
              ( ['in'], VARIANT, 'xLine1Point' )),
    COMMETHOD([dispid(38), 'nonbrowsable', 'propget'], HRESULT, 'ExtLine1EndPoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'xLine1Point' )),
    COMMETHOD([dispid(38), 'nonbrowsable', 'propput'], HRESULT, 'ExtLine1EndPoint',
              ( ['in'], VARIANT, 'xLine1Point' )),
    COMMETHOD([dispid(39), 'nonbrowsable', 'propget'], HRESULT, 'ExtLine2StartPoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'xLine2Point' )),
    COMMETHOD([dispid(39), 'nonbrowsable', 'propput'], HRESULT, 'ExtLine2StartPoint',
              ( ['in'], VARIANT, 'xLine2Point' )),
    COMMETHOD([dispid(40), 'nonbrowsable', 'propget'], HRESULT, 'ExtLine2EndPoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'xLine2Point' )),
    COMMETHOD([dispid(40), 'nonbrowsable', 'propput'], HRESULT, 'ExtLine2EndPoint',
              ( ['in'], VARIANT, 'xLine2Point' )),
    COMMETHOD([dispid(41), 'propget'], HRESULT, 'AngleFormat',
              ( ['out', 'retval'], POINTER(AcAngleUnits), 'format' )),
    COMMETHOD([dispid(41), 'propput'], HRESULT, 'AngleFormat',
              ( ['in'], AcAngleUnits, 'format' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'DimensionLineColor',
              ( ['out', 'retval'], POINTER(ACAD_COLOR), 'Type' )),
    COMMETHOD([dispid(13), 'propput'], HRESULT, 'DimensionLineColor',
              ( ['in'], ACAD_COLOR, 'Type' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'ExtensionLineColor',
              ( ['out', 'retval'], POINTER(ACAD_COLOR), 'Type' )),
    COMMETHOD([dispid(14), 'propput'], HRESULT, 'ExtensionLineColor',
              ( ['in'], ACAD_COLOR, 'Type' )),
    COMMETHOD([dispid(17), 'propget'], HRESULT, 'ExtensionLineExtend',
              ( ['out', 'retval'], POINTER(c_double), 'extend' )),
    COMMETHOD([dispid(17), 'propput'], HRESULT, 'ExtensionLineExtend',
              ( ['in'], c_double, 'extend' )),
    COMMETHOD([dispid(18), 'propget'], HRESULT, 'Fit',
              ( ['out', 'retval'], POINTER(AcDimFit), 'fittype' )),
    COMMETHOD([dispid(18), 'propput'], HRESULT, 'Fit',
              ( ['in'], AcDimFit, 'fittype' )),
    COMMETHOD([dispid(20), 'propget'], HRESULT, 'HorizontalTextPosition',
              ( ['out', 'retval'], POINTER(AcDimHorizontalJustification), 'Type' )),
    COMMETHOD([dispid(20), 'propput'], HRESULT, 'HorizontalTextPosition',
              ( ['in'], AcDimHorizontalJustification, 'Type' )),
    COMMETHOD([dispid(23), 'propget'], HRESULT, 'ExtensionLineWeight',
              ( ['out', 'retval'], POINTER(ACAD_LWEIGHT), 'lweight' )),
    COMMETHOD([dispid(23), 'propput'], HRESULT, 'ExtensionLineWeight',
              ( ['in'], ACAD_LWEIGHT, 'lweight' )),
    COMMETHOD([dispid(25), 'propget'], HRESULT, 'DimLine1Suppress',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress' )),
    COMMETHOD([dispid(25), 'propput'], HRESULT, 'DimLine1Suppress',
              ( ['in'], VARIANT_BOOL, 'bSuppress' )),
    COMMETHOD([dispid(26), 'propget'], HRESULT, 'DimLine2Suppress',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress' )),
    COMMETHOD([dispid(26), 'propput'], HRESULT, 'DimLine2Suppress',
              ( ['in'], VARIANT_BOOL, 'bSuppress' )),
    COMMETHOD([dispid(27), 'propget'], HRESULT, 'ExtLine1Suppress',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress' )),
    COMMETHOD([dispid(27), 'propput'], HRESULT, 'ExtLine1Suppress',
              ( ['in'], VARIANT_BOOL, 'bSuppress' )),
    COMMETHOD([dispid(28), 'propget'], HRESULT, 'ExtLine2Suppress',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress' )),
    COMMETHOD([dispid(28), 'propput'], HRESULT, 'ExtLine2Suppress',
              ( ['in'], VARIANT_BOOL, 'bSuppress' )),
    COMMETHOD([dispid(29), 'propget'], HRESULT, 'DimLineInside',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(29), 'propput'], HRESULT, 'DimLineInside',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(30), 'propget'], HRESULT, 'TextInsideAlign',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(30), 'propput'], HRESULT, 'TextInsideAlign',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(31), 'propget'], HRESULT, 'TextInside',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(31), 'propput'], HRESULT, 'TextInside',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(32), 'propget'], HRESULT, 'ForceLineInside',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(32), 'propput'], HRESULT, 'ForceLineInside',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(33), 'propget'], HRESULT, 'TextOutsideAlign',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(33), 'propput'], HRESULT, 'TextOutsideAlign',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(36), 'propget'], HRESULT, 'TextPrecision',
              ( ['out', 'retval'], POINTER(AcDimPrecision), 'precision' )),
    COMMETHOD([dispid(36), 'propput'], HRESULT, 'TextPrecision',
              ( ['in'], AcDimPrecision, 'precision' )),
    COMMETHOD([dispid(35), 'propget'], HRESULT, 'ExtensionLineOffset',
              ( ['out', 'retval'], POINTER(c_double), 'Offset' )),
    COMMETHOD([dispid(35), 'propput'], HRESULT, 'ExtensionLineOffset',
              ( ['in'], c_double, 'Offset' )),
    COMMETHOD([dispid(60), 'propget'], HRESULT, 'DimensionLineWeight',
              ( ['out', 'retval'], POINTER(ACAD_LWEIGHT), 'weight' )),
    COMMETHOD([dispid(60), 'propput'], HRESULT, 'DimensionLineWeight',
              ( ['in'], ACAD_LWEIGHT, 'weight' )),
    COMMETHOD([dispid(61), 'propget'], HRESULT, 'ArrowheadSize',
              ( ['out', 'retval'], POINTER(c_double), 'size' )),
    COMMETHOD([dispid(61), 'propput'], HRESULT, 'ArrowheadSize',
              ( ['in'], c_double, 'size' )),
    COMMETHOD([dispid(62), 'propget'], HRESULT, 'Arrowhead1Type',
              ( ['out', 'retval'], POINTER(AcDimArrowheadType), 'Type' )),
    COMMETHOD([dispid(62), 'propput'], HRESULT, 'Arrowhead1Type',
              ( ['in'], AcDimArrowheadType, 'Type' )),
    COMMETHOD([dispid(63), 'propget'], HRESULT, 'Arrowhead2Type',
              ( ['out', 'retval'], POINTER(AcDimArrowheadType), 'Type' )),
    COMMETHOD([dispid(63), 'propput'], HRESULT, 'Arrowhead2Type',
              ( ['in'], AcDimArrowheadType, 'Type' )),
    COMMETHOD([dispid(64), 'propget'], HRESULT, 'Measurement',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'bVal' )),
    COMMETHOD([dispid(65), 'nonbrowsable', 'propget'], HRESULT, 'Arrowhead1Block',
              ( ['out', 'retval'], POINTER(BSTR), 'BlockName' )),
    COMMETHOD([dispid(65), 'nonbrowsable', 'propput'], HRESULT, 'Arrowhead1Block',
              ( ['in'], BSTR, 'BlockName' )),
    COMMETHOD([dispid(66), 'nonbrowsable', 'propget'], HRESULT, 'Arrowhead2Block',
              ( ['out', 'retval'], POINTER(BSTR), 'BlockName' )),
    COMMETHOD([dispid(66), 'nonbrowsable', 'propput'], HRESULT, 'Arrowhead2Block',
              ( ['in'], BSTR, 'BlockName' )),
    COMMETHOD([dispid(80), 'propget'], HRESULT, 'DimensionLinetype',
              ( ['out', 'retval'], POINTER(BSTR), 'Linetype' )),
    COMMETHOD([dispid(80), 'propput'], HRESULT, 'DimensionLinetype',
              ( ['in'], BSTR, 'Linetype' )),
    COMMETHOD([dispid(81), 'propget'], HRESULT, 'ExtLine1Linetype',
              ( ['out', 'retval'], POINTER(BSTR), 'Linetype' )),
    COMMETHOD([dispid(81), 'propput'], HRESULT, 'ExtLine1Linetype',
              ( ['in'], BSTR, 'Linetype' )),
    COMMETHOD([dispid(82), 'propget'], HRESULT, 'ExtLine2Linetype',
              ( ['out', 'retval'], POINTER(BSTR), 'Linetype' )),
    COMMETHOD([dispid(82), 'propput'], HRESULT, 'ExtLine2Linetype',
              ( ['in'], BSTR, 'Linetype' )),
    COMMETHOD([dispid(83), 'propget'], HRESULT, 'ExtLineFixedLenSuppress',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bFixedLen' )),
    COMMETHOD([dispid(83), 'propput'], HRESULT, 'ExtLineFixedLenSuppress',
              ( ['in'], VARIANT_BOOL, 'bFixedLen' )),
    COMMETHOD([dispid(84), 'propget'], HRESULT, 'ExtLineFixedLen',
              ( ['out', 'retval'], POINTER(c_double), 'FixedLen' )),
    COMMETHOD([dispid(84), 'propput'], HRESULT, 'ExtLineFixedLen',
              ( ['in'], c_double, 'FixedLen' )),
    COMMETHOD([dispid(85), 'propget'], HRESULT, 'DimConstrForm',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bIsDynamic' )),
    COMMETHOD([dispid(85), 'propput'], HRESULT, 'DimConstrForm',
              ( ['in'], VARIANT_BOOL, 'bIsDynamic' )),
    COMMETHOD([dispid(86), 'propget'], HRESULT, 'DimConstrReference',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bIsReference' )),
    COMMETHOD([dispid(86), 'propput'], HRESULT, 'DimConstrReference',
              ( ['in'], VARIANT_BOOL, 'bIsReference' )),
    COMMETHOD([dispid(87), 'propget'], HRESULT, 'DimConstrName',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(87), 'propput'], HRESULT, 'DimConstrName',
              ( ['in'], BSTR, 'bstrName' )),
    COMMETHOD([dispid(88), 'propget'], HRESULT, 'DimConstrExpression',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrExpression' )),
    COMMETHOD([dispid(88), 'propput'], HRESULT, 'DimConstrExpression',
              ( ['in'], BSTR, 'bstrExpression' )),
    COMMETHOD([dispid(89), 'propget'], HRESULT, 'DimConstrValue',
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(89), 'propput'], HRESULT, 'DimConstrValue',
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(90), 'propget'], HRESULT, 'DimConstrDesc',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrDescription' )),
    COMMETHOD([dispid(90), 'propput'], HRESULT, 'DimConstrDesc',
              ( ['in'], BSTR, 'bstrDescription' )),
]
################################################################
## code template for IAcadDimAngular implementation
##class IAcadDimAngular_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return xLine1Point
##    def _set(self, xLine1Point):
##        '-no docstring-'
##    ExtLine1StartPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return xLine1Point
##    def _set(self, xLine1Point):
##        '-no docstring-'
##    ExtLine1EndPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return xLine2Point
##    def _set(self, xLine2Point):
##        '-no docstring-'
##    ExtLine2StartPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return xLine2Point
##    def _set(self, xLine2Point):
##        '-no docstring-'
##    ExtLine2EndPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return format
##    def _set(self, format):
##        '-no docstring-'
##    AngleFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    DimensionLineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    ExtensionLineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return extend
##    def _set(self, extend):
##        '-no docstring-'
##    ExtensionLineExtend = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return fittype
##    def _set(self, fittype):
##        '-no docstring-'
##    Fit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    HorizontalTextPosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return lweight
##    def _set(self, lweight):
##        '-no docstring-'
##    ExtensionLineWeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bSuppress
##    def _set(self, bSuppress):
##        '-no docstring-'
##    DimLine1Suppress = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bSuppress
##    def _set(self, bSuppress):
##        '-no docstring-'
##    DimLine2Suppress = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bSuppress
##    def _set(self, bSuppress):
##        '-no docstring-'
##    ExtLine1Suppress = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bSuppress
##    def _set(self, bSuppress):
##        '-no docstring-'
##    ExtLine2Suppress = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    DimLineInside = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    TextInsideAlign = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    TextInside = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    ForceLineInside = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    TextOutsideAlign = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return precision
##    def _set(self, precision):
##        '-no docstring-'
##    TextPrecision = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Offset
##    def _set(self, Offset):
##        '-no docstring-'
##    ExtensionLineOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return weight
##    def _set(self, weight):
##        '-no docstring-'
##    DimensionLineWeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return size
##    def _set(self, size):
##        '-no docstring-'
##    ArrowheadSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    Arrowhead1Type = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    Arrowhead2Type = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Measurement(self):
##        '-no docstring-'
##        #return bVal
##
##    def _get(self):
##        '-no docstring-'
##        #return BlockName
##    def _set(self, BlockName):
##        '-no docstring-'
##    Arrowhead1Block = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return BlockName
##    def _set(self, BlockName):
##        '-no docstring-'
##    Arrowhead2Block = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Linetype
##    def _set(self, Linetype):
##        '-no docstring-'
##    DimensionLinetype = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Linetype
##    def _set(self, Linetype):
##        '-no docstring-'
##    ExtLine1Linetype = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Linetype
##    def _set(self, Linetype):
##        '-no docstring-'
##    ExtLine2Linetype = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bFixedLen
##    def _set(self, bFixedLen):
##        '-no docstring-'
##    ExtLineFixedLenSuppress = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return FixedLen
##    def _set(self, FixedLen):
##        '-no docstring-'
##    ExtLineFixedLen = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bIsDynamic
##    def _set(self, bIsDynamic):
##        '-no docstring-'
##    DimConstrForm = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bIsReference
##    def _set(self, bIsReference):
##        '-no docstring-'
##    DimConstrReference = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrName
##    def _set(self, bstrName):
##        '-no docstring-'
##    DimConstrName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrExpression
##    def _set(self, bstrExpression):
##        '-no docstring-'
##    DimConstrExpression = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    DimConstrValue = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrDescription
##    def _set(self, bstrDescription):
##        '-no docstring-'
##    DimConstrDesc = property(_get, _set, doc = _set.__doc__)
##

IAcadPaperSpace._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'AddPViewport',
              ( ['in'], VARIANT, 'Center' ),
              ( ['in'], c_double, 'Width' ),
              ( ['in'], c_double, 'Height' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadPViewport)), 'pPViewport' )),
]
################################################################
## code template for IAcadPaperSpace implementation
##class IAcadPaperSpace_Impl(object):
##    def AddPViewport(self, Center, Width, Height):
##        '-no docstring-'
##        #return pPViewport
##

IAcadDimDiametric._methods_ = [
    COMMETHOD([dispid(42), 'nonbrowsable', 'propput'], HRESULT, 'LeaderLength',
              ( ['in'], c_double, 'rhs' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'AltUnits',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bAlternate' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'AltUnits',
              ( ['in'], VARIANT_BOOL, 'bAlternate' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'AltUnitsPrecision',
              ( ['out', 'retval'], POINTER(AcDimPrecision), 'precision' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'AltUnitsPrecision',
              ( ['in'], AcDimPrecision, 'precision' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'AltUnitsScale',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'scale' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'AltUnitsScale',
              ( ['in'], ACAD_NOUNITS, 'scale' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'AltRoundDistance',
              ( ['out', 'retval'], POINTER(c_double), 'Distance' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'AltRoundDistance',
              ( ['in'], c_double, 'Distance' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'AltTolerancePrecision',
              ( ['out', 'retval'], POINTER(AcDimPrecision), 'Distance' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'AltTolerancePrecision',
              ( ['in'], AcDimPrecision, 'Distance' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'AltUnitsFormat',
              ( ['out', 'retval'], POINTER(AcDimUnits), 'Units' )),
    COMMETHOD([dispid(9), 'propput'], HRESULT, 'AltUnitsFormat',
              ( ['in'], AcDimUnits, 'Units' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'AltTextPrefix',
              ( ['out', 'retval'], POINTER(BSTR), 'prefix' )),
    COMMETHOD([dispid(11), 'propput'], HRESULT, 'AltTextPrefix',
              ( ['in'], BSTR, 'prefix' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'AltTextSuffix',
              ( ['out', 'retval'], POINTER(BSTR), 'prefix' )),
    COMMETHOD([dispid(12), 'propput'], HRESULT, 'AltTextSuffix',
              ( ['in'], BSTR, 'prefix' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'DimensionLineColor',
              ( ['out', 'retval'], POINTER(ACAD_COLOR), 'Type' )),
    COMMETHOD([dispid(13), 'propput'], HRESULT, 'DimensionLineColor',
              ( ['in'], ACAD_COLOR, 'Type' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'PrimaryUnitsPrecision',
              ( ['out', 'retval'], POINTER(AcDimPrecision), 'Prec' )),
    COMMETHOD([dispid(15), 'propput'], HRESULT, 'PrimaryUnitsPrecision',
              ( ['in'], AcDimPrecision, 'Prec' )),
    COMMETHOD([dispid(19), 'propget'], HRESULT, 'FractionFormat',
              ( ['out', 'retval'], POINTER(AcDimFractionType), 'Type' )),
    COMMETHOD([dispid(19), 'propput'], HRESULT, 'FractionFormat',
              ( ['in'], AcDimFractionType, 'Type' )),
    COMMETHOD([dispid(18), 'propget'], HRESULT, 'Fit',
              ( ['out', 'retval'], POINTER(AcDimFit), 'fittype' )),
    COMMETHOD([dispid(18), 'propput'], HRESULT, 'Fit',
              ( ['in'], AcDimFit, 'fittype' )),
    COMMETHOD([dispid(21), 'propget'], HRESULT, 'LinearScaleFactor',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'Type' )),
    COMMETHOD([dispid(21), 'propput'], HRESULT, 'LinearScaleFactor',
              ( ['in'], ACAD_NOUNITS, 'Type' )),
    COMMETHOD([dispid(22), 'propget'], HRESULT, 'UnitsFormat',
              ( ['out', 'retval'], POINTER(AcDimLUnits), 'format' )),
    COMMETHOD([dispid(22), 'propput'], HRESULT, 'UnitsFormat',
              ( ['in'], AcDimLUnits, 'format' )),
    COMMETHOD([dispid(24), 'propget'], HRESULT, 'RoundDistance',
              ( ['out', 'retval'], POINTER(c_double), 'Distance' )),
    COMMETHOD([dispid(24), 'propput'], HRESULT, 'RoundDistance',
              ( ['in'], c_double, 'Distance' )),
    COMMETHOD([dispid(25), 'propget'], HRESULT, 'DimLine1Suppress',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress' )),
    COMMETHOD([dispid(25), 'propput'], HRESULT, 'DimLine1Suppress',
              ( ['in'], VARIANT_BOOL, 'bSuppress' )),
    COMMETHOD([dispid(26), 'propget'], HRESULT, 'DimLine2Suppress',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress' )),
    COMMETHOD([dispid(26), 'propput'], HRESULT, 'DimLine2Suppress',
              ( ['in'], VARIANT_BOOL, 'bSuppress' )),
    COMMETHOD([dispid(30), 'propget'], HRESULT, 'TextInsideAlign',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(30), 'propput'], HRESULT, 'TextInsideAlign',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(31), 'propget'], HRESULT, 'TextInside',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(31), 'propput'], HRESULT, 'TextInside',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(32), 'propget'], HRESULT, 'ForceLineInside',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(32), 'propput'], HRESULT, 'ForceLineInside',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(33), 'propget'], HRESULT, 'TextOutsideAlign',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(33), 'propput'], HRESULT, 'TextOutsideAlign',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(43), 'propget'], HRESULT, 'CenterType',
              ( ['out', 'retval'], POINTER(AcDimCenterType), 'Type' )),
    COMMETHOD([dispid(43), 'propput'], HRESULT, 'CenterType',
              ( ['in'], AcDimCenterType, 'Type' )),
    COMMETHOD([dispid(44), 'propget'], HRESULT, 'CenterMarkSize',
              ( ['out', 'retval'], POINTER(c_double), 'Type' )),
    COMMETHOD([dispid(44), 'propput'], HRESULT, 'CenterMarkSize',
              ( ['in'], c_double, 'Type' )),
    COMMETHOD([dispid(48), 'propget'], HRESULT, 'AltSuppressLeadingZeros',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(48), 'propput'], HRESULT, 'AltSuppressLeadingZeros',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(49), 'propget'], HRESULT, 'AltSuppressTrailingZeros',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(49), 'propput'], HRESULT, 'AltSuppressTrailingZeros',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(50), 'propget'], HRESULT, 'AltSuppressZeroFeet',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(50), 'propput'], HRESULT, 'AltSuppressZeroFeet',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(51), 'propget'], HRESULT, 'AltSuppressZeroInches',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(51), 'propput'], HRESULT, 'AltSuppressZeroInches',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(52), 'propget'], HRESULT, 'AltToleranceSuppressLeadingZeros',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(52), 'propput'], HRESULT, 'AltToleranceSuppressLeadingZeros',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(53), 'propget'], HRESULT, 'AltToleranceSuppressTrailingZeros',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(53), 'propput'], HRESULT, 'AltToleranceSuppressTrailingZeros',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(54), 'propget'], HRESULT, 'AltToleranceSuppressZeroFeet',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(54), 'propput'], HRESULT, 'AltToleranceSuppressZeroFeet',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(55), 'propget'], HRESULT, 'AltToleranceSuppressZeroInches',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(55), 'propput'], HRESULT, 'AltToleranceSuppressZeroInches',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(56), 'propget'], HRESULT, 'SuppressZeroFeet',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(56), 'propput'], HRESULT, 'SuppressZeroFeet',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(57), 'propget'], HRESULT, 'SuppressZeroInches',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(57), 'propput'], HRESULT, 'SuppressZeroInches',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(58), 'propget'], HRESULT, 'ToleranceSuppressZeroFeet',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(58), 'propput'], HRESULT, 'ToleranceSuppressZeroFeet',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(59), 'propget'], HRESULT, 'ToleranceSuppressZeroInches',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(59), 'propput'], HRESULT, 'ToleranceSuppressZeroInches',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(60), 'propget'], HRESULT, 'DimensionLineWeight',
              ( ['out', 'retval'], POINTER(ACAD_LWEIGHT), 'weight' )),
    COMMETHOD([dispid(60), 'propput'], HRESULT, 'DimensionLineWeight',
              ( ['in'], ACAD_LWEIGHT, 'weight' )),
    COMMETHOD([dispid(61), 'propget'], HRESULT, 'ArrowheadSize',
              ( ['out', 'retval'], POINTER(c_double), 'size' )),
    COMMETHOD([dispid(61), 'propput'], HRESULT, 'ArrowheadSize',
              ( ['in'], c_double, 'size' )),
    COMMETHOD([dispid(62), 'propget'], HRESULT, 'Arrowhead1Type',
              ( ['out', 'retval'], POINTER(AcDimArrowheadType), 'Type' )),
    COMMETHOD([dispid(62), 'propput'], HRESULT, 'Arrowhead1Type',
              ( ['in'], AcDimArrowheadType, 'Type' )),
    COMMETHOD([dispid(63), 'propget'], HRESULT, 'Arrowhead2Type',
              ( ['out', 'retval'], POINTER(AcDimArrowheadType), 'Type' )),
    COMMETHOD([dispid(63), 'propput'], HRESULT, 'Arrowhead2Type',
              ( ['in'], AcDimArrowheadType, 'Type' )),
    COMMETHOD([dispid(64), 'propget'], HRESULT, 'Measurement',
              ( ['out', 'retval'], POINTER(c_double), 'bVal' )),
    COMMETHOD([dispid(65), 'nonbrowsable', 'propget'], HRESULT, 'Arrowhead1Block',
              ( ['out', 'retval'], POINTER(BSTR), 'BlockName' )),
    COMMETHOD([dispid(65), 'nonbrowsable', 'propput'], HRESULT, 'Arrowhead1Block',
              ( ['in'], BSTR, 'BlockName' )),
    COMMETHOD([dispid(66), 'nonbrowsable', 'propget'], HRESULT, 'Arrowhead2Block',
              ( ['out', 'retval'], POINTER(BSTR), 'BlockName' )),
    COMMETHOD([dispid(66), 'nonbrowsable', 'propput'], HRESULT, 'Arrowhead2Block',
              ( ['in'], BSTR, 'BlockName' )),
    COMMETHOD([dispid(80), 'propget'], HRESULT, 'DimensionLinetype',
              ( ['out', 'retval'], POINTER(BSTR), 'Linetype' )),
    COMMETHOD([dispid(80), 'propput'], HRESULT, 'DimensionLinetype',
              ( ['in'], BSTR, 'Linetype' )),
    COMMETHOD([dispid(85), 'propget'], HRESULT, 'DimConstrForm',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bIsDynamic' )),
    COMMETHOD([dispid(85), 'propput'], HRESULT, 'DimConstrForm',
              ( ['in'], VARIANT_BOOL, 'bIsDynamic' )),
    COMMETHOD([dispid(86), 'propget'], HRESULT, 'DimConstrReference',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bIsReference' )),
    COMMETHOD([dispid(86), 'propput'], HRESULT, 'DimConstrReference',
              ( ['in'], VARIANT_BOOL, 'bIsReference' )),
    COMMETHOD([dispid(87), 'propget'], HRESULT, 'DimConstrName',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(87), 'propput'], HRESULT, 'DimConstrName',
              ( ['in'], BSTR, 'bstrName' )),
    COMMETHOD([dispid(88), 'propget'], HRESULT, 'DimConstrExpression',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrExpression' )),
    COMMETHOD([dispid(88), 'propput'], HRESULT, 'DimConstrExpression',
              ( ['in'], BSTR, 'bstrExpression' )),
    COMMETHOD([dispid(89), 'propget'], HRESULT, 'DimConstrValue',
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(89), 'propput'], HRESULT, 'DimConstrValue',
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(90), 'propget'], HRESULT, 'DimConstrDesc',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrDescription' )),
    COMMETHOD([dispid(90), 'propput'], HRESULT, 'DimConstrDesc',
              ( ['in'], BSTR, 'bstrDescription' )),
]
################################################################
## code template for IAcadDimDiametric implementation
##class IAcadDimDiametric_Impl(object):
##    def _set(self, rhs):
##        '-no docstring-'
##    LeaderLength = property(fset = _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bAlternate
##    def _set(self, bAlternate):
##        '-no docstring-'
##    AltUnits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return precision
##    def _set(self, precision):
##        '-no docstring-'
##    AltUnitsPrecision = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return scale
##    def _set(self, scale):
##        '-no docstring-'
##    AltUnitsScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Distance
##    def _set(self, Distance):
##        '-no docstring-'
##    AltRoundDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Distance
##    def _set(self, Distance):
##        '-no docstring-'
##    AltTolerancePrecision = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Units
##    def _set(self, Units):
##        '-no docstring-'
##    AltUnitsFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return prefix
##    def _set(self, prefix):
##        '-no docstring-'
##    AltTextPrefix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return prefix
##    def _set(self, prefix):
##        '-no docstring-'
##    AltTextSuffix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    DimensionLineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Prec
##    def _set(self, Prec):
##        '-no docstring-'
##    PrimaryUnitsPrecision = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    FractionFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return fittype
##    def _set(self, fittype):
##        '-no docstring-'
##    Fit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    LinearScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return format
##    def _set(self, format):
##        '-no docstring-'
##    UnitsFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Distance
##    def _set(self, Distance):
##        '-no docstring-'
##    RoundDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bSuppress
##    def _set(self, bSuppress):
##        '-no docstring-'
##    DimLine1Suppress = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bSuppress
##    def _set(self, bSuppress):
##        '-no docstring-'
##    DimLine2Suppress = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    TextInsideAlign = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    TextInside = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    ForceLineInside = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    TextOutsideAlign = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    CenterType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    CenterMarkSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltSuppressLeadingZeros = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltSuppressTrailingZeros = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltToleranceSuppressLeadingZeros = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltToleranceSuppressTrailingZeros = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltToleranceSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltToleranceSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    SuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    SuppressZeroInches = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    ToleranceSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    ToleranceSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return weight
##    def _set(self, weight):
##        '-no docstring-'
##    DimensionLineWeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return size
##    def _set(self, size):
##        '-no docstring-'
##    ArrowheadSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    Arrowhead1Type = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    Arrowhead2Type = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Measurement(self):
##        '-no docstring-'
##        #return bVal
##
##    def _get(self):
##        '-no docstring-'
##        #return BlockName
##    def _set(self, BlockName):
##        '-no docstring-'
##    Arrowhead1Block = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return BlockName
##    def _set(self, BlockName):
##        '-no docstring-'
##    Arrowhead2Block = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Linetype
##    def _set(self, Linetype):
##        '-no docstring-'
##    DimensionLinetype = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bIsDynamic
##    def _set(self, bIsDynamic):
##        '-no docstring-'
##    DimConstrForm = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bIsReference
##    def _set(self, bIsReference):
##        '-no docstring-'
##    DimConstrReference = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrName
##    def _set(self, bstrName):
##        '-no docstring-'
##    DimConstrName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrExpression
##    def _set(self, bstrExpression):
##        '-no docstring-'
##    DimConstrExpression = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    DimConstrValue = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrDescription
##    def _set(self, bstrDescription):
##        '-no docstring-'
##    DimConstrDesc = property(_get, _set, doc = _set.__doc__)
##

IAcadDimStyle._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'Name',
              ( ['in'], BSTR, 'bstrName' )),
    COMMETHOD([dispid(2)], HRESULT, 'CopyFrom',
              ( ['in'], POINTER(IDispatch), 'StyleSource' )),
]
################################################################
## code template for IAcadDimStyle implementation
##class IAcadDimStyle_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return bstrName
##    def _set(self, bstrName):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def CopyFrom(self, StyleSource):
##        '-no docstring-'
##        #return 
##

IAcadDimAligned._methods_ = [
    COMMETHOD([dispid(1), 'nonbrowsable', 'propget'], HRESULT, 'ExtLine1Point',
              ( ['out', 'retval'], POINTER(VARIANT), 'xLine1Point' )),
    COMMETHOD([dispid(1), 'nonbrowsable', 'propput'], HRESULT, 'ExtLine1Point',
              ( ['in'], VARIANT, 'xLine1Point' )),
    COMMETHOD([dispid(2), 'nonbrowsable', 'propget'], HRESULT, 'ExtLine2Point',
              ( ['out', 'retval'], POINTER(VARIANT), 'xLine2Point' )),
    COMMETHOD([dispid(2), 'nonbrowsable', 'propput'], HRESULT, 'ExtLine2Point',
              ( ['in'], VARIANT, 'xLine2Point' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'AltUnits',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bAlternate' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'AltUnits',
              ( ['in'], VARIANT_BOOL, 'bAlternate' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'AltUnitsPrecision',
              ( ['out', 'retval'], POINTER(AcDimPrecision), 'precision' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'AltUnitsPrecision',
              ( ['in'], AcDimPrecision, 'precision' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'AltUnitsScale',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'scale' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'AltUnitsScale',
              ( ['in'], ACAD_NOUNITS, 'scale' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'AltRoundDistance',
              ( ['out', 'retval'], POINTER(c_double), 'Distance' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'AltRoundDistance',
              ( ['in'], c_double, 'Distance' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'AltTolerancePrecision',
              ( ['out', 'retval'], POINTER(AcDimPrecision), 'Distance' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'AltTolerancePrecision',
              ( ['in'], AcDimPrecision, 'Distance' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'AltUnitsFormat',
              ( ['out', 'retval'], POINTER(AcDimUnits), 'Units' )),
    COMMETHOD([dispid(9), 'propput'], HRESULT, 'AltUnitsFormat',
              ( ['in'], AcDimUnits, 'Units' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'AltTextPrefix',
              ( ['out', 'retval'], POINTER(BSTR), 'prefix' )),
    COMMETHOD([dispid(11), 'propput'], HRESULT, 'AltTextPrefix',
              ( ['in'], BSTR, 'prefix' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'AltTextSuffix',
              ( ['out', 'retval'], POINTER(BSTR), 'suffix' )),
    COMMETHOD([dispid(12), 'propput'], HRESULT, 'AltTextSuffix',
              ( ['in'], BSTR, 'suffix' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'DimensionLineColor',
              ( ['out', 'retval'], POINTER(ACAD_COLOR), 'color' )),
    COMMETHOD([dispid(13), 'propput'], HRESULT, 'DimensionLineColor',
              ( ['in'], ACAD_COLOR, 'color' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'ExtensionLineColor',
              ( ['out', 'retval'], POINTER(ACAD_COLOR), 'color' )),
    COMMETHOD([dispid(14), 'propput'], HRESULT, 'ExtensionLineColor',
              ( ['in'], ACAD_COLOR, 'color' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'PrimaryUnitsPrecision',
              ( ['out', 'retval'], POINTER(AcDimPrecision), 'Prec' )),
    COMMETHOD([dispid(15), 'propput'], HRESULT, 'PrimaryUnitsPrecision',
              ( ['in'], AcDimPrecision, 'Prec' )),
    COMMETHOD([dispid(16), 'propget'], HRESULT, 'DimensionLineExtend',
              ( ['out', 'retval'], POINTER(c_double), 'extend' )),
    COMMETHOD([dispid(16), 'propput'], HRESULT, 'DimensionLineExtend',
              ( ['in'], c_double, 'extend' )),
    COMMETHOD([dispid(17), 'propget'], HRESULT, 'ExtensionLineExtend',
              ( ['out', 'retval'], POINTER(c_double), 'extend' )),
    COMMETHOD([dispid(17), 'propput'], HRESULT, 'ExtensionLineExtend',
              ( ['in'], c_double, 'extend' )),
    COMMETHOD([dispid(18), 'propget'], HRESULT, 'Fit',
              ( ['out', 'retval'], POINTER(AcDimFit), 'fittype' )),
    COMMETHOD([dispid(18), 'propput'], HRESULT, 'Fit',
              ( ['in'], AcDimFit, 'fittype' )),
    COMMETHOD([dispid(19), 'propget'], HRESULT, 'FractionFormat',
              ( ['out', 'retval'], POINTER(AcDimFractionType), 'Type' )),
    COMMETHOD([dispid(19), 'propput'], HRESULT, 'FractionFormat',
              ( ['in'], AcDimFractionType, 'Type' )),
    COMMETHOD([dispid(20), 'propget'], HRESULT, 'HorizontalTextPosition',
              ( ['out', 'retval'], POINTER(AcDimHorizontalJustification), 'Type' )),
    COMMETHOD([dispid(20), 'propput'], HRESULT, 'HorizontalTextPosition',
              ( ['in'], AcDimHorizontalJustification, 'Type' )),
    COMMETHOD([dispid(21), 'propget'], HRESULT, 'LinearScaleFactor',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'Type' )),
    COMMETHOD([dispid(21), 'propput'], HRESULT, 'LinearScaleFactor',
              ( ['in'], ACAD_NOUNITS, 'Type' )),
    COMMETHOD([dispid(22), 'propget'], HRESULT, 'UnitsFormat',
              ( ['out', 'retval'], POINTER(AcDimLUnits), 'format' )),
    COMMETHOD([dispid(22), 'propput'], HRESULT, 'UnitsFormat',
              ( ['in'], AcDimLUnits, 'format' )),
    COMMETHOD([dispid(23), 'propget'], HRESULT, 'ExtensionLineWeight',
              ( ['out', 'retval'], POINTER(ACAD_LWEIGHT), 'lweight' )),
    COMMETHOD([dispid(23), 'propput'], HRESULT, 'ExtensionLineWeight',
              ( ['in'], ACAD_LWEIGHT, 'lweight' )),
    COMMETHOD([dispid(24), 'propget'], HRESULT, 'RoundDistance',
              ( ['out', 'retval'], POINTER(c_double), 'Distance' )),
    COMMETHOD([dispid(24), 'propput'], HRESULT, 'RoundDistance',
              ( ['in'], c_double, 'Distance' )),
    COMMETHOD([dispid(25), 'propget'], HRESULT, 'DimLine1Suppress',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress' )),
    COMMETHOD([dispid(25), 'propput'], HRESULT, 'DimLine1Suppress',
              ( ['in'], VARIANT_BOOL, 'bSuppress' )),
    COMMETHOD([dispid(26), 'propget'], HRESULT, 'DimLine2Suppress',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress' )),
    COMMETHOD([dispid(26), 'propput'], HRESULT, 'DimLine2Suppress',
              ( ['in'], VARIANT_BOOL, 'bSuppress' )),
    COMMETHOD([dispid(27), 'propget'], HRESULT, 'ExtLine1Suppress',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress' )),
    COMMETHOD([dispid(27), 'propput'], HRESULT, 'ExtLine1Suppress',
              ( ['in'], VARIANT_BOOL, 'bSuppress' )),
    COMMETHOD([dispid(28), 'propget'], HRESULT, 'ExtLine2Suppress',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress' )),
    COMMETHOD([dispid(28), 'propput'], HRESULT, 'ExtLine2Suppress',
              ( ['in'], VARIANT_BOOL, 'bSuppress' )),
    COMMETHOD([dispid(29), 'propget'], HRESULT, 'DimLineInside',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(29), 'propput'], HRESULT, 'DimLineInside',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(30), 'propget'], HRESULT, 'TextInsideAlign',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(30), 'propput'], HRESULT, 'TextInsideAlign',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(31), 'propget'], HRESULT, 'TextInside',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(31), 'propput'], HRESULT, 'TextInside',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(32), 'propget'], HRESULT, 'ForceLineInside',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(32), 'propput'], HRESULT, 'ForceLineInside',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(33), 'propget'], HRESULT, 'TextOutsideAlign',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(33), 'propput'], HRESULT, 'TextOutsideAlign',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(35), 'propget'], HRESULT, 'ExtensionLineOffset',
              ( ['out', 'retval'], POINTER(c_double), 'Offset' )),
    COMMETHOD([dispid(35), 'propput'], HRESULT, 'ExtensionLineOffset',
              ( ['in'], c_double, 'Offset' )),
    COMMETHOD([dispid(48), 'propget'], HRESULT, 'AltSuppressLeadingZeros',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(48), 'propput'], HRESULT, 'AltSuppressLeadingZeros',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(49), 'propget'], HRESULT, 'AltSuppressTrailingZeros',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(49), 'propput'], HRESULT, 'AltSuppressTrailingZeros',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(50), 'propget'], HRESULT, 'AltSuppressZeroFeet',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(50), 'propput'], HRESULT, 'AltSuppressZeroFeet',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(51), 'propget'], HRESULT, 'AltSuppressZeroInches',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(51), 'propput'], HRESULT, 'AltSuppressZeroInches',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(52), 'propget'], HRESULT, 'AltToleranceSuppressLeadingZeros',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(52), 'propput'], HRESULT, 'AltToleranceSuppressLeadingZeros',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(53), 'propget'], HRESULT, 'AltToleranceSuppressTrailingZeros',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(53), 'propput'], HRESULT, 'AltToleranceSuppressTrailingZeros',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(54), 'propget'], HRESULT, 'AltToleranceSuppressZeroFeet',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(54), 'propput'], HRESULT, 'AltToleranceSuppressZeroFeet',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(55), 'propget'], HRESULT, 'AltToleranceSuppressZeroInches',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(55), 'propput'], HRESULT, 'AltToleranceSuppressZeroInches',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(56), 'propget'], HRESULT, 'SuppressZeroFeet',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(56), 'propput'], HRESULT, 'SuppressZeroFeet',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(57), 'propget'], HRESULT, 'SuppressZeroInches',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(57), 'propput'], HRESULT, 'SuppressZeroInches',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(58), 'propget'], HRESULT, 'ToleranceSuppressZeroFeet',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(58), 'propput'], HRESULT, 'ToleranceSuppressZeroFeet',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(59), 'propget'], HRESULT, 'ToleranceSuppressZeroInches',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(59), 'propput'], HRESULT, 'ToleranceSuppressZeroInches',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(60), 'propget'], HRESULT, 'DimensionLineWeight',
              ( ['out', 'retval'], POINTER(ACAD_LWEIGHT), 'weight' )),
    COMMETHOD([dispid(60), 'propput'], HRESULT, 'DimensionLineWeight',
              ( ['in'], ACAD_LWEIGHT, 'weight' )),
    COMMETHOD([dispid(61), 'propget'], HRESULT, 'ArrowheadSize',
              ( ['out', 'retval'], POINTER(c_double), 'size' )),
    COMMETHOD([dispid(61), 'propput'], HRESULT, 'ArrowheadSize',
              ( ['in'], c_double, 'size' )),
    COMMETHOD([dispid(62), 'propget'], HRESULT, 'Arrowhead1Type',
              ( ['out', 'retval'], POINTER(AcDimArrowheadType), 'Type' )),
    COMMETHOD([dispid(62), 'propput'], HRESULT, 'Arrowhead1Type',
              ( ['in'], AcDimArrowheadType, 'Type' )),
    COMMETHOD([dispid(63), 'propget'], HRESULT, 'Arrowhead2Type',
              ( ['out', 'retval'], POINTER(AcDimArrowheadType), 'Type' )),
    COMMETHOD([dispid(63), 'propput'], HRESULT, 'Arrowhead2Type',
              ( ['in'], AcDimArrowheadType, 'Type' )),
    COMMETHOD([dispid(64), 'propget'], HRESULT, 'Measurement',
              ( ['out', 'retval'], POINTER(c_double), 'bVal' )),
    COMMETHOD([dispid(65), 'nonbrowsable', 'propget'], HRESULT, 'Arrowhead1Block',
              ( ['out', 'retval'], POINTER(BSTR), 'BlockName' )),
    COMMETHOD([dispid(65), 'nonbrowsable', 'propput'], HRESULT, 'Arrowhead1Block',
              ( ['in'], BSTR, 'BlockName' )),
    COMMETHOD([dispid(66), 'nonbrowsable', 'propget'], HRESULT, 'Arrowhead2Block',
              ( ['out', 'retval'], POINTER(BSTR), 'BlockName' )),
    COMMETHOD([dispid(66), 'nonbrowsable', 'propput'], HRESULT, 'Arrowhead2Block',
              ( ['in'], BSTR, 'BlockName' )),
    COMMETHOD([dispid(80), 'propget'], HRESULT, 'DimensionLinetype',
              ( ['out', 'retval'], POINTER(BSTR), 'Linetype' )),
    COMMETHOD([dispid(80), 'propput'], HRESULT, 'DimensionLinetype',
              ( ['in'], BSTR, 'Linetype' )),
    COMMETHOD([dispid(81), 'propget'], HRESULT, 'ExtLine1Linetype',
              ( ['out', 'retval'], POINTER(BSTR), 'Linetype' )),
    COMMETHOD([dispid(81), 'propput'], HRESULT, 'ExtLine1Linetype',
              ( ['in'], BSTR, 'Linetype' )),
    COMMETHOD([dispid(82), 'propget'], HRESULT, 'ExtLine2Linetype',
              ( ['out', 'retval'], POINTER(BSTR), 'Linetype' )),
    COMMETHOD([dispid(82), 'propput'], HRESULT, 'ExtLine2Linetype',
              ( ['in'], BSTR, 'Linetype' )),
    COMMETHOD([dispid(83), 'propget'], HRESULT, 'ExtLineFixedLenSuppress',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bFixedLen' )),
    COMMETHOD([dispid(83), 'propput'], HRESULT, 'ExtLineFixedLenSuppress',
              ( ['in'], VARIANT_BOOL, 'bFixedLen' )),
    COMMETHOD([dispid(84), 'propget'], HRESULT, 'ExtLineFixedLen',
              ( ['out', 'retval'], POINTER(c_double), 'FixedLen' )),
    COMMETHOD([dispid(84), 'propput'], HRESULT, 'ExtLineFixedLen',
              ( ['in'], c_double, 'FixedLen' )),
    COMMETHOD([dispid(85), 'propget'], HRESULT, 'DimConstrForm',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bIsDynamic' )),
    COMMETHOD([dispid(85), 'propput'], HRESULT, 'DimConstrForm',
              ( ['in'], VARIANT_BOOL, 'bIsDynamic' )),
    COMMETHOD([dispid(86), 'propget'], HRESULT, 'DimConstrReference',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bIsReference' )),
    COMMETHOD([dispid(86), 'propput'], HRESULT, 'DimConstrReference',
              ( ['in'], VARIANT_BOOL, 'bIsReference' )),
    COMMETHOD([dispid(87), 'propget'], HRESULT, 'DimConstrName',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(87), 'propput'], HRESULT, 'DimConstrName',
              ( ['in'], BSTR, 'bstrName' )),
    COMMETHOD([dispid(88), 'propget'], HRESULT, 'DimConstrExpression',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrExpression' )),
    COMMETHOD([dispid(88), 'propput'], HRESULT, 'DimConstrExpression',
              ( ['in'], BSTR, 'bstrExpression' )),
    COMMETHOD([dispid(89), 'propget'], HRESULT, 'DimConstrValue',
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(89), 'propput'], HRESULT, 'DimConstrValue',
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(90), 'propget'], HRESULT, 'DimConstrDesc',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrDescription' )),
    COMMETHOD([dispid(90), 'propput'], HRESULT, 'DimConstrDesc',
              ( ['in'], BSTR, 'bstrDescription' )),
    COMMETHOD([dispid(1574), 'propget'], HRESULT, 'SubUnitsSuffix',
              ( ['out', 'retval'], POINTER(BSTR), 'suffix' )),
    COMMETHOD([dispid(1574), 'propput'], HRESULT, 'SubUnitsSuffix',
              ( ['in'], BSTR, 'suffix' )),
    COMMETHOD([dispid(1575), 'propget'], HRESULT, 'SubUnitsFactor',
              ( ['out', 'retval'], POINTER(c_double), 'factor' )),
    COMMETHOD([dispid(1575), 'propput'], HRESULT, 'SubUnitsFactor',
              ( ['in'], c_double, 'factor' )),
    COMMETHOD([dispid(1576), 'propget'], HRESULT, 'AltSubUnitsSuffix',
              ( ['out', 'retval'], POINTER(BSTR), 'suffix' )),
    COMMETHOD([dispid(1576), 'propput'], HRESULT, 'AltSubUnitsSuffix',
              ( ['in'], BSTR, 'suffix' )),
    COMMETHOD([dispid(1577), 'propget'], HRESULT, 'AltSubUnitsFactor',
              ( ['out', 'retval'], POINTER(c_double), 'factor' )),
    COMMETHOD([dispid(1577), 'propput'], HRESULT, 'AltSubUnitsFactor',
              ( ['in'], c_double, 'factor' )),
]
################################################################
## code template for IAcadDimAligned implementation
##class IAcadDimAligned_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return xLine1Point
##    def _set(self, xLine1Point):
##        '-no docstring-'
##    ExtLine1Point = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return xLine2Point
##    def _set(self, xLine2Point):
##        '-no docstring-'
##    ExtLine2Point = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bAlternate
##    def _set(self, bAlternate):
##        '-no docstring-'
##    AltUnits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return precision
##    def _set(self, precision):
##        '-no docstring-'
##    AltUnitsPrecision = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return scale
##    def _set(self, scale):
##        '-no docstring-'
##    AltUnitsScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Distance
##    def _set(self, Distance):
##        '-no docstring-'
##    AltRoundDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Distance
##    def _set(self, Distance):
##        '-no docstring-'
##    AltTolerancePrecision = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Units
##    def _set(self, Units):
##        '-no docstring-'
##    AltUnitsFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return prefix
##    def _set(self, prefix):
##        '-no docstring-'
##    AltTextPrefix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return suffix
##    def _set(self, suffix):
##        '-no docstring-'
##    AltTextSuffix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return color
##    def _set(self, color):
##        '-no docstring-'
##    DimensionLineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return color
##    def _set(self, color):
##        '-no docstring-'
##    ExtensionLineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Prec
##    def _set(self, Prec):
##        '-no docstring-'
##    PrimaryUnitsPrecision = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return extend
##    def _set(self, extend):
##        '-no docstring-'
##    DimensionLineExtend = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return extend
##    def _set(self, extend):
##        '-no docstring-'
##    ExtensionLineExtend = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return fittype
##    def _set(self, fittype):
##        '-no docstring-'
##    Fit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    FractionFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    HorizontalTextPosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    LinearScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return format
##    def _set(self, format):
##        '-no docstring-'
##    UnitsFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return lweight
##    def _set(self, lweight):
##        '-no docstring-'
##    ExtensionLineWeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Distance
##    def _set(self, Distance):
##        '-no docstring-'
##    RoundDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bSuppress
##    def _set(self, bSuppress):
##        '-no docstring-'
##    DimLine1Suppress = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bSuppress
##    def _set(self, bSuppress):
##        '-no docstring-'
##    DimLine2Suppress = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bSuppress
##    def _set(self, bSuppress):
##        '-no docstring-'
##    ExtLine1Suppress = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bSuppress
##    def _set(self, bSuppress):
##        '-no docstring-'
##    ExtLine2Suppress = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    DimLineInside = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    TextInsideAlign = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    TextInside = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    ForceLineInside = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    TextOutsideAlign = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Offset
##    def _set(self, Offset):
##        '-no docstring-'
##    ExtensionLineOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltSuppressLeadingZeros = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltSuppressTrailingZeros = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltToleranceSuppressLeadingZeros = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltToleranceSuppressTrailingZeros = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltToleranceSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltToleranceSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    SuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    SuppressZeroInches = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    ToleranceSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    ToleranceSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return weight
##    def _set(self, weight):
##        '-no docstring-'
##    DimensionLineWeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return size
##    def _set(self, size):
##        '-no docstring-'
##    ArrowheadSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    Arrowhead1Type = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    Arrowhead2Type = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Measurement(self):
##        '-no docstring-'
##        #return bVal
##
##    def _get(self):
##        '-no docstring-'
##        #return BlockName
##    def _set(self, BlockName):
##        '-no docstring-'
##    Arrowhead1Block = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return BlockName
##    def _set(self, BlockName):
##        '-no docstring-'
##    Arrowhead2Block = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Linetype
##    def _set(self, Linetype):
##        '-no docstring-'
##    DimensionLinetype = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Linetype
##    def _set(self, Linetype):
##        '-no docstring-'
##    ExtLine1Linetype = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Linetype
##    def _set(self, Linetype):
##        '-no docstring-'
##    ExtLine2Linetype = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bFixedLen
##    def _set(self, bFixedLen):
##        '-no docstring-'
##    ExtLineFixedLenSuppress = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return FixedLen
##    def _set(self, FixedLen):
##        '-no docstring-'
##    ExtLineFixedLen = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bIsDynamic
##    def _set(self, bIsDynamic):
##        '-no docstring-'
##    DimConstrForm = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bIsReference
##    def _set(self, bIsReference):
##        '-no docstring-'
##    DimConstrReference = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrName
##    def _set(self, bstrName):
##        '-no docstring-'
##    DimConstrName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrExpression
##    def _set(self, bstrExpression):
##        '-no docstring-'
##    DimConstrExpression = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    DimConstrValue = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrDescription
##    def _set(self, bstrDescription):
##        '-no docstring-'
##    DimConstrDesc = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return suffix
##    def _set(self, suffix):
##        '-no docstring-'
##    SubUnitsSuffix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return factor
##    def _set(self, factor):
##        '-no docstring-'
##    SubUnitsFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return suffix
##    def _set(self, suffix):
##        '-no docstring-'
##    AltSubUnitsSuffix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return factor
##    def _set(self, factor):
##        '-no docstring-'
##    AltSubUnitsFactor = property(_get, _set, doc = _set.__doc__)
##

IAcadDimRadial._methods_ = [
    COMMETHOD([dispid(42), 'nonbrowsable', 'propput'], HRESULT, 'LeaderLength',
              ( ['in'], c_double, 'rhs' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'AltUnits',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bAlternate' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'AltUnits',
              ( ['in'], VARIANT_BOOL, 'bAlternate' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'AltUnitsPrecision',
              ( ['out', 'retval'], POINTER(AcDimPrecision), 'precision' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'AltUnitsPrecision',
              ( ['in'], AcDimPrecision, 'precision' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'AltUnitsScale',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'scale' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'AltUnitsScale',
              ( ['in'], ACAD_NOUNITS, 'scale' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'AltRoundDistance',
              ( ['out', 'retval'], POINTER(c_double), 'Distance' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'AltRoundDistance',
              ( ['in'], c_double, 'Distance' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'AltTolerancePrecision',
              ( ['out', 'retval'], POINTER(AcDimPrecision), 'Distance' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'AltTolerancePrecision',
              ( ['in'], AcDimPrecision, 'Distance' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'AltUnitsFormat',
              ( ['out', 'retval'], POINTER(AcDimUnits), 'Units' )),
    COMMETHOD([dispid(9), 'propput'], HRESULT, 'AltUnitsFormat',
              ( ['in'], AcDimUnits, 'Units' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'AltTextPrefix',
              ( ['out', 'retval'], POINTER(BSTR), 'prefix' )),
    COMMETHOD([dispid(11), 'propput'], HRESULT, 'AltTextPrefix',
              ( ['in'], BSTR, 'prefix' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'AltTextSuffix',
              ( ['out', 'retval'], POINTER(BSTR), 'prefix' )),
    COMMETHOD([dispid(12), 'propput'], HRESULT, 'AltTextSuffix',
              ( ['in'], BSTR, 'prefix' )),
    COMMETHOD([dispid(43), 'propget'], HRESULT, 'CenterType',
              ( ['out', 'retval'], POINTER(AcDimCenterType), 'Type' )),
    COMMETHOD([dispid(43), 'propput'], HRESULT, 'CenterType',
              ( ['in'], AcDimCenterType, 'Type' )),
    COMMETHOD([dispid(44), 'propget'], HRESULT, 'CenterMarkSize',
              ( ['out', 'retval'], POINTER(c_double), 'Type' )),
    COMMETHOD([dispid(44), 'propput'], HRESULT, 'CenterMarkSize',
              ( ['in'], c_double, 'Type' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'DimensionLineColor',
              ( ['out', 'retval'], POINTER(ACAD_COLOR), 'Type' )),
    COMMETHOD([dispid(13), 'propput'], HRESULT, 'DimensionLineColor',
              ( ['in'], ACAD_COLOR, 'Type' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'PrimaryUnitsPrecision',
              ( ['out', 'retval'], POINTER(AcDimPrecision), 'Prec' )),
    COMMETHOD([dispid(15), 'propput'], HRESULT, 'PrimaryUnitsPrecision',
              ( ['in'], AcDimPrecision, 'Prec' )),
    COMMETHOD([dispid(19), 'propget'], HRESULT, 'FractionFormat',
              ( ['out', 'retval'], POINTER(AcDimFractionType), 'Type' )),
    COMMETHOD([dispid(19), 'propput'], HRESULT, 'FractionFormat',
              ( ['in'], AcDimFractionType, 'Type' )),
    COMMETHOD([dispid(18), 'propget'], HRESULT, 'Fit',
              ( ['out', 'retval'], POINTER(AcDimFit), 'fittype' )),
    COMMETHOD([dispid(18), 'propput'], HRESULT, 'Fit',
              ( ['in'], AcDimFit, 'fittype' )),
    COMMETHOD([dispid(21), 'propget'], HRESULT, 'LinearScaleFactor',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'Type' )),
    COMMETHOD([dispid(21), 'propput'], HRESULT, 'LinearScaleFactor',
              ( ['in'], ACAD_NOUNITS, 'Type' )),
    COMMETHOD([dispid(22), 'propget'], HRESULT, 'UnitsFormat',
              ( ['out', 'retval'], POINTER(AcDimLUnits), 'format' )),
    COMMETHOD([dispid(22), 'propput'], HRESULT, 'UnitsFormat',
              ( ['in'], AcDimLUnits, 'format' )),
    COMMETHOD([dispid(24), 'propget'], HRESULT, 'RoundDistance',
              ( ['out', 'retval'], POINTER(c_double), 'Distance' )),
    COMMETHOD([dispid(24), 'propput'], HRESULT, 'RoundDistance',
              ( ['in'], c_double, 'Distance' )),
    COMMETHOD([dispid(26), 'propget'], HRESULT, 'DimLineSuppress',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bSuppress' )),
    COMMETHOD([dispid(26), 'propput'], HRESULT, 'DimLineSuppress',
              ( ['in'], VARIANT_BOOL, 'bSuppress' )),
    COMMETHOD([dispid(30), 'propget'], HRESULT, 'TextInsideAlign',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(30), 'propput'], HRESULT, 'TextInsideAlign',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(31), 'propget'], HRESULT, 'TextInside',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(31), 'propput'], HRESULT, 'TextInside',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(32), 'propget'], HRESULT, 'ForceLineInside',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(32), 'propput'], HRESULT, 'ForceLineInside',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(33), 'propget'], HRESULT, 'TextOutsideAlign',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInside' )),
    COMMETHOD([dispid(33), 'propput'], HRESULT, 'TextOutsideAlign',
              ( ['in'], VARIANT_BOOL, 'bInside' )),
    COMMETHOD([dispid(48), 'propget'], HRESULT, 'AltSuppressLeadingZeros',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(48), 'propput'], HRESULT, 'AltSuppressLeadingZeros',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(49), 'propget'], HRESULT, 'AltSuppressTrailingZeros',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(49), 'propput'], HRESULT, 'AltSuppressTrailingZeros',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(50), 'propget'], HRESULT, 'AltSuppressZeroFeet',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(50), 'propput'], HRESULT, 'AltSuppressZeroFeet',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(51), 'propget'], HRESULT, 'AltSuppressZeroInches',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(51), 'propput'], HRESULT, 'AltSuppressZeroInches',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(52), 'propget'], HRESULT, 'AltToleranceSuppressLeadingZeros',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(52), 'propput'], HRESULT, 'AltToleranceSuppressLeadingZeros',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(53), 'propget'], HRESULT, 'AltToleranceSuppressTrailingZeros',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(53), 'propput'], HRESULT, 'AltToleranceSuppressTrailingZeros',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(54), 'propget'], HRESULT, 'AltToleranceSuppressZeroFeet',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(54), 'propput'], HRESULT, 'AltToleranceSuppressZeroFeet',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(55), 'propget'], HRESULT, 'AltToleranceSuppressZeroInches',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(55), 'propput'], HRESULT, 'AltToleranceSuppressZeroInches',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(56), 'propget'], HRESULT, 'SuppressZeroFeet',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(56), 'propput'], HRESULT, 'SuppressZeroFeet',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(57), 'propget'], HRESULT, 'SuppressZeroInches',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(57), 'propput'], HRESULT, 'SuppressZeroInches',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(58), 'propget'], HRESULT, 'ToleranceSuppressZeroFeet',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(58), 'propput'], HRESULT, 'ToleranceSuppressZeroFeet',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(59), 'propget'], HRESULT, 'ToleranceSuppressZeroInches',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(59), 'propput'], HRESULT, 'ToleranceSuppressZeroInches',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(60), 'propget'], HRESULT, 'DimensionLineWeight',
              ( ['out', 'retval'], POINTER(ACAD_LWEIGHT), 'weight' )),
    COMMETHOD([dispid(60), 'propput'], HRESULT, 'DimensionLineWeight',
              ( ['in'], ACAD_LWEIGHT, 'weight' )),
    COMMETHOD([dispid(61), 'propget'], HRESULT, 'ArrowheadSize',
              ( ['out', 'retval'], POINTER(c_double), 'size' )),
    COMMETHOD([dispid(61), 'propput'], HRESULT, 'ArrowheadSize',
              ( ['in'], c_double, 'size' )),
    COMMETHOD([dispid(63), 'propget'], HRESULT, 'ArrowheadType',
              ( ['out', 'retval'], POINTER(AcDimArrowheadType), 'Type' )),
    COMMETHOD([dispid(63), 'propput'], HRESULT, 'ArrowheadType',
              ( ['in'], AcDimArrowheadType, 'Type' )),
    COMMETHOD([dispid(64), 'propget'], HRESULT, 'Measurement',
              ( ['out', 'retval'], POINTER(c_double), 'bVal' )),
    COMMETHOD([dispid(66), 'nonbrowsable', 'propget'], HRESULT, 'ArrowheadBlock',
              ( ['out', 'retval'], POINTER(BSTR), 'BlockName' )),
    COMMETHOD([dispid(66), 'nonbrowsable', 'propput'], HRESULT, 'ArrowheadBlock',
              ( ['in'], BSTR, 'BlockName' )),
    COMMETHOD([dispid(80), 'propget'], HRESULT, 'DimensionLinetype',
              ( ['out', 'retval'], POINTER(BSTR), 'Linetype' )),
    COMMETHOD([dispid(80), 'propput'], HRESULT, 'DimensionLinetype',
              ( ['in'], BSTR, 'Linetype' )),
    COMMETHOD([dispid(85), 'propget'], HRESULT, 'DimConstrForm',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bIsDynamic' )),
    COMMETHOD([dispid(85), 'propput'], HRESULT, 'DimConstrForm',
              ( ['in'], VARIANT_BOOL, 'bIsDynamic' )),
    COMMETHOD([dispid(86), 'propget'], HRESULT, 'DimConstrReference',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bIsReference' )),
    COMMETHOD([dispid(86), 'propput'], HRESULT, 'DimConstrReference',
              ( ['in'], VARIANT_BOOL, 'bIsReference' )),
    COMMETHOD([dispid(87), 'propget'], HRESULT, 'DimConstrName',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(87), 'propput'], HRESULT, 'DimConstrName',
              ( ['in'], BSTR, 'bstrName' )),
    COMMETHOD([dispid(88), 'propget'], HRESULT, 'DimConstrExpression',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrExpression' )),
    COMMETHOD([dispid(88), 'propput'], HRESULT, 'DimConstrExpression',
              ( ['in'], BSTR, 'bstrExpression' )),
    COMMETHOD([dispid(89), 'propget'], HRESULT, 'DimConstrValue',
              ( ['out', 'retval'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(89), 'propput'], HRESULT, 'DimConstrValue',
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(90), 'propget'], HRESULT, 'DimConstrDesc',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrDescription' )),
    COMMETHOD([dispid(90), 'propput'], HRESULT, 'DimConstrDesc',
              ( ['in'], BSTR, 'bstrDescription' )),
]
################################################################
## code template for IAcadDimRadial implementation
##class IAcadDimRadial_Impl(object):
##    def _set(self, rhs):
##        '-no docstring-'
##    LeaderLength = property(fset = _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bAlternate
##    def _set(self, bAlternate):
##        '-no docstring-'
##    AltUnits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return precision
##    def _set(self, precision):
##        '-no docstring-'
##    AltUnitsPrecision = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return scale
##    def _set(self, scale):
##        '-no docstring-'
##    AltUnitsScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Distance
##    def _set(self, Distance):
##        '-no docstring-'
##    AltRoundDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Distance
##    def _set(self, Distance):
##        '-no docstring-'
##    AltTolerancePrecision = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Units
##    def _set(self, Units):
##        '-no docstring-'
##    AltUnitsFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return prefix
##    def _set(self, prefix):
##        '-no docstring-'
##    AltTextPrefix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return prefix
##    def _set(self, prefix):
##        '-no docstring-'
##    AltTextSuffix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    CenterType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    CenterMarkSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    DimensionLineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Prec
##    def _set(self, Prec):
##        '-no docstring-'
##    PrimaryUnitsPrecision = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    FractionFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return fittype
##    def _set(self, fittype):
##        '-no docstring-'
##    Fit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    LinearScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return format
##    def _set(self, format):
##        '-no docstring-'
##    UnitsFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Distance
##    def _set(self, Distance):
##        '-no docstring-'
##    RoundDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bSuppress
##    def _set(self, bSuppress):
##        '-no docstring-'
##    DimLineSuppress = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    TextInsideAlign = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    TextInside = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    ForceLineInside = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInside
##    def _set(self, bInside):
##        '-no docstring-'
##    TextOutsideAlign = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltSuppressLeadingZeros = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltSuppressTrailingZeros = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltToleranceSuppressLeadingZeros = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltToleranceSuppressTrailingZeros = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltToleranceSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltToleranceSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    SuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    SuppressZeroInches = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    ToleranceSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    ToleranceSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return weight
##    def _set(self, weight):
##        '-no docstring-'
##    DimensionLineWeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return size
##    def _set(self, size):
##        '-no docstring-'
##    ArrowheadSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    ArrowheadType = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Measurement(self):
##        '-no docstring-'
##        #return bVal
##
##    def _get(self):
##        '-no docstring-'
##        #return BlockName
##    def _set(self, BlockName):
##        '-no docstring-'
##    ArrowheadBlock = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Linetype
##    def _set(self, Linetype):
##        '-no docstring-'
##    DimensionLinetype = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bIsDynamic
##    def _set(self, bIsDynamic):
##        '-no docstring-'
##    DimConstrForm = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bIsReference
##    def _set(self, bIsReference):
##        '-no docstring-'
##    DimConstrReference = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrName
##    def _set(self, bstrName):
##        '-no docstring-'
##    DimConstrName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrExpression
##    def _set(self, bstrExpression):
##        '-no docstring-'
##    DimConstrExpression = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    DimConstrValue = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrDescription
##    def _set(self, bstrDescription):
##        '-no docstring-'
##    DimConstrDesc = property(_get, _set, doc = _set.__doc__)
##

IAcadLineTypes._methods_ = [
    COMMETHOD([dispid(0)], HRESULT, 'Item',
              ( ['in'], VARIANT, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadLineType)), 'pItem' )),
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pCount' )),
    COMMETHOD([dispid(-4), 'restricted', 'hidden', 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadLineType)), 'pLinetype' )),
    COMMETHOD([dispid(3)], HRESULT, 'Load',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'FileName' )),
]
################################################################
## code template for IAcadLineTypes implementation
##class IAcadLineTypes_Impl(object):
##    def Item(self, Index):
##        '-no docstring-'
##        #return pItem
##
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return pCount
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return pVal
##
##    def Add(self, Name):
##        '-no docstring-'
##        #return pLinetype
##
##    def Load(self, Name, FileName):
##        '-no docstring-'
##        #return 
##

IAcadDimOrdinate._methods_ = [
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'AltUnits',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bAlternate' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'AltUnits',
              ( ['in'], VARIANT_BOOL, 'bAlternate' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'AltUnitsPrecision',
              ( ['out', 'retval'], POINTER(AcDimPrecision), 'precision' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'AltUnitsPrecision',
              ( ['in'], AcDimPrecision, 'precision' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'AltUnitsScale',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'scale' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'AltUnitsScale',
              ( ['in'], ACAD_NOUNITS, 'scale' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'AltRoundDistance',
              ( ['out', 'retval'], POINTER(c_double), 'Distance' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'AltRoundDistance',
              ( ['in'], c_double, 'Distance' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'AltTolerancePrecision',
              ( ['out', 'retval'], POINTER(AcDimPrecision), 'Distance' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'AltTolerancePrecision',
              ( ['in'], AcDimPrecision, 'Distance' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'AltUnitsFormat',
              ( ['out', 'retval'], POINTER(AcDimUnits), 'Units' )),
    COMMETHOD([dispid(9), 'propput'], HRESULT, 'AltUnitsFormat',
              ( ['in'], AcDimUnits, 'Units' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'AltTextPrefix',
              ( ['out', 'retval'], POINTER(BSTR), 'prefix' )),
    COMMETHOD([dispid(11), 'propput'], HRESULT, 'AltTextPrefix',
              ( ['in'], BSTR, 'prefix' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'AltTextSuffix',
              ( ['out', 'retval'], POINTER(BSTR), 'prefix' )),
    COMMETHOD([dispid(12), 'propput'], HRESULT, 'AltTextSuffix',
              ( ['in'], BSTR, 'prefix' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'ExtensionLineColor',
              ( ['out', 'retval'], POINTER(ACAD_COLOR), 'Type' )),
    COMMETHOD([dispid(14), 'propput'], HRESULT, 'ExtensionLineColor',
              ( ['in'], ACAD_COLOR, 'Type' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'PrimaryUnitsPrecision',
              ( ['out', 'retval'], POINTER(AcDimPrecision), 'Prec' )),
    COMMETHOD([dispid(15), 'propput'], HRESULT, 'PrimaryUnitsPrecision',
              ( ['in'], AcDimPrecision, 'Prec' )),
    COMMETHOD([dispid(19), 'propget'], HRESULT, 'FractionFormat',
              ( ['out', 'retval'], POINTER(AcDimFractionType), 'Type' )),
    COMMETHOD([dispid(19), 'propput'], HRESULT, 'FractionFormat',
              ( ['in'], AcDimFractionType, 'Type' )),
    COMMETHOD([dispid(21), 'propget'], HRESULT, 'LinearScaleFactor',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'Type' )),
    COMMETHOD([dispid(21), 'propput'], HRESULT, 'LinearScaleFactor',
              ( ['in'], ACAD_NOUNITS, 'Type' )),
    COMMETHOD([dispid(22), 'propget'], HRESULT, 'UnitsFormat',
              ( ['out', 'retval'], POINTER(AcDimLUnits), 'format' )),
    COMMETHOD([dispid(22), 'propput'], HRESULT, 'UnitsFormat',
              ( ['in'], AcDimLUnits, 'format' )),
    COMMETHOD([dispid(23), 'propget'], HRESULT, 'ExtensionLineWeight',
              ( ['out', 'retval'], POINTER(ACAD_LWEIGHT), 'lweight' )),
    COMMETHOD([dispid(23), 'propput'], HRESULT, 'ExtensionLineWeight',
              ( ['in'], ACAD_LWEIGHT, 'lweight' )),
    COMMETHOD([dispid(24), 'propget'], HRESULT, 'RoundDistance',
              ( ['out', 'retval'], POINTER(c_double), 'Distance' )),
    COMMETHOD([dispid(24), 'propput'], HRESULT, 'RoundDistance',
              ( ['in'], c_double, 'Distance' )),
    COMMETHOD([dispid(35), 'propget'], HRESULT, 'ExtensionLineOffset',
              ( ['out', 'retval'], POINTER(c_double), 'Offset' )),
    COMMETHOD([dispid(35), 'propput'], HRESULT, 'ExtensionLineOffset',
              ( ['in'], c_double, 'Offset' )),
    COMMETHOD([dispid(48), 'propget'], HRESULT, 'AltSuppressLeadingZeros',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(48), 'propput'], HRESULT, 'AltSuppressLeadingZeros',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(49), 'propget'], HRESULT, 'AltSuppressTrailingZeros',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(49), 'propput'], HRESULT, 'AltSuppressTrailingZeros',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(50), 'propget'], HRESULT, 'AltSuppressZeroFeet',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(50), 'propput'], HRESULT, 'AltSuppressZeroFeet',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(51), 'propget'], HRESULT, 'AltSuppressZeroInches',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(51), 'propput'], HRESULT, 'AltSuppressZeroInches',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(52), 'propget'], HRESULT, 'AltToleranceSuppressLeadingZeros',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(52), 'propput'], HRESULT, 'AltToleranceSuppressLeadingZeros',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(53), 'propget'], HRESULT, 'AltToleranceSuppressTrailingZeros',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(53), 'propput'], HRESULT, 'AltToleranceSuppressTrailingZeros',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(54), 'propget'], HRESULT, 'AltToleranceSuppressZeroFeet',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(54), 'propput'], HRESULT, 'AltToleranceSuppressZeroFeet',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(55), 'propget'], HRESULT, 'AltToleranceSuppressZeroInches',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(55), 'propput'], HRESULT, 'AltToleranceSuppressZeroInches',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(56), 'propget'], HRESULT, 'SuppressZeroFeet',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(56), 'propput'], HRESULT, 'SuppressZeroFeet',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(57), 'propget'], HRESULT, 'SuppressZeroInches',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(57), 'propput'], HRESULT, 'SuppressZeroInches',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(58), 'propget'], HRESULT, 'ToleranceSuppressZeroFeet',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(58), 'propput'], HRESULT, 'ToleranceSuppressZeroFeet',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(59), 'propget'], HRESULT, 'ToleranceSuppressZeroInches',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bVal' )),
    COMMETHOD([dispid(59), 'propput'], HRESULT, 'ToleranceSuppressZeroInches',
              ( ['in'], VARIANT_BOOL, 'bVal' )),
    COMMETHOD([dispid(61), 'propget'], HRESULT, 'ArrowheadSize',
              ( ['out', 'retval'], POINTER(c_double), 'size' )),
    COMMETHOD([dispid(61), 'propput'], HRESULT, 'ArrowheadSize',
              ( ['in'], c_double, 'size' )),
    COMMETHOD([dispid(64), 'propget'], HRESULT, 'Measurement',
              ( ['out', 'retval'], POINTER(c_double), 'bVal' )),
    COMMETHOD([dispid(83), 'propget'], HRESULT, 'ExtLineFixedLenSuppress',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bFixedLen' )),
    COMMETHOD([dispid(83), 'propput'], HRESULT, 'ExtLineFixedLenSuppress',
              ( ['in'], VARIANT_BOOL, 'bFixedLen' )),
    COMMETHOD([dispid(84), 'propget'], HRESULT, 'ExtLineFixedLen',
              ( ['out', 'retval'], POINTER(c_double), 'FixedLen' )),
    COMMETHOD([dispid(84), 'propput'], HRESULT, 'ExtLineFixedLen',
              ( ['in'], c_double, 'FixedLen' )),
    COMMETHOD([dispid(1574), 'propget'], HRESULT, 'SubUnitsSuffix',
              ( ['out', 'retval'], POINTER(BSTR), 'suffix' )),
    COMMETHOD([dispid(1574), 'propput'], HRESULT, 'SubUnitsSuffix',
              ( ['in'], BSTR, 'suffix' )),
    COMMETHOD([dispid(1575), 'propget'], HRESULT, 'SubUnitsFactor',
              ( ['out', 'retval'], POINTER(c_double), 'factor' )),
    COMMETHOD([dispid(1575), 'propput'], HRESULT, 'SubUnitsFactor',
              ( ['in'], c_double, 'factor' )),
    COMMETHOD([dispid(1576), 'propget'], HRESULT, 'AltSubUnitsSuffix',
              ( ['out', 'retval'], POINTER(BSTR), 'suffix' )),
    COMMETHOD([dispid(1576), 'propput'], HRESULT, 'AltSubUnitsSuffix',
              ( ['in'], BSTR, 'suffix' )),
    COMMETHOD([dispid(1577), 'propget'], HRESULT, 'AltSubUnitsFactor',
              ( ['out', 'retval'], POINTER(c_double), 'factor' )),
    COMMETHOD([dispid(1577), 'propput'], HRESULT, 'AltSubUnitsFactor',
              ( ['in'], c_double, 'factor' )),
]
################################################################
## code template for IAcadDimOrdinate implementation
##class IAcadDimOrdinate_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return bAlternate
##    def _set(self, bAlternate):
##        '-no docstring-'
##    AltUnits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return precision
##    def _set(self, precision):
##        '-no docstring-'
##    AltUnitsPrecision = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return scale
##    def _set(self, scale):
##        '-no docstring-'
##    AltUnitsScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Distance
##    def _set(self, Distance):
##        '-no docstring-'
##    AltRoundDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Distance
##    def _set(self, Distance):
##        '-no docstring-'
##    AltTolerancePrecision = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Units
##    def _set(self, Units):
##        '-no docstring-'
##    AltUnitsFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return prefix
##    def _set(self, prefix):
##        '-no docstring-'
##    AltTextPrefix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return prefix
##    def _set(self, prefix):
##        '-no docstring-'
##    AltTextSuffix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    ExtensionLineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Prec
##    def _set(self, Prec):
##        '-no docstring-'
##    PrimaryUnitsPrecision = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    FractionFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    LinearScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return format
##    def _set(self, format):
##        '-no docstring-'
##    UnitsFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return lweight
##    def _set(self, lweight):
##        '-no docstring-'
##    ExtensionLineWeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Distance
##    def _set(self, Distance):
##        '-no docstring-'
##    RoundDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Offset
##    def _set(self, Offset):
##        '-no docstring-'
##    ExtensionLineOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltSuppressLeadingZeros = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltSuppressTrailingZeros = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltToleranceSuppressLeadingZeros = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltToleranceSuppressTrailingZeros = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltToleranceSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    AltToleranceSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    SuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    SuppressZeroInches = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    ToleranceSuppressZeroFeet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bVal
##    def _set(self, bVal):
##        '-no docstring-'
##    ToleranceSuppressZeroInches = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return size
##    def _set(self, size):
##        '-no docstring-'
##    ArrowheadSize = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Measurement(self):
##        '-no docstring-'
##        #return bVal
##
##    def _get(self):
##        '-no docstring-'
##        #return bFixedLen
##    def _set(self, bFixedLen):
##        '-no docstring-'
##    ExtLineFixedLenSuppress = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return FixedLen
##    def _set(self, FixedLen):
##        '-no docstring-'
##    ExtLineFixedLen = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return suffix
##    def _set(self, suffix):
##        '-no docstring-'
##    SubUnitsSuffix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return factor
##    def _set(self, factor):
##        '-no docstring-'
##    SubUnitsFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return suffix
##    def _set(self, suffix):
##        '-no docstring-'
##    AltSubUnitsSuffix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return factor
##    def _set(self, factor):
##        '-no docstring-'
##    AltSubUnitsFactor = property(_get, _set, doc = _set.__doc__)
##

IAcadAcCmColor._methods_ = [
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'EntityColor',
              ( ['in'], c_int, 'eColor' )),
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'EntityColor',
              ( ['out', 'retval'], POINTER(c_int), 'eColor' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'ColorName',
              ( ['out', 'retval'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'BookName',
              ( ['out', 'retval'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetNames',
              ( ['in'], BSTR, 'ColorName' ),
              ( ['in'], BSTR, 'BookName' )),
    COMMETHOD([dispid(5)], HRESULT, 'Delete'),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'Red',
              ( ['out', 'retval'], POINTER(c_int), 'Red' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'Blue',
              ( ['out', 'retval'], POINTER(c_int), 'Blue' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'Green',
              ( ['out', 'retval'], POINTER(c_int), 'Green' )),
    COMMETHOD([dispid(9)], HRESULT, 'SetRGB',
              ( ['in'], c_int, 'Red' ),
              ( ['in'], c_int, 'Green' ),
              ( ['in'], c_int, 'Blue' )),
    COMMETHOD([dispid(16), 'propput'], HRESULT, 'ColorMethod',
              ( ['in'], AcColorMethod, 'Flags' )),
    COMMETHOD([dispid(16), 'propget'], HRESULT, 'ColorMethod',
              ( ['out', 'retval'], POINTER(AcColorMethod), 'Flags' )),
    COMMETHOD([dispid(17), 'propget'], HRESULT, 'ColorIndex',
              ( ['out', 'retval'], POINTER(AcColor), 'color' )),
    COMMETHOD([dispid(17), 'propput'], HRESULT, 'ColorIndex',
              ( ['in'], AcColor, 'color' )),
    COMMETHOD([dispid(18)], HRESULT, 'SetColorBookColor',
              ( ['in'], BSTR, 'BookName' ),
              ( ['in'], BSTR, 'ColorName' )),
]
################################################################
## code template for IAcadAcCmColor implementation
##class IAcadAcCmColor_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return eColor
##    def _set(self, eColor):
##        '-no docstring-'
##    EntityColor = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ColorName(self):
##        '-no docstring-'
##        #return Name
##
##    @property
##    def BookName(self):
##        '-no docstring-'
##        #return Name
##
##    def SetNames(self, ColorName, BookName):
##        '-no docstring-'
##        #return 
##
##    def Delete(self):
##        '-no docstring-'
##        #return 
##
##    @property
##    def Red(self):
##        '-no docstring-'
##        #return Red
##
##    @property
##    def Blue(self):
##        '-no docstring-'
##        #return Blue
##
##    @property
##    def Green(self):
##        '-no docstring-'
##        #return Green
##
##    def SetRGB(self, Red, Green, Blue):
##        '-no docstring-'
##        #return 
##
##    def _get(self):
##        '-no docstring-'
##        #return Flags
##    def _set(self, Flags):
##        '-no docstring-'
##    ColorMethod = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return color
##    def _set(self, color):
##        '-no docstring-'
##    ColorIndex = property(_get, _set, doc = _set.__doc__)
##
##    def SetColorBookColor(self, BookName, ColorName):
##        '-no docstring-'
##        #return 
##

IAcadLayer._methods_ = [
    COMMETHOD([dispid(1), 'hidden', 'propget'], HRESULT, 'color',
              ( ['out', 'retval'], POINTER(AcColor), 'color' )),
    COMMETHOD([dispid(1), 'hidden', 'propput'], HRESULT, 'color',
              ( ['in'], AcColor, 'color' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'TrueColor',
              ( ['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor' )),
    COMMETHOD([dispid(11), 'propput'], HRESULT, 'TrueColor',
              ( ['in'], POINTER(IAcadAcCmColor), 'pColor' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'Freeze',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bFreeze' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'Freeze',
              ( ['in'], VARIANT_BOOL, 'bFreeze' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'LayerOn',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bOn' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'LayerOn',
              ( ['in'], VARIANT_BOOL, 'bOn' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'Linetype',
              ( ['out', 'retval'], POINTER(BSTR), 'Linetype' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'Linetype',
              ( ['in'], BSTR, 'Linetype' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'Lock',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'Block' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'Lock',
              ( ['in'], VARIANT_BOOL, 'Block' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'Name',
              ( ['in'], BSTR, 'bstrName' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'Plottable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bPlottable' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'Plottable',
              ( ['in'], VARIANT_BOOL, 'bPlottable' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'ViewportDefault',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bDefault' )),
    COMMETHOD([dispid(8), 'propput'], HRESULT, 'ViewportDefault',
              ( ['in'], VARIANT_BOOL, 'bDefault' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'PlotStyleName',
              ( ['out', 'retval'], POINTER(BSTR), 'plotStyle' )),
    COMMETHOD([dispid(9), 'propput'], HRESULT, 'PlotStyleName',
              ( ['in'], BSTR, 'plotStyle' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'Lineweight',
              ( ['out', 'retval'], POINTER(ACAD_LWEIGHT), 'Lineweight' )),
    COMMETHOD([dispid(10), 'propput'], HRESULT, 'Lineweight',
              ( ['in'], ACAD_LWEIGHT, 'Lineweight' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'Description' )),
    COMMETHOD([dispid(12), 'propput'], HRESULT, 'Description',
              ( ['in'], BSTR, 'Description' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'Used',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bUsed' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'Material',
              ( ['out', 'retval'], POINTER(BSTR), 'Material' )),
    COMMETHOD([dispid(14), 'propput'], HRESULT, 'Material',
              ( ['in'], BSTR, 'Material' )),
]
################################################################
## code template for IAcadLayer implementation
##class IAcadLayer_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return color
##    def _set(self, color):
##        '-no docstring-'
##    color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pColor
##    def _set(self, pColor):
##        '-no docstring-'
##    TrueColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bFreeze
##    def _set(self, bFreeze):
##        '-no docstring-'
##    Freeze = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bOn
##    def _set(self, bOn):
##        '-no docstring-'
##    LayerOn = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Linetype
##    def _set(self, Linetype):
##        '-no docstring-'
##    Linetype = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Block
##    def _set(self, Block):
##        '-no docstring-'
##    Lock = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrName
##    def _set(self, bstrName):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bPlottable
##    def _set(self, bPlottable):
##        '-no docstring-'
##    Plottable = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bDefault
##    def _set(self, bDefault):
##        '-no docstring-'
##    ViewportDefault = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return plotStyle
##    def _set(self, plotStyle):
##        '-no docstring-'
##    PlotStyleName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Lineweight
##    def _set(self, Lineweight):
##        '-no docstring-'
##    Lineweight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Description
##    def _set(self, Description):
##        '-no docstring-'
##    Description = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Used(self):
##        '-no docstring-'
##        #return bUsed
##
##    def _get(self):
##        '-no docstring-'
##        #return Material
##    def _set(self, Material):
##        '-no docstring-'
##    Material = property(_get, _set, doc = _set.__doc__)
##

IAcadLayouts._methods_ = [
    COMMETHOD([dispid(0)], HRESULT, 'Item',
              ( ['in'], VARIANT, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadLayout)), 'pItem' )),
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pCount' )),
    COMMETHOD([dispid(-4), 'restricted', 'hidden', 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadLayout)), 'pLayout' )),
]
################################################################
## code template for IAcadLayouts implementation
##class IAcadLayouts_Impl(object):
##    def Item(self, Index):
##        '-no docstring-'
##        #return pItem
##
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return pCount
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return pVal
##
##    def Add(self, Name):
##        '-no docstring-'
##        #return pLayout
##

IAcadDatabasePreferences._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Application',
              ( ['out', 'retval'], POINTER(POINTER(IDispatch)), 'pAppObj' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'SolidFill',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'Fill' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'SolidFill',
              ( ['in'], VARIANT_BOOL, 'Fill' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'XRefEdit',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'Edit' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'XRefEdit',
              ( ['in'], VARIANT_BOOL, 'Edit' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'XRefLayerVisibility',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'XRefLayerVis' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'XRefLayerVisibility',
              ( ['in'], VARIANT_BOOL, 'XRefLayerVis' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'OLELaunch',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'Launch' )),
    COMMETHOD([dispid(8), 'propput'], HRESULT, 'OLELaunch',
              ( ['in'], VARIANT_BOOL, 'Launch' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'AllowLongSymbolNames',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'LongNames' )),
    COMMETHOD([dispid(9), 'propput'], HRESULT, 'AllowLongSymbolNames',
              ( ['in'], VARIANT_BOOL, 'LongNames' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'ObjectSortBySelection',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'Sort' )),
    COMMETHOD([dispid(10), 'propput'], HRESULT, 'ObjectSortBySelection',
              ( ['in'], VARIANT_BOOL, 'Sort' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'ObjectSortBySnap',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'Sort' )),
    COMMETHOD([dispid(11), 'propput'], HRESULT, 'ObjectSortBySnap',
              ( ['in'], VARIANT_BOOL, 'Sort' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'ObjectSortByRedraws',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'Sort' )),
    COMMETHOD([dispid(12), 'propput'], HRESULT, 'ObjectSortByRedraws',
              ( ['in'], VARIANT_BOOL, 'Sort' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'ObjectSortByRegens',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'Sort' )),
    COMMETHOD([dispid(13), 'propput'], HRESULT, 'ObjectSortByRegens',
              ( ['in'], VARIANT_BOOL, 'Sort' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'ObjectSortByPlotting',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'Sort' )),
    COMMETHOD([dispid(14), 'propput'], HRESULT, 'ObjectSortByPlotting',
              ( ['in'], VARIANT_BOOL, 'Sort' )),
    COMMETHOD([dispid(16), 'propget'], HRESULT, 'ObjectSortByPSOutput',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'Sort' )),
    COMMETHOD([dispid(16), 'propput'], HRESULT, 'ObjectSortByPSOutput',
              ( ['in'], VARIANT_BOOL, 'Sort' )),
    COMMETHOD([dispid(19), 'propput'], HRESULT, 'ContourLinesPerSurface',
              ( ['in'], c_int, 'Path' )),
    COMMETHOD([dispid(19), 'propget'], HRESULT, 'ContourLinesPerSurface',
              ( ['out', 'retval'], POINTER(c_int), 'Path' )),
    COMMETHOD([dispid(21), 'propput'], HRESULT, 'DisplaySilhouette',
              ( ['in'], VARIANT_BOOL, 'Path' )),
    COMMETHOD([dispid(21), 'propget'], HRESULT, 'DisplaySilhouette',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'Path' )),
    COMMETHOD([dispid(22), 'propput'], HRESULT, 'MaxActiveViewports',
              ( ['in'], c_int, 'Path' )),
    COMMETHOD([dispid(22), 'propget'], HRESULT, 'MaxActiveViewports',
              ( ['out', 'retval'], POINTER(c_int), 'Path' )),
    COMMETHOD([dispid(23), 'propput'], HRESULT, 'RenderSmoothness',
              ( ['in'], c_double, 'Path' )),
    COMMETHOD([dispid(23), 'propget'], HRESULT, 'RenderSmoothness',
              ( ['out', 'retval'], POINTER(c_double), 'Path' )),
    COMMETHOD([dispid(24), 'propput'], HRESULT, 'SegmentPerPolyline',
              ( ['in'], c_int, 'Path' )),
    COMMETHOD([dispid(24), 'propget'], HRESULT, 'SegmentPerPolyline',
              ( ['out', 'retval'], POINTER(c_int), 'Path' )),
    COMMETHOD([dispid(25), 'propput'], HRESULT, 'TextFrameDisplay',
              ( ['in'], VARIANT_BOOL, 'Path' )),
    COMMETHOD([dispid(25), 'propget'], HRESULT, 'TextFrameDisplay',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'Path' )),
    COMMETHOD([dispid(26), 'propput'], HRESULT, 'Lineweight',
              ( ['in'], AcLineWeight, 'Path' )),
    COMMETHOD([dispid(26), 'propget'], HRESULT, 'Lineweight',
              ( ['out', 'retval'], POINTER(AcLineWeight), 'Path' )),
    COMMETHOD([dispid(27), 'propput'], HRESULT, 'LineWeightDisplay',
              ( ['in'], VARIANT_BOOL, 'Path' )),
    COMMETHOD([dispid(27), 'propget'], HRESULT, 'LineWeightDisplay',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'Path' )),
]
################################################################
## code template for IAcadDatabasePreferences implementation
##class IAcadDatabasePreferences_Impl(object):
##    @property
##    def Application(self):
##        '-no docstring-'
##        #return pAppObj
##
##    def _get(self):
##        '-no docstring-'
##        #return Fill
##    def _set(self, Fill):
##        '-no docstring-'
##    SolidFill = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Edit
##    def _set(self, Edit):
##        '-no docstring-'
##    XRefEdit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return XRefLayerVis
##    def _set(self, XRefLayerVis):
##        '-no docstring-'
##    XRefLayerVisibility = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Launch
##    def _set(self, Launch):
##        '-no docstring-'
##    OLELaunch = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return LongNames
##    def _set(self, LongNames):
##        '-no docstring-'
##    AllowLongSymbolNames = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Sort
##    def _set(self, Sort):
##        '-no docstring-'
##    ObjectSortBySelection = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Sort
##    def _set(self, Sort):
##        '-no docstring-'
##    ObjectSortBySnap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Sort
##    def _set(self, Sort):
##        '-no docstring-'
##    ObjectSortByRedraws = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Sort
##    def _set(self, Sort):
##        '-no docstring-'
##    ObjectSortByRegens = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Sort
##    def _set(self, Sort):
##        '-no docstring-'
##    ObjectSortByPlotting = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Sort
##    def _set(self, Sort):
##        '-no docstring-'
##    ObjectSortByPSOutput = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Path
##    def _set(self, Path):
##        '-no docstring-'
##    ContourLinesPerSurface = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Path
##    def _set(self, Path):
##        '-no docstring-'
##    DisplaySilhouette = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Path
##    def _set(self, Path):
##        '-no docstring-'
##    MaxActiveViewports = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Path
##    def _set(self, Path):
##        '-no docstring-'
##    RenderSmoothness = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Path
##    def _set(self, Path):
##        '-no docstring-'
##    SegmentPerPolyline = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Path
##    def _set(self, Path):
##        '-no docstring-'
##    TextFrameDisplay = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Path
##    def _set(self, Path):
##        '-no docstring-'
##    Lineweight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Path
##    def _set(self, Path):
##        '-no docstring-'
##    LineWeightDisplay = property(_get, _set, doc = _set.__doc__)
##

IAcadPlotConfigurations._methods_ = [
    COMMETHOD([dispid(0)], HRESULT, 'Item',
              ( ['in'], VARIANT, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadPlotConfiguration)), 'pItem' )),
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pCount' )),
    COMMETHOD([dispid(-4), 'restricted', 'hidden', 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], VARIANT, 'ModelType' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadPlotConfiguration)), 'pPlotConfig' )),
]
################################################################
## code template for IAcadPlotConfigurations implementation
##class IAcadPlotConfigurations_Impl(object):
##    def Item(self, Index):
##        '-no docstring-'
##        #return pItem
##
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return pCount
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return pVal
##
##    def Add(self, Name, ModelType):
##        '-no docstring-'
##        #return pPlotConfig
##

IAcadRegion._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Area',
              ( ['out', 'retval'], POINTER(c_double), 'Area' )),
    COMMETHOD([dispid(2), 'nonbrowsable', 'propget'], HRESULT, 'Centroid',
              ( ['out', 'retval'], POINTER(VARIANT), 'Centroid' )),
    COMMETHOD([dispid(3), 'nonbrowsable', 'propget'], HRESULT, 'MomentOfInertia',
              ( ['out', 'retval'], POINTER(VARIANT), 'momentInertia' )),
    COMMETHOD([dispid(4), 'nonbrowsable', 'propget'], HRESULT, 'Normal',
              ( ['out', 'retval'], POINTER(VARIANT), 'Normal' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'Perimeter',
              ( ['out', 'retval'], POINTER(c_double), 'Perimeter' )),
    COMMETHOD([dispid(6), 'nonbrowsable', 'propget'], HRESULT, 'PrincipalDirections',
              ( ['out', 'retval'], POINTER(VARIANT), 'prinDir' )),
    COMMETHOD([dispid(7), 'nonbrowsable', 'propget'], HRESULT, 'PrincipalMoments',
              ( ['out', 'retval'], POINTER(VARIANT), 'prinMoments' )),
    COMMETHOD([dispid(8), 'nonbrowsable', 'propget'], HRESULT, 'ProductOfInertia',
              ( ['out', 'retval'], POINTER(c_double), 'prodInertia' )),
    COMMETHOD([dispid(9), 'nonbrowsable', 'propget'], HRESULT, 'RadiiOfGyration',
              ( ['out', 'retval'], POINTER(VARIANT), 'radiiGyration' )),
    COMMETHOD([dispid(10)], HRESULT, 'Boolean',
              ( ['in'], AcBooleanType, 'Operation' ),
              ( ['in'], POINTER(IAcadRegion), 'Object' )),
    COMMETHOD([dispid(11)], HRESULT, 'Explode',
              ( ['out', 'retval'], POINTER(VARIANT), 'pArrayObjs' )),
]
################################################################
## code template for IAcadRegion implementation
##class IAcadRegion_Impl(object):
##    @property
##    def Area(self):
##        '-no docstring-'
##        #return Area
##
##    @property
##    def Centroid(self):
##        '-no docstring-'
##        #return Centroid
##
##    @property
##    def MomentOfInertia(self):
##        '-no docstring-'
##        #return momentInertia
##
##    @property
##    def Normal(self):
##        '-no docstring-'
##        #return Normal
##
##    @property
##    def Perimeter(self):
##        '-no docstring-'
##        #return Perimeter
##
##    @property
##    def PrincipalDirections(self):
##        '-no docstring-'
##        #return prinDir
##
##    @property
##    def PrincipalMoments(self):
##        '-no docstring-'
##        #return prinMoments
##
##    @property
##    def ProductOfInertia(self):
##        '-no docstring-'
##        #return prodInertia
##
##    @property
##    def RadiiOfGyration(self):
##        '-no docstring-'
##        #return radiiGyration
##
##    def Boolean(self, Operation, Object):
##        '-no docstring-'
##        #return 
##
##    def Explode(self):
##        '-no docstring-'
##        #return pArrayObjs
##

IAcadRegisteredApplication._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'Name',
              ( ['in'], BSTR, 'bstrName' )),
]
################################################################
## code template for IAcadRegisteredApplication implementation
##class IAcadRegisteredApplication_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return bstrName
##    def _set(self, bstrName):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##

IAcadUCSs._methods_ = [
    COMMETHOD([dispid(0)], HRESULT, 'Item',
              ( ['in'], VARIANT, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadUCS)), 'pItem' )),
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pCount' )),
    COMMETHOD([dispid(-4), 'restricted', 'hidden', 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Add',
              ( ['in'], VARIANT, 'Origin' ),
              ( ['in'], VARIANT, 'XAxisPoint' ),
              ( ['in'], VARIANT, 'YAxisPoint' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadUCS)), 'pUCS' )),
]
################################################################
## code template for IAcadUCSs implementation
##class IAcadUCSs_Impl(object):
##    def Item(self, Index):
##        '-no docstring-'
##        #return pItem
##
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return pCount
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return pVal
##
##    def Add(self, Origin, XAxisPoint, YAxisPoint, Name):
##        '-no docstring-'
##        #return pUCS
##

IAcadViewports._methods_ = [
    COMMETHOD([dispid(0)], HRESULT, 'Item',
              ( ['in'], VARIANT, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadViewport)), 'pItem' )),
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pCount' )),
    COMMETHOD([dispid(-4), 'restricted', 'hidden', 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadViewport)), 'pRegApp' )),
    COMMETHOD([dispid(3)], HRESULT, 'DeleteConfiguration',
              ( ['in'], BSTR, 'Name' )),
]
################################################################
## code template for IAcadViewports implementation
##class IAcadViewports_Impl(object):
##    def Item(self, Index):
##        '-no docstring-'
##        #return pItem
##
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return pCount
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return pVal
##
##    def Add(self, Name):
##        '-no docstring-'
##        #return pRegApp
##
##    def DeleteConfiguration(self, Name):
##        '-no docstring-'
##        #return 
##

IAcadTextStyle._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'BigFontFile',
              ( ['out', 'retval'], POINTER(BSTR), 'fontFile' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'BigFontFile',
              ( ['in'], BSTR, 'fontFile' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'fontFile',
              ( ['out', 'retval'], POINTER(BSTR), 'fontFile' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'fontFile',
              ( ['in'], BSTR, 'fontFile' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'Height',
              ( ['out', 'retval'], POINTER(c_double), 'Height' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'Height',
              ( ['in'], c_double, 'Height' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'LastHeight',
              ( ['out', 'retval'], POINTER(c_double), 'Height' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'LastHeight',
              ( ['in'], c_double, 'Height' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'ObliqueAngle',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'obliAngle' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'ObliqueAngle',
              ( ['in'], ACAD_ANGLE, 'obliAngle' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'TextGenerationFlag',
              ( ['out', 'retval'], POINTER(c_int), 'textGenFlag' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'TextGenerationFlag',
              ( ['in'], c_int, 'textGenFlag' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(c_double), 'Width' )),
    COMMETHOD([dispid(8), 'propput'], HRESULT, 'Width',
              ( ['in'], c_double, 'Width' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetFont',
              ( ['out'], POINTER(BSTR), 'TypeFace' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'Bold' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'Italic' ),
              ( ['out'], POINTER(c_int), 'Charset' ),
              ( ['out'], POINTER(c_int), 'PitchAndFamily' )),
    COMMETHOD([dispid(16)], HRESULT, 'SetFont',
              ( ['in'], BSTR, 'TypeFace' ),
              ( ['in'], VARIANT_BOOL, 'Bold' ),
              ( ['in'], VARIANT_BOOL, 'Italic' ),
              ( ['in'], c_int, 'Charset' ),
              ( ['in'], c_int, 'PitchAndFamily' )),
]
################################################################
## code template for IAcadTextStyle implementation
##class IAcadTextStyle_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return fontFile
##    def _set(self, fontFile):
##        '-no docstring-'
##    BigFontFile = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return fontFile
##    def _set(self, fontFile):
##        '-no docstring-'
##    fontFile = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Height
##    def _set(self, Height):
##        '-no docstring-'
##    Height = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Height
##    def _set(self, Height):
##        '-no docstring-'
##    LastHeight = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        '-no docstring-'
##        #return bstrName
##
##    def _get(self):
##        '-no docstring-'
##        #return obliAngle
##    def _set(self, obliAngle):
##        '-no docstring-'
##    ObliqueAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return textGenFlag
##    def _set(self, textGenFlag):
##        '-no docstring-'
##    TextGenerationFlag = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Width
##    def _set(self, Width):
##        '-no docstring-'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    def GetFont(self):
##        '-no docstring-'
##        #return TypeFace, Bold, Italic, Charset, PitchAndFamily
##
##    def SetFont(self, TypeFace, Bold, Italic, Charset, PitchAndFamily):
##        '-no docstring-'
##        #return 
##

IAcadViews._methods_ = [
    COMMETHOD([dispid(0)], HRESULT, 'Item',
              ( ['in'], VARIANT, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadView)), 'pItem' )),
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pCount' )),
    COMMETHOD([dispid(-4), 'restricted', 'hidden', 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'pVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadView)), 'pRegApp' )),
]
################################################################
## code template for IAcadViews implementation
##class IAcadViews_Impl(object):
##    def Item(self, Index):
##        '-no docstring-'
##        #return pItem
##
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return pCount
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return pVal
##
##    def Add(self, Name):
##        '-no docstring-'
##        #return pRegApp
##

IAcadUCS._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'Name',
              ( ['in'], BSTR, 'bstrName' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'Origin',
              ( ['out', 'retval'], POINTER(VARIANT), 'Origin' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'Origin',
              ( ['in'], VARIANT, 'Origin' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'XVector',
              ( ['out', 'retval'], POINTER(VARIANT), 'XVector' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'XVector',
              ( ['in'], VARIANT, 'XVector' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'YVector',
              ( ['out', 'retval'], POINTER(VARIANT), 'YVector' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'YVector',
              ( ['in'], VARIANT, 'YVector' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetUCSMatrix',
              ( ['out', 'retval'], POINTER(VARIANT), 'transMatrix' )),
]
################################################################
## code template for IAcadUCS implementation
##class IAcadUCS_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return bstrName
##    def _set(self, bstrName):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Origin
##    def _set(self, Origin):
##        '-no docstring-'
##    Origin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return XVector
##    def _set(self, XVector):
##        '-no docstring-'
##    XVector = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return YVector
##    def _set(self, YVector):
##        '-no docstring-'
##    YVector = property(_get, _set, doc = _set.__doc__)
##
##    def GetUCSMatrix(self):
##        '-no docstring-'
##        #return transMatrix
##

IAcadSectionTypeSettings2._methods_ = [
    COMMETHOD([dispid(50), 'propget'], HRESULT, 'IntersectionBoundaryVisible',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal' )),
    COMMETHOD([dispid(50), 'propput'], HRESULT, 'IntersectionBoundaryVisible',
              ( ['in'], VARIANT_BOOL, 'pVal' )),
]
################################################################
## code template for IAcadSectionTypeSettings2 implementation
##class IAcadSectionTypeSettings2_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    IntersectionBoundaryVisible = property(_get, _set, doc = _set.__doc__)
##

class IAcadWipeout(IAcadRasterImage):
    _case_insensitive_ = True
    _iid_ = GUID('{E033803F-C5C1-4A35-AAFF-EFF3EDF735D6}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadWipeout._methods_ = [
]
################################################################
## code template for IAcadWipeout implementation
##class IAcadWipeout_Impl(object):

class AcadSubEntSolidFace(CoClass):
    _reg_clsid_ = GUID('{FEC95969-B15A-4F1F-8EE7-B340F9641CC5}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
class IAcadSubEntity(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{4B7BEB29-E1B3-43FD-9F02-60E6788C4ADE}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadSubEntSolidFace(IAcadSubEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{DE7D8943-926A-467C-A34E-1628CD4E06A4}')
    _idlflags_ = ['dual', 'oleautomation']
AcadSubEntSolidFace._com_interfaces_ = [IAcadSubEntSolidFace]

class IAcadSubEntSolidNode(IAcadSubEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{4FB2D37D-26A4-4C92-9219-F76C287F1F12}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadSubEntity._methods_ = [
    COMMETHOD([dispid(1024), 'nonbrowsable'], HRESULT, 'OnModified'),
    COMMETHOD([dispid(1025), 'nonbrowsable', 'propget'], HRESULT, 'ObjectName',
              ( ['out', 'retval'], POINTER(BSTR), 'ObjectName' )),
    COMMETHOD([dispid(1302), 'propget'], HRESULT, 'color',
              ( ['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'pColor' )),
    COMMETHOD([dispid(1302), 'propput'], HRESULT, 'color',
              ( ['in'], POINTER(IAcadAcCmColor), 'pColor' )),
    COMMETHOD([dispid(1281), 'propget'], HRESULT, 'Layer',
              ( ['out', 'retval'], POINTER(BSTR), 'Layer' )),
    COMMETHOD([dispid(1282), 'propget'], HRESULT, 'Linetype',
              ( ['out', 'retval'], POINTER(BSTR), 'Linetype' )),
    COMMETHOD([dispid(1283), 'propget'], HRESULT, 'LinetypeScale',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'ltScale' )),
    COMMETHOD([dispid(1299), 'propget'], HRESULT, 'PlotStyleName',
              ( ['out', 'retval'], POINTER(BSTR), 'plotStyle' )),
    COMMETHOD([dispid(1300), 'propget'], HRESULT, 'Lineweight',
              ( ['out', 'retval'], POINTER(ACAD_LWEIGHT), 'Lineweight' )),
    COMMETHOD([dispid(1301), 'propget'], HRESULT, 'Hyperlinks',
              ( ['out', 'retval'], POINTER(POINTER(IAcadHyperlinks)), 'Hyperlinks' )),
]
################################################################
## code template for IAcadSubEntity implementation
##class IAcadSubEntity_Impl(object):
##    def OnModified(self):
##        '-no docstring-'
##        #return 
##
##    @property
##    def ObjectName(self):
##        '-no docstring-'
##        #return ObjectName
##
##    def _get(self):
##        '-no docstring-'
##        #return pColor
##    def _set(self, pColor):
##        '-no docstring-'
##    color = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Layer(self):
##        '-no docstring-'
##        #return Layer
##
##    @property
##    def Linetype(self):
##        '-no docstring-'
##        #return Linetype
##
##    @property
##    def LinetypeScale(self):
##        '-no docstring-'
##        #return ltScale
##
##    @property
##    def PlotStyleName(self):
##        '-no docstring-'
##        #return plotStyle
##
##    @property
##    def Lineweight(self):
##        '-no docstring-'
##        #return Lineweight
##
##    @property
##    def Hyperlinks(self):
##        '-no docstring-'
##        #return Hyperlinks
##

IAcadSubEntSolidNode._methods_ = [
]
################################################################
## code template for IAcadSubEntSolidNode implementation
##class IAcadSubEntSolidNode_Impl(object):

class IAcadSubDMesh(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{8EE515A4-0D87-44EF-B2B5-43FCA3CF4036}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadSubDMesh._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Smoothness',
              ( ['out', 'retval'], POINTER(c_int), 'level' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'Smoothness',
              ( ['in'], c_int, 'level' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'Coordinates',
              ( ['out', 'retval'], POINTER(VARIANT), 'corners' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'Coordinates',
              ( ['in'], VARIANT, 'corners' )),
    COMMETHOD([dispid(4), 'nonbrowsable', 'propget'], HRESULT, 'Coordinate',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD([dispid(4), 'nonbrowsable', 'propput'], HRESULT, 'Coordinate',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], VARIANT, 'pVal' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'VertexCount',
              ( ['out', 'retval'], POINTER(c_int), 'Count' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'FaceCount',
              ( ['out', 'retval'], POINTER(c_int), 'Count' )),
]
################################################################
## code template for IAcadSubDMesh implementation
##class IAcadSubDMesh_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return level
##    def _set(self, level):
##        '-no docstring-'
##    Smoothness = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return corners
##    def _set(self, corners):
##        '-no docstring-'
##    Coordinates = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        '-no docstring-'
##        #return pVal
##    def _set(self, Index, pVal):
##        '-no docstring-'
##    Coordinate = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def VertexCount(self):
##        '-no docstring-'
##        #return Count
##
##    @property
##    def FaceCount(self):
##        '-no docstring-'
##        #return Count
##

class AcadMLeaderLeader(CoClass):
    _reg_clsid_ = GUID('{BD5DFA9B-BCE7-4E0D-9579-3618C7FC65E0}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
class IAcadMLeaderLeader(IAcadSubEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{DAC62A05-1BEE-4657-A680-36656D05085F}')
    _idlflags_ = ['dual', 'oleautomation']
AcadMLeaderLeader._com_interfaces_ = [IAcadMLeaderLeader]
AcadMLeaderLeader._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadSubEntSolidEdge(CoClass):
    _reg_clsid_ = GUID('{AF487F16-02BD-45E0-A244-0E83B0448E79}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
class IAcadSubEntSolidEdge(IAcadSubEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{EE01F2AA-D74A-4068-A75B-123AA700C7B3}')
    _idlflags_ = ['dual', 'oleautomation']
AcadSubEntSolidEdge._com_interfaces_ = [IAcadSubEntSolidEdge]

class AcadMLeaderStyle(CoClass):
    _reg_clsid_ = GUID('{E80BBC1D-7395-4EBE-9F89-29643B7D3FB6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
class IAcadMLeaderStyle(IAcadObject):
    _case_insensitive_ = True
    _iid_ = GUID('{A5B4B399-D188-4188-AF2E-DDF31A283194}')
    _idlflags_ = ['dual', 'oleautomation']
AcadMLeaderStyle._com_interfaces_ = [IAcadMLeaderStyle]
AcadMLeaderStyle._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadHelix(CoClass):
    _reg_clsid_ = GUID('{26EC3A1A-BDDF-4DE1-9648-B3C6E2BA86F0}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
class IAcadHelix(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{8A6EA1DF-E1EB-42AA-86D2-39D5120B7211}')
    _idlflags_ = ['dual', 'oleautomation']
AcadHelix._com_interfaces_ = [IAcadHelix]
AcadHelix._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadMLeader(CoClass):
    _reg_clsid_ = GUID('{7A51AB44-BBB1-406F-BA70-CEF36C0370B7}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadMLeader._com_interfaces_ = [IAcadMLeader]
AcadMLeader._outgoing_interfaces_ = [IAcadObjectEvents]

class IAcadSubDMeshFace(IAcadSubEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{D4488BA6-E63D-4E1C-9B1A-351C90C3E120}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadSubDMeshFace._methods_ = [
    COMMETHOD([dispid(1399), 'propget'], HRESULT, 'Material',
              ( ['out', 'retval'], POINTER(BSTR), 'Material' )),
    COMMETHOD([dispid(1399), 'propput'], HRESULT, 'Material',
              ( ['in'], BSTR, 'Material' )),
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'CreaseType',
              ( ['out', 'retval'], POINTER(AcMeshCreaseType), 'Type' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'CreaseType',
              ( ['in'], AcMeshCreaseType, 'Type' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'CreaseLevel',
              ( ['out', 'retval'], POINTER(c_double), 'level' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'CreaseLevel',
              ( ['in'], c_double, 'level' )),
]
################################################################
## code template for IAcadSubDMeshFace implementation
##class IAcadSubDMeshFace_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Material
##    def _set(self, Material):
##        '-no docstring-'
##    Material = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    CreaseType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return level
##    def _set(self, level):
##        '-no docstring-'
##    CreaseLevel = property(_get, _set, doc = _set.__doc__)
##

class AcadSubEntSolidVertex(CoClass):
    _reg_clsid_ = GUID('{43CBC6C0-702E-4022-8F76-EEF4750B1640}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
class IAcadSubEntSolidVertex(IAcadSubEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{B5BBF9ED-0FFB-4FF2-94C6-F2592D3259FF}')
    _idlflags_ = ['dual', 'oleautomation']
AcadSubEntSolidVertex._com_interfaces_ = [IAcadSubEntSolidVertex]

class AcadLWPolyline(CoClass):
    _reg_clsid_ = GUID('{9199C360-BA0B-4D0C-9AB7-9AF0CE299F5E}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadLWPolyline._com_interfaces_ = [IAcadLWPolyline]
AcadLWPolyline._outgoing_interfaces_ = [IAcadObjectEvents]


# values for enumeration 'AcEntityName'
ac3dFace = 1
ac3dPolyline = 2
ac3dSolid = 3
acArc = 4
acAttribute = 5
acAttributeReference = 6
acBlockReference = 7
acCircle = 8
acDimAligned = 9
acDimAngular = 10
acDimDiametric = 12
acDimOrdinate = 13
acDimRadial = 14
acDimRotated = 15
acEllipse = 16
acHatch = 17
acLeader = 18
acLine = 19
acMtext = 21
acPoint = 22
acPolyline = 23
acPolylineLight = 24
acPolymesh = 25
acRaster = 26
acRay = 27
acRegion = 28
acShape = 29
acSolid = 30
acSpline = 31
acText = 32
acTolerance = 33
acTrace = 34
acPViewport = 35
acXline = 36
acGroup = 37
acMInsertBlock = 38
acPolyfaceMesh = 39
acMLine = 40
acDim3PointAngular = 41
acExternalReference = 42
acTable = 43
acDimArcLength = 44
acDimRadialLarge = 45
acDwfUnderlay = 46
acDgnUnderlay = 47
acMLeader = 48
acSubDMesh = 49
acPdfUnderlay = 50
acNurbSurface = 51
AcEntityName = c_int # enum
class AcadLine(CoClass):
    _reg_clsid_ = GUID('{AA08BC6E-B516-4704-B56F-8261A794128F}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadLine._com_interfaces_ = [IAcadLine]
AcadLine._outgoing_interfaces_ = [IAcadObjectEvents]


# values for enumeration 'AcActiveSpace'
acPaperSpace = 0
acModelSpace = 1
AcActiveSpace = c_int # enum
class Library(object):
    name = 'AXDBLib'
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)

class AcadMText(CoClass):
    _reg_clsid_ = GUID('{2DD08AFC-2DB2-4646-A923-46CD0C3CC9F9}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadMText._com_interfaces_ = [IAcadMText]
AcadMText._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadSubEntSolidNode(CoClass):
    _reg_clsid_ = GUID('{D3D356F4-CD96-4D9F-A255-90554E720DA7}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadSubEntSolidNode._com_interfaces_ = [IAcadSubEntSolidNode]

class AcadPoint(CoClass):
    _reg_clsid_ = GUID('{C185DBA6-E853-409A-A312-FD4F14814730}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadPoint._com_interfaces_ = [IAcadPoint]
AcadPoint._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadHyperlinks(CoClass):
    _reg_clsid_ = GUID('{4B22D397-B540-4D6B-BF3E-044CDB8EE324}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadHyperlinks._com_interfaces_ = [IAcadHyperlinks]

class IAcadSurface(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{BBEB37A7-4071-4F6D-8DF1-2D336BE02B78}')
    _idlflags_ = ['dual', 'oleautomation']
class IAcadPlaneSurface(IAcadSurface):
    _case_insensitive_ = True
    _iid_ = GUID('{0F00ADBF-34B0-4496-AA9B-575E318C70F8}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadSurface._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'SurfaceType',
              ( ['out', 'retval'], POINTER(BSTR), 'SurfaceType' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'UIsolineDensity',
              ( ['out', 'retval'], POINTER(c_int), 'density' )),
    COMMETHOD([dispid(10), 'propput'], HRESULT, 'UIsolineDensity',
              ( ['in'], c_int, 'density' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'VIsolineDensity',
              ( ['out', 'retval'], POINTER(c_int), 'density' )),
    COMMETHOD([dispid(11), 'propput'], HRESULT, 'VIsolineDensity',
              ( ['in'], c_int, 'density' )),
    COMMETHOD([dispid(160), 'propget'], HRESULT, 'WireframeType',
              ( ['out', 'retval'], POINTER(AcWireframeType), 'Type' )),
    COMMETHOD([dispid(160), 'propput'], HRESULT, 'WireframeType',
              ( ['in'], AcWireframeType, 'Type' )),
    COMMETHOD([dispid(176), 'propget'], HRESULT, 'MaintainAssociativity',
              ( ['out', 'retval'], POINTER(c_int), 'maintainAssoc' )),
    COMMETHOD([dispid(176), 'propput'], HRESULT, 'MaintainAssociativity',
              ( ['in'], c_int, 'maintainAssoc' )),
    COMMETHOD([dispid(177), 'propget'], HRESULT, 'ShowAssociativity',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bEnabled' )),
    COMMETHOD([dispid(177), 'propput'], HRESULT, 'ShowAssociativity',
              ( ['in'], VARIANT_BOOL, 'bEnabled' )),
    COMMETHOD([dispid(161), 'propget'], HRESULT, 'EdgeExtensionDistances',
              ( ['out', 'retval'], POINTER(VARIANT), 'extDistances' )),
    COMMETHOD([dispid(161), 'propput'], HRESULT, 'EdgeExtensionDistances',
              ( ['in'], VARIANT, 'extDistances' )),
    COMMETHOD([dispid(193), 'propget'], HRESULT, 'SurfTrimAssociativity',
              ( ['out', 'retval'], POINTER(VARIANT), 'associative' )),
    COMMETHOD([dispid(193), 'propput'], HRESULT, 'SurfTrimAssociativity',
              ( ['in'], VARIANT, 'associative' )),
]
################################################################
## code template for IAcadSurface implementation
##class IAcadSurface_Impl(object):
##    @property
##    def SurfaceType(self):
##        '-no docstring-'
##        #return SurfaceType
##
##    def _get(self):
##        '-no docstring-'
##        #return density
##    def _set(self, density):
##        '-no docstring-'
##    UIsolineDensity = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return density
##    def _set(self, density):
##        '-no docstring-'
##    VIsolineDensity = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    WireframeType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return maintainAssoc
##    def _set(self, maintainAssoc):
##        '-no docstring-'
##    MaintainAssociativity = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bEnabled
##    def _set(self, bEnabled):
##        '-no docstring-'
##    ShowAssociativity = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return extDistances
##    def _set(self, extDistances):
##        '-no docstring-'
##    EdgeExtensionDistances = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return associative
##    def _set(self, associative):
##        '-no docstring-'
##    SurfTrimAssociativity = property(_get, _set, doc = _set.__doc__)
##

IAcadPlaneSurface._methods_ = [
]
################################################################
## code template for IAcadPlaneSurface implementation
##class IAcadPlaneSurface_Impl(object):

class AcadPolyline(CoClass):
    _reg_clsid_ = GUID('{A3DFA5C1-CD6F-4B7D-AB38-CCFF8C1F8EF3}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadPolyline._com_interfaces_ = [IAcadPolyline]
AcadPolyline._outgoing_interfaces_ = [IAcadObjectEvents]

class IAcadUnderlay(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{4F2C3F79-17FF-4C53-9B74-A257D4BE4E68}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadUnderlay._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Contrast',
              ( ['out', 'retval'], POINTER(c_int), 'Contrast' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'Contrast',
              ( ['in'], c_int, 'Contrast' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'Fade',
              ( ['out', 'retval'], POINTER(c_int), 'Fade' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'Fade',
              ( ['in'], c_int, 'Fade' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(VARIANT), 'pos' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'Position',
              ( ['in'], VARIANT, 'pos' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'Rotation',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'rotAngle' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'Rotation',
              ( ['in'], ACAD_ANGLE, 'rotAngle' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(c_double), 'Width' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'Width',
              ( ['in'], c_double, 'Width' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'Height',
              ( ['out', 'retval'], POINTER(c_double), 'Height' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'Height',
              ( ['in'], c_double, 'Height' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'UnderlayName',
              ( ['out', 'retval'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'UnderlayName',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([dispid(8), 'propput'], HRESULT, 'ItemName',
              ( ['in'], BSTR, 'sheetName' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'ItemName',
              ( ['out', 'retval'], POINTER(BSTR), 'sheetName' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'Monochrome',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bMono' )),
    COMMETHOD([dispid(10), 'propput'], HRESULT, 'Monochrome',
              ( ['in'], VARIANT_BOOL, 'bMono' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'AdjustForBackground',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'Value' )),
    COMMETHOD([dispid(15), 'propput'], HRESULT, 'AdjustForBackground',
              ( ['in'], VARIANT_BOOL, 'Value' )),
    COMMETHOD([dispid(11)], HRESULT, 'ClipBoundary',
              ( ['in'], VARIANT, 'boundry' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'ScaleFactor',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'ScaleFactor' )),
    COMMETHOD([dispid(12), 'propput'], HRESULT, 'ScaleFactor',
              ( ['in'], ACAD_NOUNITS, 'ScaleFactor' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'File',
              ( ['out', 'retval'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(13), 'propput'], HRESULT, 'File',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'UnderlayVisibility',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'fVisible' )),
    COMMETHOD([dispid(14), 'propput'], HRESULT, 'UnderlayVisibility',
              ( ['in'], VARIANT_BOOL, 'fVisible' )),
    COMMETHOD([dispid(16), 'propget'], HRESULT, 'ClippingEnabled',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'kClip' )),
    COMMETHOD([dispid(16), 'propput'], HRESULT, 'ClippingEnabled',
              ( ['in'], VARIANT_BOOL, 'kClip' )),
    COMMETHOD([dispid(17), 'propget'], HRESULT, 'UnderlayLayerOverrideApplied',
              ( ['out', 'retval'], POINTER(AcUnderlayLayerOverrideType), 'bOverride' )),
    COMMETHOD([dispid(17), 'propput'], HRESULT, 'UnderlayLayerOverrideApplied',
              ( ['in'], AcUnderlayLayerOverrideType, 'bOverride' )),
]
################################################################
## code template for IAcadUnderlay implementation
##class IAcadUnderlay_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Contrast
##    def _set(self, Contrast):
##        '-no docstring-'
##    Contrast = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Fade
##    def _set(self, Fade):
##        '-no docstring-'
##    Fade = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pos
##    def _set(self, pos):
##        '-no docstring-'
##    Position = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return rotAngle
##    def _set(self, rotAngle):
##        '-no docstring-'
##    Rotation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Width
##    def _set(self, Width):
##        '-no docstring-'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Height
##    def _set(self, Height):
##        '-no docstring-'
##    Height = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Name
##    def _set(self, Name):
##        '-no docstring-'
##    UnderlayName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return sheetName
##    def _set(self, sheetName):
##        '-no docstring-'
##    ItemName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bMono
##    def _set(self, bMono):
##        '-no docstring-'
##    Monochrome = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    AdjustForBackground = property(_get, _set, doc = _set.__doc__)
##
##    def ClipBoundary(self, boundry):
##        '-no docstring-'
##        #return 
##
##    def _get(self):
##        '-no docstring-'
##        #return ScaleFactor
##    def _set(self, ScaleFactor):
##        '-no docstring-'
##    ScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Name
##    def _set(self, Name):
##        '-no docstring-'
##    File = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return fVisible
##    def _set(self, fVisible):
##        '-no docstring-'
##    UnderlayVisibility = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return kClip
##    def _set(self, kClip):
##        '-no docstring-'
##    ClippingEnabled = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bOverride
##    def _set(self, bOverride):
##        '-no docstring-'
##    UnderlayLayerOverrideApplied = property(_get, _set, doc = _set.__doc__)
##

class AcadLoftedSurface(CoClass):
    _reg_clsid_ = GUID('{4799F75F-57B5-4004-8317-CBD0757D63C3}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
class IAcadLoftedSurface(IAcadSurface):
    _case_insensitive_ = True
    _iid_ = GUID('{5BB2F1A7-B297-4377-8511-4E7AE8F4D629}')
    _idlflags_ = ['dual', 'oleautomation']
AcadLoftedSurface._com_interfaces_ = [IAcadLoftedSurface]
AcadLoftedSurface._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadDictionary(CoClass):
    _reg_clsid_ = GUID('{D25257CA-EC8B-493D-A171-B9B53B8142C0}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadDictionary._com_interfaces_ = [IAcadDictionary]
AcadDictionary._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadWipeout(CoClass):
    _reg_clsid_ = GUID('{2968CFC1-5B62-4647-88E7-9752FC0D5704}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadWipeout._com_interfaces_ = [IAcadWipeout]

class AcadPolygonMesh(CoClass):
    _reg_clsid_ = GUID('{7A16067D-EE4F-4894-8816-F3B7AD222662}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadPolygonMesh._com_interfaces_ = [IAcadPolygonMesh]
AcadPolygonMesh._outgoing_interfaces_ = [IAcadObjectEvents]


# values for enumeration 'AcDataLinkUpdateDirection'
acUpdateDataFromSource = 1
acUpdateSourceFromData = 2
AcDataLinkUpdateDirection = c_int # enum
class AcadLayers(CoClass):
    _reg_clsid_ = GUID('{E6BD9695-F7CD-4643-B4C4-6E8B03676122}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadLayers._com_interfaces_ = [IAcadLayers]
AcadLayers._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadRay(CoClass):
    _reg_clsid_ = GUID('{A7782804-A60A-43FC-BEB8-A45F3A79D98E}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadRay._com_interfaces_ = [IAcadRay]
AcadRay._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadSubDMesh(CoClass):
    _reg_clsid_ = GUID('{856CAA91-0EE9-48E6-87F1-D820CD4FF981}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadSubDMesh._com_interfaces_ = [IAcadSubDMesh]
AcadSubDMesh._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadDimStyles(CoClass):
    _reg_clsid_ = GUID('{1BCDBFD2-B949-499E-A3A9-939FD84AB46C}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadDimStyles._com_interfaces_ = [IAcadDimStyles]
AcadDimStyles._outgoing_interfaces_ = [IAcadObjectEvents]


# values for enumeration 'AcDataLinkUpdateOption'
acUpdateOptionNone = 0
acUpdateOptionOverwriteContentModifiedAfterUpdate = 131072
acUpdateOptionOverwriteFormatModifiedAfterUpdate = 262144
acUpdateOptionUpdateFullSourceRange = 524288
acUpdateOptionIncludeXrefs = 1048576
AcDataLinkUpdateOption = c_int # enum
class AcadShape(CoClass):
    _reg_clsid_ = GUID('{4A536FCB-FAEC-4374-846F-AA51F4415C8C}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadShape._com_interfaces_ = [IAcadShape]
AcadShape._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadDictionaries(CoClass):
    _reg_clsid_ = GUID('{ABDEEF4C-8071-4B46-B86D-FE76E9D9D643}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadDictionaries._com_interfaces_ = [IAcadDictionaries]
AcadDictionaries._outgoing_interfaces_ = [IAcadObjectEvents]

IAcadPointCloud._methods_ = [
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'UseEntityColor',
              ( ['out', 'retval'], POINTER(AcPointCloudColorType), 'val' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'UseEntityColor',
              ( ['in'], AcPointCloudColorType, 'val' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'ShowIntensity',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'val' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'ShowIntensity',
              ( ['in'], VARIANT_BOOL, 'val' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'IntensityColorScheme',
              ( ['out', 'retval'], POINTER(AcPointCloudIntensityStyle), 'val' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'IntensityColorScheme',
              ( ['in'], AcPointCloudIntensityStyle, 'val' )),
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'InsertionPoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'EndPoint' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'InsertionPoint',
              ( ['in'], VARIANT, 'EndPoint' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'Rotation',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'val' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'Rotation',
              ( ['in'], ACAD_ANGLE, 'val' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(ACAD_DISTANCE), 'val' )),
    COMMETHOD([dispid(8), 'propput'], HRESULT, 'Width',
              ( ['in'], ACAD_DISTANCE, 'val' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'Length',
              ( ['out', 'retval'], POINTER(ACAD_DISTANCE), 'val' )),
    COMMETHOD([dispid(9), 'propput'], HRESULT, 'Length',
              ( ['in'], ACAD_DISTANCE, 'val' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'Height',
              ( ['out', 'retval'], POINTER(ACAD_DISTANCE), 'val' )),
    COMMETHOD([dispid(10), 'propput'], HRESULT, 'Height',
              ( ['in'], ACAD_DISTANCE, 'val' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'scale',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'val' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'scale',
              ( ['in'], ACAD_NOUNITS, 'val' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'val' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'val' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'ShowClipped',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'val' )),
    COMMETHOD([dispid(13), 'propput'], HRESULT, 'ShowClipped',
              ( ['in'], VARIANT_BOOL, 'val' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'Locked',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'val' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'Locked',
              ( ['in'], VARIANT_BOOL, 'val' )),
    COMMETHOD([dispid(16), 'propget'], HRESULT, 'Stylization',
              ( ['out', 'retval'], POINTER(AcPointCloudStylizationType), 'val' )),
    COMMETHOD([dispid(16), 'propput'], HRESULT, 'Stylization',
              ( ['in'], AcPointCloudStylizationType, 'val' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'Unit',
              ( ['out', 'retval'], POINTER(BSTR), 'val' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'UnitFactor',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'val' )),
]
################################################################
## code template for IAcadPointCloud implementation
##class IAcadPointCloud_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return val
##    def _set(self, val):
##        '-no docstring-'
##    UseEntityColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return val
##    def _set(self, val):
##        '-no docstring-'
##    ShowIntensity = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return val
##    def _set(self, val):
##        '-no docstring-'
##    IntensityColorScheme = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return EndPoint
##    def _set(self, EndPoint):
##        '-no docstring-'
##    InsertionPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return val
##    def _set(self, val):
##        '-no docstring-'
##    Rotation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return val
##    def _set(self, val):
##        '-no docstring-'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return val
##    def _set(self, val):
##        '-no docstring-'
##    Length = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return val
##    def _set(self, val):
##        '-no docstring-'
##    Height = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return val
##    def _set(self, val):
##        '-no docstring-'
##    scale = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        '-no docstring-'
##        #return val
##
##    @property
##    def Path(self):
##        '-no docstring-'
##        #return val
##
##    def _get(self):
##        '-no docstring-'
##        #return val
##    def _set(self, val):
##        '-no docstring-'
##    ShowClipped = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return val
##    def _set(self, val):
##        '-no docstring-'
##    Locked = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return val
##    def _set(self, val):
##        '-no docstring-'
##    Stylization = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Unit(self):
##        '-no docstring-'
##        #return val
##
##    @property
##    def UnitFactor(self):
##        '-no docstring-'
##        #return val
##

class AcadGeoPositionMarker(CoClass):
    _reg_clsid_ = GUID('{9CF9E023-BAA7-431C-B6D9-3DE6CFBC13AA}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
class IAcadGeoPositionMarker(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{A4F2B433-5834-47FC-9779-78705B0D61DC}')
    _idlflags_ = ['dual', 'oleautomation']
AcadGeoPositionMarker._com_interfaces_ = [IAcadGeoPositionMarker]
AcadGeoPositionMarker._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadSolid(CoClass):
    _reg_clsid_ = GUID('{8AE6CDBF-0937-4220-A578-572AF16A7489}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadSolid._com_interfaces_ = [IAcadSolid]
AcadSolid._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadLineTypes(CoClass):
    _reg_clsid_ = GUID('{36C42ADD-D37B-4F18-A62F-4E57F89F2945}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadLineTypes._com_interfaces_ = [IAcadLineTypes]
AcadLineTypes._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadSpline(CoClass):
    _reg_clsid_ = GUID('{6FE64BEC-800C-4E24-8EBF-3408BFFB71ED}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadSpline._com_interfaces_ = [IAcadSpline]
AcadSpline._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadMaterials(CoClass):
    _reg_clsid_ = GUID('{C18BE1F3-E54F-4AD4-898E-5FB917D56FD6}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadMaterials._com_interfaces_ = [IAcadMaterials]
AcadMaterials._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadSection(CoClass):
    _reg_clsid_ = GUID('{BCA3382C-271F-4A76-82FF-0936AF825DA5}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
class IAcadSection2(IAcadSection):
    _case_insensitive_ = True
    _iid_ = GUID('{8757213F-09EA-4B9C-B5D1-ACBFC49EF03C}')
    _idlflags_ = ['dual', 'oleautomation']
AcadSection._com_interfaces_ = [IAcadSection2]
AcadSection._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadText(CoClass):
    _reg_clsid_ = GUID('{E2C265C0-204D-415F-8AEC-544BE8AF68FF}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadText._com_interfaces_ = [IAcadText]
AcadText._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadTextStyles(CoClass):
    _reg_clsid_ = GUID('{1AD82D0B-BA64-4C43-AC44-AB3ABE17F7E0}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadTextStyles._com_interfaces_ = [IAcadTextStyles]
AcadTextStyles._outgoing_interfaces_ = [IAcadObjectEvents]

class IAcadDwfUnderlay(IAcadUnderlay):
    _case_insensitive_ = True
    _iid_ = GUID('{52E370FF-7ADA-45D9-9F0A-C5735C764192}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadDwfUnderlay._methods_ = [
    COMMETHOD([dispid(18), 'propget'], HRESULT, 'DWFFormat',
              ( ['out', 'retval'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(18), 'propput'], HRESULT, 'DWFFormat',
              ( ['in'], BSTR, 'Name' )),
]
################################################################
## code template for IAcadDwfUnderlay implementation
##class IAcadDwfUnderlay_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Name
##    def _set(self, Name):
##        '-no docstring-'
##    DWFFormat = property(_get, _set, doc = _set.__doc__)
##

class AcadTolerance(CoClass):
    _reg_clsid_ = GUID('{A0FED68F-514A-4869-9F8A-F93D6033A49C}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadTolerance._com_interfaces_ = [IAcadTolerance]
AcadTolerance._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadSectionManager(CoClass):
    _reg_clsid_ = GUID('{220186B6-5FBA-4F2D-BF5A-370890725B73}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadSectionManager._com_interfaces_ = [IAcadSectionManager]
AcadSectionManager._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadUCSs(CoClass):
    _reg_clsid_ = GUID('{E4B59728-2B82-4B0B-9608-12D175951A84}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadUCSs._com_interfaces_ = [IAcadUCSs]
AcadUCSs._outgoing_interfaces_ = [IAcadObjectEvents]

class IAcadSubDMeshEdge(IAcadSubEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{8435030D-AD4A-4D6B-A13F-914B99BDBB4A}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadSubDMeshEdge._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'CreaseType',
              ( ['out', 'retval'], POINTER(AcMeshCreaseType), 'Type' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'CreaseType',
              ( ['in'], AcMeshCreaseType, 'Type' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'CreaseLevel',
              ( ['out', 'retval'], POINTER(c_double), 'level' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'CreaseLevel',
              ( ['in'], c_double, 'level' )),
]
################################################################
## code template for IAcadSubDMeshEdge implementation
##class IAcadSubDMeshEdge_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    CreaseType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return level
##    def _set(self, level):
##        '-no docstring-'
##    CreaseLevel = property(_get, _set, doc = _set.__doc__)
##

class AcadTrace(CoClass):
    _reg_clsid_ = GUID('{37B679E0-C47E-464C-94F6-E119736B4CAA}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadTrace._com_interfaces_ = [IAcadTrace]
AcadTrace._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadRegisteredApplications(CoClass):
    _reg_clsid_ = GUID('{58B7D405-BBE4-458D-AA3E-1D43D89DEF15}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadRegisteredApplications._com_interfaces_ = [IAcadRegisteredApplications]
AcadRegisteredApplications._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadSurface(CoClass):
    _reg_clsid_ = GUID('{30C97AE4-20CD-4881-BA17-CA4BEB498EB4}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadSurface._com_interfaces_ = [IAcadSurface]
AcadSurface._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadXline(CoClass):
    _reg_clsid_ = GUID('{8E37D60E-D340-45E6-80C9-B9EF25BF3D93}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadXline._com_interfaces_ = [IAcadXline]
AcadXline._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadSubDMeshFace(CoClass):
    _reg_clsid_ = GUID('{531A2A4D-0858-4C9D-9304-99B3E0BEDDB6}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadSubDMeshFace._com_interfaces_ = [IAcadSubDMeshFace]
AcadSubDMeshFace._outgoing_interfaces_ = [IAcadObjectEvents]

IAcadArc._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'StartPoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'StartPoint' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'Center',
              ( ['out', 'retval'], POINTER(VARIANT), 'CenterPoint' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'Center',
              ( ['in'], VARIANT, 'CenterPoint' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'EndPoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'EndPoint' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'Radius',
              ( ['out', 'retval'], POINTER(c_double), 'Radius' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'Radius',
              ( ['in'], c_double, 'Radius' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'StartAngle',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'Angle' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'StartAngle',
              ( ['in'], ACAD_ANGLE, 'Angle' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'EndAngle',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'Angle' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'EndAngle',
              ( ['in'], ACAD_ANGLE, 'Angle' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'TotalAngle',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'TotalAngle' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'ArcLength',
              ( ['out', 'retval'], POINTER(ACAD_DISTANCE), 'ArcLength' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'Thickness',
              ( ['out', 'retval'], POINTER(c_double), 'Thickness' )),
    COMMETHOD([dispid(9), 'propput'], HRESULT, 'Thickness',
              ( ['in'], c_double, 'Thickness' )),
    COMMETHOD([dispid(10)], HRESULT, 'Offset',
              ( ['in'], c_double, 'Distance' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'pOffsetCurves' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'Area',
              ( ['out', 'retval'], POINTER(c_double), 'Area' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'Normal',
              ( ['out', 'retval'], POINTER(VARIANT), 'Normal' )),
    COMMETHOD([dispid(12), 'propput'], HRESULT, 'Normal',
              ( ['in'], VARIANT, 'Normal' )),
]
################################################################
## code template for IAcadArc implementation
##class IAcadArc_Impl(object):
##    @property
##    def StartPoint(self):
##        '-no docstring-'
##        #return StartPoint
##
##    def _get(self):
##        '-no docstring-'
##        #return CenterPoint
##    def _set(self, CenterPoint):
##        '-no docstring-'
##    Center = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def EndPoint(self):
##        '-no docstring-'
##        #return EndPoint
##
##    def _get(self):
##        '-no docstring-'
##        #return Radius
##    def _set(self, Radius):
##        '-no docstring-'
##    Radius = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Angle
##    def _set(self, Angle):
##        '-no docstring-'
##    StartAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Angle
##    def _set(self, Angle):
##        '-no docstring-'
##    EndAngle = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def TotalAngle(self):
##        '-no docstring-'
##        #return TotalAngle
##
##    @property
##    def ArcLength(self):
##        '-no docstring-'
##        #return ArcLength
##
##    def _get(self):
##        '-no docstring-'
##        #return Thickness
##    def _set(self, Thickness):
##        '-no docstring-'
##    Thickness = property(_get, _set, doc = _set.__doc__)
##
##    def Offset(self, Distance):
##        '-no docstring-'
##        #return pOffsetCurves
##
##    @property
##    def Area(self):
##        '-no docstring-'
##        #return Area
##
##    def _get(self):
##        '-no docstring-'
##        #return Normal
##    def _set(self, Normal):
##        '-no docstring-'
##    Normal = property(_get, _set, doc = _set.__doc__)
##

class AcadViews(CoClass):
    _reg_clsid_ = GUID('{7C3B67FF-4204-428F-8F59-77823975222F}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadViews._com_interfaces_ = [IAcadViews]
AcadViews._outgoing_interfaces_ = [IAcadObjectEvents]

class IAcadExtrudedSurface(IAcadSurface):
    _case_insensitive_ = True
    _iid_ = GUID('{9E0BBACC-5F0E-43DB-BD53-8B4249CF46A7}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadExtrudedSurface._methods_ = [
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'Height',
              ( ['out', 'retval'], POINTER(c_double), 'Height' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'Height',
              ( ['in'], c_double, 'Height' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'TaperAngle',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'TaperAngle' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'TaperAngle',
              ( ['in'], ACAD_ANGLE, 'TaperAngle' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'Direction',
              ( ['out', 'retval'], POINTER(VARIANT), 'Direction' )),
]
################################################################
## code template for IAcadExtrudedSurface implementation
##class IAcadExtrudedSurface_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Height
##    def _set(self, Height):
##        '-no docstring-'
##    Height = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return TaperAngle
##    def _set(self, TaperAngle):
##        '-no docstring-'
##    TaperAngle = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Direction(self):
##        '-no docstring-'
##        #return Direction
##

class AcadPViewport(CoClass):
    _reg_clsid_ = GUID('{3FAFEB42-A801-4DB0-A1F3-89C44C7D77C0}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadPViewport._com_interfaces_ = [IAcadPViewport]
AcadPViewport._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadViewports(CoClass):
    _reg_clsid_ = GUID('{905CBCFD-DAD5-4257-B5D9-C5126821BDF0}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadViewports._com_interfaces_ = [IAcadViewports]
AcadViewports._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadGeomapImage(CoClass):
    _reg_clsid_ = GUID('{8BECB042-FE26-4817-A635-0D18AA194CC1}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
class IAcadGeomapImage(IAcadRasterImage):
    _case_insensitive_ = True
    _iid_ = GUID('{54082701-2EE0-41ED-B64F-D5FECE70AEFA}')
    _idlflags_ = ['dual', 'oleautomation']
AcadGeomapImage._com_interfaces_ = [IAcadGeomapImage]

class AcadAttributeReference(CoClass):
    _reg_clsid_ = GUID('{C787FBDD-86D8-4705-A0AE-8BF7B9797B06}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
class IAcadAttributeReference(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{714D4899-2C8D-479E-8480-277F7C7336C8}')
    _idlflags_ = ['dual', 'oleautomation']
AcadAttributeReference._com_interfaces_ = [IAcadAttributeReference]
AcadAttributeReference._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadMInsertBlock(CoClass):
    _reg_clsid_ = GUID('{0CAFAD60-1D6F-40B3-9609-D96C85F2755C}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadMInsertBlock._com_interfaces_ = [IAcadMInsertBlock]
AcadMInsertBlock._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadPlaneSurface(CoClass):
    _reg_clsid_ = GUID('{F7C80149-5703-4E2E-9775-43C52295636A}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadPlaneSurface._com_interfaces_ = [IAcadPlaneSurface]
AcadPlaneSurface._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadGroups(CoClass):
    _reg_clsid_ = GUID('{803CDB85-4A2C-41ED-851B-E7FEA5A60E57}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadGroups._com_interfaces_ = [IAcadGroups]
AcadGroups._outgoing_interfaces_ = [IAcadObjectEvents]

class IAcadRevolvedSurface(IAcadSurface):
    _case_insensitive_ = True
    _iid_ = GUID('{D74D9949-5371-4917-A567-C37FC9D46823}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadRevolvedSurface._methods_ = [
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'RevolutionAngle',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'revAngle' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'RevolutionAngle',
              ( ['in'], ACAD_ANGLE, 'revAngle' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'AxisPosition',
              ( ['out', 'retval'], POINTER(VARIANT), 'AxisPosition' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'AxisPosition',
              ( ['in'], VARIANT, 'AxisPosition' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'AxisDirection',
              ( ['out', 'retval'], POINTER(VARIANT), 'AxisDirection' )),
]
################################################################
## code template for IAcadRevolvedSurface implementation
##class IAcadRevolvedSurface_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return revAngle
##    def _set(self, revAngle):
##        '-no docstring-'
##    RevolutionAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return AxisPosition
##    def _set(self, AxisPosition):
##        '-no docstring-'
##    AxisPosition = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def AxisDirection(self):
##        '-no docstring-'
##        #return AxisDirection
##

class AcadPolyfaceMesh(CoClass):
    _reg_clsid_ = GUID('{062CB83B-E783-4B29-959E-7568325822AA}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadPolyfaceMesh._com_interfaces_ = [IAcadPolyfaceMesh]
AcadPolyfaceMesh._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadBlocks(CoClass):
    _reg_clsid_ = GUID('{464C3F7F-5C75-4132-90DB-A5D8AD502C36}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadBlocks._com_interfaces_ = [IAcadBlocks]
AcadBlocks._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadBlockReference(CoClass):
    _reg_clsid_ = GUID('{7E25E7AB-34AD-4809-AB13-2EF5D147ACF5}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadBlockReference._com_interfaces_ = [IAcadBlockReference]
AcadBlockReference._outgoing_interfaces_ = [IAcadObjectEvents]

class IAcadSubDMeshVertex(IAcadSubEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{D9804FE2-0804-4276-8DD8-BD0C81837271}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadSubDMeshVertex._methods_ = [
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'Coordinates',
              ( ['out', 'retval'], POINTER(VARIANT), 'coord' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'Coordinates',
              ( ['in'], VARIANT, 'coord' )),
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'CreaseType',
              ( ['out', 'retval'], POINTER(AcMeshCreaseType), 'Type' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'CreaseType',
              ( ['in'], AcMeshCreaseType, 'Type' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'CreaseLevel',
              ( ['out', 'retval'], POINTER(c_double), 'level' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'CreaseLevel',
              ( ['in'], c_double, 'level' )),
]
################################################################
## code template for IAcadSubDMeshVertex implementation
##class IAcadSubDMeshVertex_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return coord
##    def _set(self, coord):
##        '-no docstring-'
##    Coordinates = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    CreaseType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return level
##    def _set(self, level):
##        '-no docstring-'
##    CreaseLevel = property(_get, _set, doc = _set.__doc__)
##

class AcadMLine(CoClass):
    _reg_clsid_ = GUID('{F1CBC019-A066-4A29-9D3F-66BB3065D894}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadMLine._com_interfaces_ = [IAcadMLine]
AcadMLine._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadDimension(CoClass):
    _reg_clsid_ = GUID('{4396C90D-B7D7-4BEF-9211-4A15D28E3AC1}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadDimension._com_interfaces_ = [IAcadDimension]
AcadDimension._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadCircle(CoClass):
    _reg_clsid_ = GUID('{39377239-A97F-4C11-8852-7C8F78B2A6EA}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadCircle._com_interfaces_ = [IAcadCircle]
AcadCircle._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadLayouts(CoClass):
    _reg_clsid_ = GUID('{53AF1CBD-06D7-452C-BA1D-6F610855A136}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadLayouts._com_interfaces_ = [IAcadLayouts]
AcadLayouts._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadDimAligned(CoClass):
    _reg_clsid_ = GUID('{EE618583-D387-43AB-A892-BB8D53EE8419}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadDimAligned._com_interfaces_ = [IAcadDimAligned]
AcadDimAligned._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadExternalReference(CoClass):
    _reg_clsid_ = GUID('{BAB08DA6-BFCE-4BC2-8ACD-DDC243D61AE5}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadExternalReference._com_interfaces_ = [IAcadExternalReference]
AcadExternalReference._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadSubDMeshEdge(CoClass):
    _reg_clsid_ = GUID('{F47D13B6-D75A-4D10-8908-27C979AE26FA}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadSubDMeshEdge._com_interfaces_ = [IAcadSubDMeshEdge]
AcadSubDMeshEdge._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadEllipse(CoClass):
    _reg_clsid_ = GUID('{8866130D-9F22-4456-82B1-5EAD2C145F4E}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadEllipse._com_interfaces_ = [IAcadEllipse]
AcadEllipse._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadPlotConfigurations(CoClass):
    _reg_clsid_ = GUID('{8923CB2E-3389-4DDE-AC28-E96192F296FB}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadPlotConfigurations._com_interfaces_ = [IAcadPlotConfigurations]
AcadPlotConfigurations._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadDimAngular(CoClass):
    _reg_clsid_ = GUID('{B6A7FBC4-2FD3-486D-AF27-2320DAF6953B}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadDimAngular._com_interfaces_ = [IAcadDimAngular]
AcadDimAngular._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadHatch(CoClass):
    _reg_clsid_ = GUID('{FEF1A108-9FEA-4466-A852-7F20A55C2E91}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadHatch._com_interfaces_ = [IAcadHatch]
AcadHatch._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadEntity(CoClass):
    _reg_clsid_ = GUID('{841AAB90-A544-42D5-B2FA-FF85898B833F}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadEntity._com_interfaces_ = [IAcadEntity]
AcadEntity._outgoing_interfaces_ = [IAcadObjectEvents]

IAcadAttributeReference._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Height',
              ( ['out', 'retval'], POINTER(c_double), 'Height' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'Height',
              ( ['in'], c_double, 'Height' )),
    COMMETHOD([dispid(2), 'hidden', 'propget'], HRESULT, 'HorizontalAlignment',
              ( ['out', 'retval'], POINTER(AcHorizontalAlignment), 'horizAlign' )),
    COMMETHOD([dispid(2), 'hidden', 'propput'], HRESULT, 'HorizontalAlignment',
              ( ['in'], AcHorizontalAlignment, 'horizAlign' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'InsertionPoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'insPoint' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'InsertionPoint',
              ( ['in'], VARIANT, 'insPoint' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'Normal',
              ( ['out', 'retval'], POINTER(VARIANT), 'Normal' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'Normal',
              ( ['in'], VARIANT, 'Normal' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'ObliqueAngle',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'obliAngle' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'ObliqueAngle',
              ( ['in'], ACAD_ANGLE, 'obliAngle' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'Rotation',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'rotAngle' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'Rotation',
              ( ['in'], ACAD_ANGLE, 'rotAngle' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'ScaleFactor',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'scalFactor' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'ScaleFactor',
              ( ['in'], ACAD_NOUNITS, 'scalFactor' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'StyleName',
              ( ['out', 'retval'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(8), 'propput'], HRESULT, 'StyleName',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'TagString',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrTag' )),
    COMMETHOD([dispid(9), 'propput'], HRESULT, 'TagString',
              ( ['in'], BSTR, 'bstrTag' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'TextAlignmentPoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'alignPoint' )),
    COMMETHOD([dispid(10), 'propput'], HRESULT, 'TextAlignmentPoint',
              ( ['in'], VARIANT, 'alignPoint' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'TextGenerationFlag',
              ( ['out', 'retval'], POINTER(c_int), 'textGenFlag' )),
    COMMETHOD([dispid(11), 'propput'], HRESULT, 'TextGenerationFlag',
              ( ['in'], c_int, 'textGenFlag' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'TextString',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrText' )),
    COMMETHOD([dispid(12), 'propput'], HRESULT, 'TextString',
              ( ['in'], BSTR, 'bstrText' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'Thickness',
              ( ['out', 'retval'], POINTER(c_double), 'Thickness' )),
    COMMETHOD([dispid(13), 'propput'], HRESULT, 'Thickness',
              ( ['in'], c_double, 'Thickness' )),
    COMMETHOD([dispid(14), 'hidden', 'propget'], HRESULT, 'VerticalAlignment',
              ( ['out', 'retval'], POINTER(AcVerticalAlignment), 'vertiAlign' )),
    COMMETHOD([dispid(14), 'hidden', 'propput'], HRESULT, 'VerticalAlignment',
              ( ['in'], AcVerticalAlignment, 'vertiAlign' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'FieldLength',
              ( ['out', 'retval'], POINTER(c_int), 'fieldLen' )),
    COMMETHOD([dispid(15), 'propput'], HRESULT, 'FieldLength',
              ( ['in'], c_int, 'fieldLen' )),
    COMMETHOD([dispid(16), 'propget'], HRESULT, 'Alignment',
              ( ['out', 'retval'], POINTER(AcAlignment), 'align' )),
    COMMETHOD([dispid(16), 'propput'], HRESULT, 'Alignment',
              ( ['in'], AcAlignment, 'align' )),
    COMMETHOD([dispid(17), 'propget'], HRESULT, 'UpsideDown',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bUpsideDown' )),
    COMMETHOD([dispid(17), 'propput'], HRESULT, 'UpsideDown',
              ( ['in'], VARIANT_BOOL, 'bUpsideDown' )),
    COMMETHOD([dispid(18), 'propget'], HRESULT, 'Backward',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bBackward' )),
    COMMETHOD([dispid(18), 'propput'], HRESULT, 'Backward',
              ( ['in'], VARIANT_BOOL, 'bBackward' )),
    COMMETHOD([dispid(19), 'propget'], HRESULT, 'Invisible',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bInvisible' )),
    COMMETHOD([dispid(19), 'propput'], HRESULT, 'Invisible',
              ( ['in'], VARIANT_BOOL, 'bInvisible' )),
    COMMETHOD([dispid(20), 'propget'], HRESULT, 'Constant',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bConstant' )),
    COMMETHOD([dispid(25), 'propget'], HRESULT, 'LockPosition',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bLockPosition' )),
    COMMETHOD([dispid(26), 'propget'], HRESULT, 'MTextAttribute',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bMTextAttribute' )),
    COMMETHOD([dispid(26), 'propput'], HRESULT, 'MTextAttribute',
              ( ['in'], VARIANT_BOOL, 'bMTextAttribute' )),
    COMMETHOD([dispid(27), 'propget'], HRESULT, 'MTextAttributeContent',
              ( ['out', 'retval'], POINTER(BSTR), 'content' )),
    COMMETHOD([dispid(27), 'propput'], HRESULT, 'MTextAttributeContent',
              ( ['in'], BSTR, 'content' )),
    COMMETHOD([dispid(29)], HRESULT, 'UpdateMTextAttribute'),
    COMMETHOD([dispid(30), 'propget'], HRESULT, 'MTextBoundaryWidth',
              ( ['out', 'retval'], POINTER(c_double), 'boundaryWidth' )),
    COMMETHOD([dispid(30), 'propput'], HRESULT, 'MTextBoundaryWidth',
              ( [], c_double, 'boundaryWidth' )),
    COMMETHOD([dispid(31), 'propget'], HRESULT, 'MTextDrawingDirection',
              ( ['out', 'retval'], POINTER(AcDrawingDirection), 'drawDir' )),
    COMMETHOD([dispid(31), 'propput'], HRESULT, 'MTextDrawingDirection',
              ( ['in'], AcDrawingDirection, 'drawDir' )),
]
################################################################
## code template for IAcadAttributeReference implementation
##class IAcadAttributeReference_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Height
##    def _set(self, Height):
##        '-no docstring-'
##    Height = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return horizAlign
##    def _set(self, horizAlign):
##        '-no docstring-'
##    HorizontalAlignment = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return insPoint
##    def _set(self, insPoint):
##        '-no docstring-'
##    InsertionPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Normal
##    def _set(self, Normal):
##        '-no docstring-'
##    Normal = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return obliAngle
##    def _set(self, obliAngle):
##        '-no docstring-'
##    ObliqueAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return rotAngle
##    def _set(self, rotAngle):
##        '-no docstring-'
##    Rotation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return scalFactor
##    def _set(self, scalFactor):
##        '-no docstring-'
##    ScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Name
##    def _set(self, Name):
##        '-no docstring-'
##    StyleName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrTag
##    def _set(self, bstrTag):
##        '-no docstring-'
##    TagString = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return alignPoint
##    def _set(self, alignPoint):
##        '-no docstring-'
##    TextAlignmentPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return textGenFlag
##    def _set(self, textGenFlag):
##        '-no docstring-'
##    TextGenerationFlag = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrText
##    def _set(self, bstrText):
##        '-no docstring-'
##    TextString = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Thickness
##    def _set(self, Thickness):
##        '-no docstring-'
##    Thickness = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return vertiAlign
##    def _set(self, vertiAlign):
##        '-no docstring-'
##    VerticalAlignment = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return fieldLen
##    def _set(self, fieldLen):
##        '-no docstring-'
##    FieldLength = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return align
##    def _set(self, align):
##        '-no docstring-'
##    Alignment = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bUpsideDown
##    def _set(self, bUpsideDown):
##        '-no docstring-'
##    UpsideDown = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bBackward
##    def _set(self, bBackward):
##        '-no docstring-'
##    Backward = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bInvisible
##    def _set(self, bInvisible):
##        '-no docstring-'
##    Invisible = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Constant(self):
##        '-no docstring-'
##        #return bConstant
##
##    @property
##    def LockPosition(self):
##        '-no docstring-'
##        #return bLockPosition
##
##    def _get(self):
##        '-no docstring-'
##        #return bMTextAttribute
##    def _set(self, bMTextAttribute):
##        '-no docstring-'
##    MTextAttribute = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return content
##    def _set(self, content):
##        '-no docstring-'
##    MTextAttributeContent = property(_get, _set, doc = _set.__doc__)
##
##    def UpdateMTextAttribute(self):
##        '-no docstring-'
##        #return 
##
##    def _get(self):
##        '-no docstring-'
##        #return boundaryWidth
##    def _set(self, boundaryWidth):
##        '-no docstring-'
##    MTextBoundaryWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return drawDir
##    def _set(self, drawDir):
##        '-no docstring-'
##    MTextDrawingDirection = property(_get, _set, doc = _set.__doc__)
##

class AcadExtrudedSurface(CoClass):
    _reg_clsid_ = GUID('{C8C275A3-C162-4E62-ADB5-D0AB85039E9C}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadExtrudedSurface._com_interfaces_ = [IAcadExtrudedSurface]
AcadExtrudedSurface._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadDimDiametric(CoClass):
    _reg_clsid_ = GUID('{5E68F4DF-460C-4CBD-A6DF-E67478A0C8FA}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadDimDiametric._com_interfaces_ = [IAcadDimDiametric]
AcadDimDiametric._outgoing_interfaces_ = [IAcadObjectEvents]

IAcadMLeaderLeader._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'LeaderType',
              ( ['out', 'retval'], POINTER(AcMLeaderType), 'Type' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'LeaderType',
              ( ['in'], AcMLeaderType, 'Type' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'LeaderLineColor',
              ( ['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'Type' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'LeaderLineColor',
              ( ['in'], POINTER(IAcadAcCmColor), 'Type' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'LeaderLinetype',
              ( ['out', 'retval'], POINTER(ACAD_LTYPE), 'Linetype' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'LeaderLinetype',
              ( ['in'], ACAD_LTYPE, 'Linetype' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'LeaderLineWeight',
              ( ['out', 'retval'], POINTER(ACAD_LWEIGHT), 'Lineweight' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'LeaderLineWeight',
              ( ['in'], ACAD_LWEIGHT, 'Lineweight' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'ArrowheadType',
              ( ['out', 'retval'], POINTER(AcDimArrowheadType), 'BlockName' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'ArrowheadType',
              ( ['in'], AcDimArrowheadType, 'BlockName' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'ArrowheadSize',
              ( ['out', 'retval'], POINTER(c_double), 'size' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'ArrowheadSize',
              ( ['in'], c_double, 'size' )),
    COMMETHOD([dispid(7), 'nonbrowsable', 'propget'], HRESULT, 'ArrowheadBlock',
              ( ['out', 'retval'], POINTER(BSTR), 'BlockName' )),
    COMMETHOD([dispid(7), 'nonbrowsable', 'propput'], HRESULT, 'ArrowheadBlock',
              ( ['in'], BSTR, 'BlockName' )),
]
################################################################
## code template for IAcadMLeaderLeader implementation
##class IAcadMLeaderLeader_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    LeaderType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    LeaderLineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Linetype
##    def _set(self, Linetype):
##        '-no docstring-'
##    LeaderLinetype = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Lineweight
##    def _set(self, Lineweight):
##        '-no docstring-'
##    LeaderLineWeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return BlockName
##    def _set(self, BlockName):
##        '-no docstring-'
##    ArrowheadType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return size
##    def _set(self, size):
##        '-no docstring-'
##    ArrowheadSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return BlockName
##    def _set(self, BlockName):
##        '-no docstring-'
##    ArrowheadBlock = property(_get, _set, doc = _set.__doc__)
##

class AcadLeader(CoClass):
    _reg_clsid_ = GUID('{C7B713A8-343A-4638-8722-0E3BDD05A837}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadLeader._com_interfaces_ = [IAcadLeader]
AcadLeader._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadComparedReference(CoClass):
    _reg_clsid_ = GUID('{D7E311D5-E136-4565-9473-92E6A26E6ECF}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
class IAcadComparedReference(IAcadExternalReference):
    _case_insensitive_ = True
    _iid_ = GUID('{8F33F8AE-181D-4115-8156-97B671703BB3}')
    _idlflags_ = ['dual', 'oleautomation']
AcadComparedReference._com_interfaces_ = [IAcadComparedReference]
AcadComparedReference._outgoing_interfaces_ = [IAcadObjectEvents]

class IAcadSweptSurface(IAcadSurface):
    _case_insensitive_ = True
    _iid_ = GUID('{29CA4CE6-1957-481A-94FE-2016C8AE2EF2}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadSweptSurface._methods_ = [
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'ProfileRotation',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'profileRotationAngle' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'ProfileRotation',
              ( ['in'], ACAD_ANGLE, 'profileRotationAngle' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'Bank',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bBank' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'Bank',
              ( ['in'], VARIANT_BOOL, 'bBank' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'Twist',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'TwistAngle' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'Twist',
              ( ['in'], ACAD_ANGLE, 'TwistAngle' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'scale',
              ( ['out', 'retval'], POINTER(c_double), 'scale' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'scale',
              ( ['in'], c_double, 'scale' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'Length',
              ( ['out', 'retval'], POINTER(c_double), 'Length' )),
]
################################################################
## code template for IAcadSweptSurface implementation
##class IAcadSweptSurface_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return profileRotationAngle
##    def _set(self, profileRotationAngle):
##        '-no docstring-'
##    ProfileRotation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bBank
##    def _set(self, bBank):
##        '-no docstring-'
##    Bank = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return TwistAngle
##    def _set(self, TwistAngle):
##        '-no docstring-'
##    Twist = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return scale
##    def _set(self, scale):
##        '-no docstring-'
##    scale = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Length(self):
##        '-no docstring-'
##        #return Length
##

IAcadComparedReference._methods_ = [
]
################################################################
## code template for IAcadComparedReference implementation
##class IAcadComparedReference_Impl(object):

class IAcadNurbSurface(IAcadSurface):
    _case_insensitive_ = True
    _iid_ = GUID('{A0AFF54E-79D4-4B17-B739-864AE8CCB497}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadNurbSurface._methods_ = [
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'CvHullDisplay',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'Display' )),
    COMMETHOD([dispid(12), 'propput'], HRESULT, 'CvHullDisplay',
              ( ['in'], VARIANT_BOOL, 'Display' )),
]
################################################################
## code template for IAcadNurbSurface implementation
##class IAcadNurbSurface_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Display
##    def _set(self, Display):
##        '-no docstring-'
##    CvHullDisplay = property(_get, _set, doc = _set.__doc__)
##

class AcadTable(CoClass):
    _reg_clsid_ = GUID('{FE098961-A041-4F85-B9E8-9EC516D8CB75}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadTable._com_interfaces_ = [IAcadTable]
AcadTable._outgoing_interfaces_ = [IAcadObjectEvents]

IAcadHelix._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(VARIANT), 'StartPoint' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'Position',
              ( ['in'], VARIANT, 'StartPoint' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'Constrain',
              ( ['out', 'retval'], POINTER(AcHelixConstrainType), 'constrainType' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'Constrain',
              ( ['in'], AcHelixConstrainType, 'constrainType' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'Height',
              ( ['out', 'retval'], POINTER(c_double), 'Length' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'Height',
              ( ['in'], c_double, 'Length' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'Turns',
              ( ['out', 'retval'], POINTER(ACAD_NOUNITS), 'Turns' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'Turns',
              ( ['in'], ACAD_NOUNITS, 'Turns' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'TurnHeight',
              ( ['out', 'retval'], POINTER(c_double), 'Distance' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'TurnHeight',
              ( ['in'], c_double, 'Distance' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'BaseRadius',
              ( ['out', 'retval'], POINTER(c_double), 'Radius' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'BaseRadius',
              ( ['in'], c_double, 'Radius' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'TopRadius',
              ( ['out', 'retval'], POINTER(c_double), 'Radius' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'TopRadius',
              ( ['in'], c_double, 'Radius' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'Twist',
              ( ['out', 'retval'], POINTER(AcHelixTwistType), 'twistType' )),
    COMMETHOD([dispid(8), 'propput'], HRESULT, 'Twist',
              ( ['in'], AcHelixTwistType, 'twistType' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'TurnSlope',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'slopeAngle' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'TotalLength',
              ( ['out', 'retval'], POINTER(c_double), 'TotalLength' )),
]
################################################################
## code template for IAcadHelix implementation
##class IAcadHelix_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return StartPoint
##    def _set(self, StartPoint):
##        '-no docstring-'
##    Position = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return constrainType
##    def _set(self, constrainType):
##        '-no docstring-'
##    Constrain = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Length
##    def _set(self, Length):
##        '-no docstring-'
##    Height = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Turns
##    def _set(self, Turns):
##        '-no docstring-'
##    Turns = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Distance
##    def _set(self, Distance):
##        '-no docstring-'
##    TurnHeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Radius
##    def _set(self, Radius):
##        '-no docstring-'
##    BaseRadius = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Radius
##    def _set(self, Radius):
##        '-no docstring-'
##    TopRadius = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return twistType
##    def _set(self, twistType):
##        '-no docstring-'
##    Twist = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def TurnSlope(self):
##        '-no docstring-'
##        #return slopeAngle
##
##    @property
##    def TotalLength(self):
##        '-no docstring-'
##        #return TotalLength
##

class AcadDimOrdinate(CoClass):
    _reg_clsid_ = GUID('{45B1BFBC-6991-40C6-889B-86520B3D81CC}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadDimOrdinate._com_interfaces_ = [IAcadDimOrdinate]
AcadDimOrdinate._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadDimRadial(CoClass):
    _reg_clsid_ = GUID('{84FF7C8C-A978-4947-9975-940F816C6415}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadDimRadial._com_interfaces_ = [IAcadDimRadial]
AcadDimRadial._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadSubDMeshVertex(CoClass):
    _reg_clsid_ = GUID('{DB7C5F97-E520-4AA0-A16E-B068BC778ACB}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadSubDMeshVertex._com_interfaces_ = [IAcadSubDMeshVertex]
AcadSubDMeshVertex._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadDimRotated(CoClass):
    _reg_clsid_ = GUID('{5FF9195D-327D-4424-B5BF-58A73A357534}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadDimRotated._com_interfaces_ = [IAcadDimRotated]
AcadDimRotated._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadDim3PointAngular(CoClass):
    _reg_clsid_ = GUID('{7C13B851-D711-49A9-BCBB-4B784C13A490}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadDim3PointAngular._com_interfaces_ = [IAcadDim3PointAngular]
AcadDim3PointAngular._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadRevolvedSurface(CoClass):
    _reg_clsid_ = GUID('{C3EA055A-2857-427D-ADD4-6B78F0296645}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadRevolvedSurface._com_interfaces_ = [IAcadRevolvedSurface]
AcadRevolvedSurface._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadRasterImage(CoClass):
    _reg_clsid_ = GUID('{1DD039BF-4222-4CAE-A26E-0E904BA1028D}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadRasterImage._com_interfaces_ = [IAcadRasterImage]
AcadRasterImage._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadDimArcLength(CoClass):
    _reg_clsid_ = GUID('{387A7BC2-26BA-4D85-90DB-2193266280A4}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadDimArcLength._com_interfaces_ = [IAcadDimArcLength]
AcadDimArcLength._outgoing_interfaces_ = [IAcadObjectEvents]

class Acad3DFace(CoClass):
    _reg_clsid_ = GUID('{FD2DA2DB-0005-4E58-B55D-84AEEBC189D2}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
Acad3DFace._com_interfaces_ = [IAcad3DFace]
Acad3DFace._outgoing_interfaces_ = [IAcadObjectEvents]

IAcadLoftedSurface._methods_ = [
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'NumCrossSections',
              ( ['out', 'retval'], POINTER(c_int), 'NumCrossSections' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'NumGuidePaths',
              ( ['out', 'retval'], POINTER(c_int), 'NumGuidePaths' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'SurfaceNormals',
              ( ['out', 'retval'], POINTER(AcLoftedSurfaceNormalType), 'surfaceNormal' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'SurfaceNormals',
              ( ['in'], AcLoftedSurfaceNormalType, 'surfaceNormal' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'StartDraftAngle',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'StartDraftAngle' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'StartDraftAngle',
              ( ['in'], ACAD_ANGLE, 'StartDraftAngle' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'StartDraftMagnitude',
              ( ['out', 'retval'], POINTER(c_double), 'startDraftMag' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'StartDraftMagnitude',
              ( ['in'], c_double, 'startDraftMag' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'EndDraftAngle',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'EndDraftAngle' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'EndDraftAngle',
              ( ['in'], ACAD_ANGLE, 'EndDraftAngle' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'EndDraftMagnitude',
              ( ['out', 'retval'], POINTER(c_double), 'endDraftMag' )),
    COMMETHOD([dispid(8), 'propput'], HRESULT, 'EndDraftMagnitude',
              ( ['in'], c_double, 'endDraftMag' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'Closed',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bClosed' )),
    COMMETHOD([dispid(9), 'propput'], HRESULT, 'Closed',
              ( ['in'], VARIANT_BOOL, 'bClosed' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'StartSmoothMagnitude',
              ( ['out', 'retval'], POINTER(c_double), 'startSmoothMag' )),
    COMMETHOD([dispid(12), 'propput'], HRESULT, 'StartSmoothMagnitude',
              ( ['in'], c_double, 'startSmoothMag' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'EndSmoothMagnitude',
              ( ['out', 'retval'], POINTER(c_double), 'endSmoothMag' )),
    COMMETHOD([dispid(13), 'propput'], HRESULT, 'EndSmoothMagnitude',
              ( ['in'], c_double, 'endSmoothMag' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'StartSmoothContinuity',
              ( ['out', 'retval'], POINTER(c_int), 'StartSmoothContinuity' )),
    COMMETHOD([dispid(14), 'propput'], HRESULT, 'StartSmoothContinuity',
              ( ['in'], c_int, 'StartSmoothContinuity' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'EndSmoothContinuity',
              ( ['out', 'retval'], POINTER(c_int), 'EndSmoothContinuity' )),
    COMMETHOD([dispid(15), 'propput'], HRESULT, 'EndSmoothContinuity',
              ( ['in'], c_int, 'EndSmoothContinuity' )),
    COMMETHOD([dispid(16), 'propget'], HRESULT, 'Periodic',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bPeriodic' )),
    COMMETHOD([dispid(16), 'propput'], HRESULT, 'Periodic',
              ( ['in'], VARIANT_BOOL, 'bPeriodic' )),
]
################################################################
## code template for IAcadLoftedSurface implementation
##class IAcadLoftedSurface_Impl(object):
##    @property
##    def NumCrossSections(self):
##        '-no docstring-'
##        #return NumCrossSections
##
##    @property
##    def NumGuidePaths(self):
##        '-no docstring-'
##        #return NumGuidePaths
##
##    def _get(self):
##        '-no docstring-'
##        #return surfaceNormal
##    def _set(self, surfaceNormal):
##        '-no docstring-'
##    SurfaceNormals = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return StartDraftAngle
##    def _set(self, StartDraftAngle):
##        '-no docstring-'
##    StartDraftAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return startDraftMag
##    def _set(self, startDraftMag):
##        '-no docstring-'
##    StartDraftMagnitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return EndDraftAngle
##    def _set(self, EndDraftAngle):
##        '-no docstring-'
##    EndDraftAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return endDraftMag
##    def _set(self, endDraftMag):
##        '-no docstring-'
##    EndDraftMagnitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bClosed
##    def _set(self, bClosed):
##        '-no docstring-'
##    Closed = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return startSmoothMag
##    def _set(self, startSmoothMag):
##        '-no docstring-'
##    StartSmoothMagnitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return endSmoothMag
##    def _set(self, endSmoothMag):
##        '-no docstring-'
##    EndSmoothMagnitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return StartSmoothContinuity
##    def _set(self, StartSmoothContinuity):
##        '-no docstring-'
##    StartSmoothContinuity = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return EndSmoothContinuity
##    def _set(self, EndSmoothContinuity):
##        '-no docstring-'
##    EndSmoothContinuity = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bPeriodic
##    def _set(self, bPeriodic):
##        '-no docstring-'
##    Periodic = property(_get, _set, doc = _set.__doc__)
##

class AcadDimRadialLarge(CoClass):
    _reg_clsid_ = GUID('{0E6AB755-A618-4579-878E-304AD9D62F1A}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadDimRadialLarge._com_interfaces_ = [IAcadDimRadialLarge]
AcadDimRadialLarge._outgoing_interfaces_ = [IAcadObjectEvents]

IAcadGeoPositionMarker._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(VARIANT), 'Position' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'Position',
              ( ['in'], VARIANT, 'Position' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'TextString',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrText' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'TextString',
              ( ['in'], BSTR, 'bstrText' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'TextStyleName',
              ( ['out', 'retval'], POINTER(BSTR), 'bstrName' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'TextStyleName',
              ( ['in'], BSTR, 'bstrName' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'TextJustify',
              ( ['out', 'retval'], POINTER(AcAttachmentPoint), 'attPoint' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'TextJustify',
              ( ['in'], AcAttachmentPoint, 'attPoint' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'DrawingDirection',
              ( ['out', 'retval'], POINTER(AcDrawingDirection), 'drawDir' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'DrawingDirection',
              ( ['in'], AcDrawingDirection, 'drawDir' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'TextWidth',
              ( ['out', 'retval'], POINTER(c_double), 'Width' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'TextWidth',
              ( ['in'], c_double, 'Width' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'Height',
              ( ['out', 'retval'], POINTER(c_double), 'Height' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'Height',
              ( ['in'], c_double, 'Height' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'Rotation',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'rotAngle' )),
    COMMETHOD([dispid(8), 'propput'], HRESULT, 'Rotation',
              ( ['in'], ACAD_ANGLE, 'rotAngle' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'LineSpacingFactor',
              ( ['out', 'retval'], POINTER(c_double), 'factor' )),
    COMMETHOD([dispid(9), 'propput'], HRESULT, 'LineSpacingFactor',
              ( ['in'], c_double, 'factor' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'LineSpacingDistance',
              ( ['out', 'retval'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(10), 'propput'], HRESULT, 'LineSpacingDistance',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'LineSpacingStyle',
              ( ['out', 'retval'], POINTER(AcLineSpacingStyle), 'style' )),
    COMMETHOD([dispid(11), 'propput'], HRESULT, 'LineSpacingStyle',
              ( ['in'], AcLineSpacingStyle, 'style' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'BackgroundFill',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bUseBackgroundFill' )),
    COMMETHOD([dispid(12), 'propput'], HRESULT, 'BackgroundFill',
              ( ['in'], VARIANT_BOOL, 'bUseBackgroundFill' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'LandingGap',
              ( ['out', 'retval'], POINTER(c_double), 'gap' )),
    COMMETHOD([dispid(13), 'propput'], HRESULT, 'LandingGap',
              ( ['in'], c_double, 'gap' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'Radius',
              ( ['out', 'retval'], POINTER(c_double), 'gap' )),
    COMMETHOD([dispid(14), 'propput'], HRESULT, 'Radius',
              ( ['in'], c_double, 'gap' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'TextFrameDisplay',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pVal' )),
    COMMETHOD([dispid(15), 'propput'], HRESULT, 'TextFrameDisplay',
              ( ['in'], VARIANT_BOOL, 'pVal' )),
    COMMETHOD([dispid(16), 'propget'], HRESULT, 'Latitude',
              ( ['out', 'retval'], POINTER(BSTR), 'Latitude' )),
    COMMETHOD([dispid(16), 'propput'], HRESULT, 'Latitude',
              ( ['in'], BSTR, 'Latitude' )),
    COMMETHOD([dispid(17), 'propget'], HRESULT, 'Longitude',
              ( ['out', 'retval'], POINTER(BSTR), 'Longitude' )),
    COMMETHOD([dispid(17), 'propput'], HRESULT, 'Longitude',
              ( ['in'], BSTR, 'Longitude' )),
    COMMETHOD([dispid(18), 'propget'], HRESULT, 'Altitude',
              ( ['out', 'retval'], POINTER(c_double), 'Altitude' )),
    COMMETHOD([dispid(18), 'propput'], HRESULT, 'Altitude',
              ( ['in'], c_double, 'Altitude' )),
    COMMETHOD([dispid(19), 'propget'], HRESULT, 'Notes',
              ( ['out', 'retval'], POINTER(BSTR), 'Notes' )),
    COMMETHOD([dispid(19), 'propput'], HRESULT, 'Notes',
              ( ['in'], BSTR, 'Notes' )),
]
################################################################
## code template for IAcadGeoPositionMarker implementation
##class IAcadGeoPositionMarker_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Position
##    def _set(self, Position):
##        '-no docstring-'
##    Position = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrText
##    def _set(self, bstrText):
##        '-no docstring-'
##    TextString = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bstrName
##    def _set(self, bstrName):
##        '-no docstring-'
##    TextStyleName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return attPoint
##    def _set(self, attPoint):
##        '-no docstring-'
##    TextJustify = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return drawDir
##    def _set(self, drawDir):
##        '-no docstring-'
##    DrawingDirection = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Width
##    def _set(self, Width):
##        '-no docstring-'
##    TextWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Height
##    def _set(self, Height):
##        '-no docstring-'
##    Height = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return rotAngle
##    def _set(self, rotAngle):
##        '-no docstring-'
##    Rotation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return factor
##    def _set(self, factor):
##        '-no docstring-'
##    LineSpacingFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Value
##    def _set(self, Value):
##        '-no docstring-'
##    LineSpacingDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return style
##    def _set(self, style):
##        '-no docstring-'
##    LineSpacingStyle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bUseBackgroundFill
##    def _set(self, bUseBackgroundFill):
##        '-no docstring-'
##    BackgroundFill = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return gap
##    def _set(self, gap):
##        '-no docstring-'
##    LandingGap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return gap
##    def _set(self, gap):
##        '-no docstring-'
##    Radius = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    TextFrameDisplay = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Latitude
##    def _set(self, Latitude):
##        '-no docstring-'
##    Latitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Longitude
##    def _set(self, Longitude):
##        '-no docstring-'
##    Longitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Altitude
##    def _set(self, Altitude):
##        '-no docstring-'
##    Altitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Notes
##    def _set(self, Notes):
##        '-no docstring-'
##    Notes = property(_get, _set, doc = _set.__doc__)
##

class Acad3DPolyline(CoClass):
    _reg_clsid_ = GUID('{DC5BCCC0-3BE5-4980-A832-FF06732F6784}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
Acad3DPolyline._com_interfaces_ = [IAcad3DPolyline]
Acad3DPolyline._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadBlock(CoClass):
    _reg_clsid_ = GUID('{F99ED60B-2B64-4749-81AF-1D3D3DCC29C6}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadBlock._com_interfaces_ = [IAcadBlock]
AcadBlock._outgoing_interfaces_ = [IAcadObjectEvents]


# values for enumeration 'AcTextAlignmentType'
acLeftAlignment = 0
acCenterAlignment = 1
acRightAlignment = 2
AcTextAlignmentType = c_int # enum
class AcadRegion(CoClass):
    _reg_clsid_ = GUID('{97301F71-D4BF-48B4-9854-88D35F5B15E6}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadRegion._com_interfaces_ = [IAcadRegion]
AcadRegion._outgoing_interfaces_ = [IAcadObjectEvents]

IAcadGeomapImage._methods_ = [
    COMMETHOD([dispid(33), 'propget'], HRESULT, 'GeoImageBrightness',
              ( ['out', 'retval'], POINTER(c_int), 'Brightness' )),
    COMMETHOD([dispid(33), 'propput'], HRESULT, 'GeoImageBrightness',
              ( ['in'], c_int, 'Brightness' )),
    COMMETHOD([dispid(34), 'propget'], HRESULT, 'GeoImageContrast',
              ( ['out', 'retval'], POINTER(c_int), 'Contrast' )),
    COMMETHOD([dispid(34), 'propput'], HRESULT, 'GeoImageContrast',
              ( ['in'], c_int, 'Contrast' )),
    COMMETHOD([dispid(35), 'propget'], HRESULT, 'GeoImageFade',
              ( ['out', 'retval'], POINTER(c_int), 'Fade' )),
    COMMETHOD([dispid(35), 'propput'], HRESULT, 'GeoImageFade',
              ( ['in'], c_int, 'Fade' )),
    COMMETHOD([dispid(36), 'propget'], HRESULT, 'GeoImagePosition',
              ( ['out', 'retval'], POINTER(VARIANT), 'Position' )),
    COMMETHOD([dispid(37), 'propget'], HRESULT, 'GeoImageWidth',
              ( ['out', 'retval'], POINTER(c_double), 'Width' )),
    COMMETHOD([dispid(38), 'propget'], HRESULT, 'GeoImageHeight',
              ( ['out', 'retval'], POINTER(c_double), 'Height' )),
]
################################################################
## code template for IAcadGeomapImage implementation
##class IAcadGeomapImage_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Brightness
##    def _set(self, Brightness):
##        '-no docstring-'
##    GeoImageBrightness = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Contrast
##    def _set(self, Contrast):
##        '-no docstring-'
##    GeoImageContrast = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Fade
##    def _set(self, Fade):
##        '-no docstring-'
##    GeoImageFade = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def GeoImagePosition(self):
##        '-no docstring-'
##        #return Position
##
##    @property
##    def GeoImageWidth(self):
##        '-no docstring-'
##        #return Width
##
##    @property
##    def GeoImageHeight(self):
##        '-no docstring-'
##        #return Height
##

class AcadModelSpace(CoClass):
    _reg_clsid_ = GUID('{C6601B80-9394-4BBA-9164-FEAB63F6A09C}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadModelSpace._com_interfaces_ = [IAcadModelSpace]
AcadModelSpace._outgoing_interfaces_ = [IAcadObjectEvents]


# values for enumeration 'AcBoolean'
acFalse = 0
acTrue = 1
AcBoolean = c_int # enum
class Acad3DSolid(CoClass):
    _reg_clsid_ = GUID('{B28EA1F5-377C-4CB5-BAF0-276B4C08C63E}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
Acad3DSolid._com_interfaces_ = [IAcad3DSolid]
Acad3DSolid._outgoing_interfaces_ = [IAcadObjectEvents]

IAcadSubEntSolidFace._methods_ = [
    COMMETHOD([dispid(1399), 'propget'], HRESULT, 'Material',
              ( ['out', 'retval'], POINTER(BSTR), 'Material' )),
    COMMETHOD([dispid(1399), 'propput'], HRESULT, 'Material',
              ( ['in'], BSTR, 'Material' )),
]
################################################################
## code template for IAcadSubEntSolidFace implementation
##class IAcadSubEntSolidFace_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Material
##    def _set(self, Material):
##        '-no docstring-'
##    Material = property(_get, _set, doc = _set.__doc__)
##

class AcadPaperSpace(CoClass):
    _reg_clsid_ = GUID('{1350C71F-F9F3-4A2E-95A8-86E18D115719}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadPaperSpace._com_interfaces_ = [IAcadPaperSpace]
AcadPaperSpace._outgoing_interfaces_ = [IAcadObjectEvents]


# values for enumeration 'AcTextAngleType'
acInsertAngle = 0
acHorizontalAngle = 1
acAlwaysRightReadingAngle = 2
AcTextAngleType = c_int # enum
class AcadNurbSurface(CoClass):
    _reg_clsid_ = GUID('{47C6E003-5A7B-46A1-8815-5EC62178C494}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadNurbSurface._com_interfaces_ = [IAcadNurbSurface]
AcadNurbSurface._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadArc(CoClass):
    _reg_clsid_ = GUID('{FAB2E2EB-D704-4945-AA94-D892C65AB417}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadArc._com_interfaces_ = [IAcadArc]
AcadArc._outgoing_interfaces_ = [IAcadObjectEvents]


# values for enumeration 'AcOnOff'
acOff = 0
acOn = 1
AcOnOff = c_int # enum
class IAcadOle(IAcadEntity):
    _case_insensitive_ = True
    _iid_ = GUID('{32C7C4F1-A834-4184-861D-5019F68C4BFF}')
    _idlflags_ = ['dual', 'oleautomation']
IAcadOle._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'InsertionPoint',
              ( ['out', 'retval'], POINTER(VARIANT), 'insPoint' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'InsertionPoint',
              ( ['in'], VARIANT, 'insPoint' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'Rotation',
              ( ['out', 'retval'], POINTER(ACAD_ANGLE), 'rot' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'Rotation',
              ( ['in'], ACAD_ANGLE, 'rot' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(c_double), 'Width' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'Width',
              ( ['in'], c_double, 'Width' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'Height',
              ( ['out', 'retval'], POINTER(c_double), 'Height' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'Height',
              ( ['in'], c_double, 'Height' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'ScaleWidth',
              ( ['out', 'retval'], POINTER(c_double), 'swidth' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'ScaleWidth',
              ( ['in'], c_double, 'swidth' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'ScaleHeight',
              ( ['out', 'retval'], POINTER(c_double), 'sheight' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'ScaleHeight',
              ( ['in'], c_double, 'sheight' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'LockAspectRatio',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'aspect' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'LockAspectRatio',
              ( ['in'], VARIANT_BOOL, 'aspect' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'OleItemType',
              ( ['out', 'retval'], POINTER(AcOleType), 'pType' )),
    COMMETHOD([dispid(8), 'propput'], HRESULT, 'OleItemType',
              ( ['in'], AcOleType, 'pType' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'OlePlotQuality',
              ( ['out', 'retval'], POINTER(AcOlePlotQuality), 'pPQuality' )),
    COMMETHOD([dispid(9), 'propput'], HRESULT, 'OlePlotQuality',
              ( ['in'], AcOlePlotQuality, 'pPQuality' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'OleSourceApp',
              ( ['out', 'retval'], POINTER(BSTR), 'srcApp' )),
    COMMETHOD([dispid(10), 'propput'], HRESULT, 'OleSourceApp',
              ( ['in'], BSTR, 'srcApp' )),
]
################################################################
## code template for IAcadOle implementation
##class IAcadOle_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return insPoint
##    def _set(self, insPoint):
##        '-no docstring-'
##    InsertionPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return rot
##    def _set(self, rot):
##        '-no docstring-'
##    Rotation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Width
##    def _set(self, Width):
##        '-no docstring-'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Height
##    def _set(self, Height):
##        '-no docstring-'
##    Height = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return swidth
##    def _set(self, swidth):
##        '-no docstring-'
##    ScaleWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return sheight
##    def _set(self, sheight):
##        '-no docstring-'
##    ScaleHeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return aspect
##    def _set(self, aspect):
##        '-no docstring-'
##    LockAspectRatio = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pType
##    def _set(self, pType):
##        '-no docstring-'
##    OleItemType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pPQuality
##    def _set(self, pPQuality):
##        '-no docstring-'
##    OlePlotQuality = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return srcApp
##    def _set(self, srcApp):
##        '-no docstring-'
##    OleSourceApp = property(_get, _set, doc = _set.__doc__)
##

class AcadAttribute(CoClass):
    'AutoCAD Attribute Object'
    _reg_clsid_ = GUID('{8C7E4D87-69A5-4145-95F3-4EA8B08516DC}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadAttribute._com_interfaces_ = [IAcadAttribute]
AcadAttribute._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadDwfUnderlay(CoClass):
    _reg_clsid_ = GUID('{A8F954E2-B175-4A40-AC54-CAB8DB564A6A}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadDwfUnderlay._com_interfaces_ = [IAcadUnderlay, IAcadDwfUnderlay]
AcadDwfUnderlay._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadSweptSurface(CoClass):
    _reg_clsid_ = GUID('{1E51BAEE-E537-4F46-85A6-E1F7285E49BF}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadSweptSurface._com_interfaces_ = [IAcadSweptSurface]
AcadSweptSurface._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadDgnUnderlay(CoClass):
    _reg_clsid_ = GUID('{869A1263-E48B-4C92-80F7-B5A792130ECF}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadDgnUnderlay._com_interfaces_ = [IAcadUnderlay]
AcadDgnUnderlay._outgoing_interfaces_ = [IAcadObjectEvents]

class AcadOle(CoClass):
    _reg_clsid_ = GUID('{153DFA66-1583-4AA7-81A0-51D363F04A36}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadOle._com_interfaces_ = [IAcadOle]
AcadOle._outgoing_interfaces_ = [IAcadObjectEvents]

IAcadSection2._methods_ = [
    COMMETHOD([dispid(22), 'propget'], HRESULT, 'State2',
              ( ['out', 'retval'], POINTER(AcSectionState2), 'pVal' )),
    COMMETHOD([dispid(22), 'propput'], HRESULT, 'State2',
              ( ['in'], AcSectionState2, 'pVal' )),
    COMMETHOD([dispid(21), 'propget'], HRESULT, 'SliceDepth',
              ( ['out', 'retval'], POINTER(c_double), 'pVal' )),
    COMMETHOD([dispid(21), 'propput'], HRESULT, 'SliceDepth',
              ( ['in'], c_double, 'pVal' )),
    COMMETHOD([dispid(23), 'propget'], HRESULT, 'SectionPlaneOffset',
              ( ['out', 'retval'], POINTER(c_double), 'pVal' )),
    COMMETHOD([dispid(23), 'propput'], HRESULT, 'SectionPlaneOffset',
              ( ['in'], c_double, 'pVal' )),
]
################################################################
## code template for IAcadSection2 implementation
##class IAcadSection2_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    State2 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    SliceDepth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    SectionPlaneOffset = property(_get, _set, doc = _set.__doc__)
##

class AcadPdfUnderlay(CoClass):
    _reg_clsid_ = GUID('{D371DFF8-FE25-49A0-8712-8A4D5355E137}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadPdfUnderlay._com_interfaces_ = [IAcadUnderlay]
AcadPdfUnderlay._outgoing_interfaces_ = [IAcadObjectEvents]

IAcadSubEntSolidEdge._methods_ = [
]
################################################################
## code template for IAcadSubEntSolidEdge implementation
##class IAcadSubEntSolidEdge_Impl(object):

IAcadSubEntSolidVertex._methods_ = [
]
################################################################
## code template for IAcadSubEntSolidVertex implementation
##class IAcadSubEntSolidVertex_Impl(object):

class AcadSubEntity(CoClass):
    _reg_clsid_ = GUID('{9E665DF1-60B8-4A8E-A329-A7130E13E993}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C5661B4E-34DA-4F36-8D82-AB2BFBF4B1F1}', 1, 0)
AcadSubEntity._com_interfaces_ = [IAcadSubEntity]

IAcad3DSolid._methods_ = [
    COMMETHOD([dispid(1), 'nonbrowsable', 'propget'], HRESULT, 'Centroid',
              ( ['out', 'retval'], POINTER(VARIANT), 'Centroid' )),
    COMMETHOD([dispid(2), 'nonbrowsable', 'propget'], HRESULT, 'MomentOfInertia',
              ( ['out', 'retval'], POINTER(VARIANT), 'momentInertia' )),
    COMMETHOD([dispid(3), 'nonbrowsable', 'propget'], HRESULT, 'PrincipalDirections',
              ( ['out', 'retval'], POINTER(VARIANT), 'prinDir' )),
    COMMETHOD([dispid(4), 'nonbrowsable', 'propget'], HRESULT, 'PrincipalMoments',
              ( ['out', 'retval'], POINTER(VARIANT), 'prinMoments' )),
    COMMETHOD([dispid(5), 'nonbrowsable', 'propget'], HRESULT, 'ProductOfInertia',
              ( ['out', 'retval'], POINTER(VARIANT), 'prodInertia' )),
    COMMETHOD([dispid(6), 'nonbrowsable', 'propget'], HRESULT, 'RadiiOfGyration',
              ( ['out', 'retval'], POINTER(VARIANT), 'radiiGyration' )),
    COMMETHOD([dispid(7), 'nonbrowsable', 'propget'], HRESULT, 'Volume',
              ( ['out', 'retval'], POINTER(c_double), 'Volume' )),
    COMMETHOD([dispid(8)], HRESULT, 'Boolean',
              ( ['in'], AcBooleanType, 'Operation' ),
              ( ['in'], POINTER(IAcad3DSolid), 'SolidObject' )),
    COMMETHOD([dispid(9)], HRESULT, 'CheckInterference',
              ( ['in'], POINTER(IAcad3DSolid), 'Object' ),
              ( ['in'], VARIANT_BOOL, 'CreateInterferenceSolid' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'SolidsInterfere' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcad3DSolid)), 'pIntSolid' )),
    COMMETHOD([dispid(10)], HRESULT, 'SectionSolid',
              ( ['in'], VARIANT, 'Point1' ),
              ( ['in'], VARIANT, 'Point2' ),
              ( ['in'], VARIANT, 'point3' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcadRegion)), 'pRegion' )),
    COMMETHOD([dispid(11)], HRESULT, 'SliceSolid',
              ( ['in'], VARIANT, 'Point1' ),
              ( ['in'], VARIANT, 'Point2' ),
              ( ['in'], VARIANT, 'point3' ),
              ( ['in'], VARIANT_BOOL, 'Negative' ),
              ( ['out', 'retval'], POINTER(POINTER(IAcad3DSolid)), 'pNegSideSolid' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'SolidType',
              ( ['out', 'retval'], POINTER(BSTR), 'SolidType' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(VARIANT), 'Position' )),
    COMMETHOD([dispid(13), 'propput'], HRESULT, 'Position',
              ( ['in'], VARIANT, 'Position' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'History',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'bHistory' )),
    COMMETHOD([dispid(14), 'propput'], HRESULT, 'History',
              ( ['in'], VARIANT_BOOL, 'bHistory' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'ShowHistory',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'Position' )),
    COMMETHOD([dispid(15), 'propput'], HRESULT, 'ShowHistory',
              ( ['in'], VARIANT_BOOL, 'Position' )),
]
################################################################
## code template for IAcad3DSolid implementation
##class IAcad3DSolid_Impl(object):
##    @property
##    def Centroid(self):
##        '-no docstring-'
##        #return Centroid
##
##    @property
##    def MomentOfInertia(self):
##        '-no docstring-'
##        #return momentInertia
##
##    @property
##    def PrincipalDirections(self):
##        '-no docstring-'
##        #return prinDir
##
##    @property
##    def PrincipalMoments(self):
##        '-no docstring-'
##        #return prinMoments
##
##    @property
##    def ProductOfInertia(self):
##        '-no docstring-'
##        #return prodInertia
##
##    @property
##    def RadiiOfGyration(self):
##        '-no docstring-'
##        #return radiiGyration
##
##    @property
##    def Volume(self):
##        '-no docstring-'
##        #return Volume
##
##    def Boolean(self, Operation, SolidObject):
##        '-no docstring-'
##        #return 
##
##    def CheckInterference(self, Object, CreateInterferenceSolid):
##        '-no docstring-'
##        #return SolidsInterfere, pIntSolid
##
##    def SectionSolid(self, Point1, Point2, point3):
##        '-no docstring-'
##        #return pRegion
##
##    def SliceSolid(self, Point1, Point2, point3, Negative):
##        '-no docstring-'
##        #return pNegSideSolid
##
##    @property
##    def SolidType(self):
##        '-no docstring-'
##        #return SolidType
##
##    def _get(self):
##        '-no docstring-'
##        #return Position
##    def _set(self, Position):
##        '-no docstring-'
##    Position = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bHistory
##    def _set(self, bHistory):
##        '-no docstring-'
##    History = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Position
##    def _set(self, Position):
##        '-no docstring-'
##    ShowHistory = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'AcDrawLeaderOrderType'
acDrawLeaderHeadFirst = 0
acDrawLeaderTailFirst = 1
AcDrawLeaderOrderType = c_int # enum
IAcadMLeaderStyle._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'Description' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'Description',
              ( ['in'], BSTR, 'Description' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'BitFlags',
              ( ['out', 'retval'], POINTER(c_int), 'bitFlag' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'BitFlags',
              ( ['in'], c_int, 'bitFlag' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'ContentType',
              ( ['out', 'retval'], POINTER(AcMLeaderContentType), 'Type' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'ContentType',
              ( ['in'], AcMLeaderContentType, 'Type' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'DrawMLeaderOrderType',
              ( ['out', 'retval'], POINTER(AcDrawMLeaderOrderType), 'Type' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'DrawMLeaderOrderType',
              ( ['in'], AcDrawMLeaderOrderType, 'Type' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'DrawLeaderOrderType',
              ( ['out', 'retval'], POINTER(AcDrawLeaderOrderType), 'Type' )),
    COMMETHOD([dispid(6), 'propput'], HRESULT, 'DrawLeaderOrderType',
              ( ['in'], AcDrawLeaderOrderType, 'Type' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'MaxLeaderSegmentsPoints',
              ( ['out', 'retval'], POINTER(c_int), 'number' )),
    COMMETHOD([dispid(7), 'propput'], HRESULT, 'MaxLeaderSegmentsPoints',
              ( ['in'], c_int, 'number' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'FirstSegmentAngleConstraint',
              ( ['out', 'retval'], POINTER(AcSegmentAngleType), 'constraint' )),
    COMMETHOD([dispid(8), 'propput'], HRESULT, 'FirstSegmentAngleConstraint',
              ( ['in'], AcSegmentAngleType, 'constraint' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'SecondSegmentAngleConstraint',
              ( ['out', 'retval'], POINTER(AcSegmentAngleType), 'constraint' )),
    COMMETHOD([dispid(9), 'propput'], HRESULT, 'SecondSegmentAngleConstraint',
              ( ['in'], AcSegmentAngleType, 'constraint' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'LeaderLinetype',
              ( ['out', 'retval'], POINTER(AcMLeaderType), 'Type' )),
    COMMETHOD([dispid(10), 'propput'], HRESULT, 'LeaderLinetype',
              ( ['in'], AcMLeaderType, 'Type' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'LeaderLineColor',
              ( ['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'color' )),
    COMMETHOD([dispid(11), 'propput'], HRESULT, 'LeaderLineColor',
              ( ['in'], POINTER(IAcadAcCmColor), 'color' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'LeaderLineTypeId',
              ( ['out', 'retval'], POINTER(ACAD_LTYPE), 'Type' )),
    COMMETHOD([dispid(12), 'propput'], HRESULT, 'LeaderLineTypeId',
              ( ['in'], ACAD_LTYPE, 'Type' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'LeaderLineWeight',
              ( ['out', 'retval'], POINTER(AcLineWeight), 'weight' )),
    COMMETHOD([dispid(13), 'propput'], HRESULT, 'LeaderLineWeight',
              ( ['in'], AcLineWeight, 'weight' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'EnableLanding',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'enabled' )),
    COMMETHOD([dispid(14), 'propput'], HRESULT, 'EnableLanding',
              ( ['in'], VARIANT_BOOL, 'enabled' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'LandingGap',
              ( ['out', 'retval'], POINTER(c_double), 'LandingGap' )),
    COMMETHOD([dispid(15), 'propput'], HRESULT, 'LandingGap',
              ( ['in'], c_double, 'LandingGap' )),
    COMMETHOD([dispid(16), 'propget'], HRESULT, 'EnableDogleg',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'enabled' )),
    COMMETHOD([dispid(16), 'propput'], HRESULT, 'EnableDogleg',
              ( ['in'], VARIANT_BOOL, 'enabled' )),
    COMMETHOD([dispid(17), 'propget'], HRESULT, 'DoglegLength',
              ( ['out', 'retval'], POINTER(c_double), 'DoglegLength' )),
    COMMETHOD([dispid(17), 'propput'], HRESULT, 'DoglegLength',
              ( ['in'], c_double, 'DoglegLength' )),
    COMMETHOD([dispid(18), 'propget'], HRESULT, 'ArrowSymbol',
              ( ['out', 'retval'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(18), 'propput'], HRESULT, 'ArrowSymbol',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([dispid(19), 'propget'], HRESULT, 'ArrowSize',
              ( ['out', 'retval'], POINTER(c_double), 'size' )),
    COMMETHOD([dispid(19), 'propput'], HRESULT, 'ArrowSize',
              ( ['in'], c_double, 'size' )),
    COMMETHOD([dispid(20), 'propget'], HRESULT, 'TextStyle',
              ( ['out', 'retval'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(20), 'propput'], HRESULT, 'TextStyle',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([dispid(41), 'propget'], HRESULT, 'TextAttachmentDirection',
              ( ['out', 'retval'], POINTER(AcTextAttachmentDirection), 'dir' )),
    COMMETHOD([dispid(41), 'propput'], HRESULT, 'TextAttachmentDirection',
              ( ['in'], AcTextAttachmentDirection, 'dir' )),
    COMMETHOD([dispid(21), 'propget'], HRESULT, 'TextLeftAttachmentType',
              ( ['out', 'retval'], POINTER(AcTextAttachmentType), 'Type' )),
    COMMETHOD([dispid(21), 'propput'], HRESULT, 'TextLeftAttachmentType',
              ( ['in'], AcTextAttachmentType, 'Type' )),
    COMMETHOD([dispid(40), 'propget'], HRESULT, 'TextRightAttachmentType',
              ( ['out', 'retval'], POINTER(AcTextAttachmentType), 'Type' )),
    COMMETHOD([dispid(40), 'propput'], HRESULT, 'TextRightAttachmentType',
              ( ['in'], AcTextAttachmentType, 'Type' )),
    COMMETHOD([dispid(42), 'propget'], HRESULT, 'TextTopAttachmentType',
              ( ['out', 'retval'], POINTER(AcVerticalTextAttachmentType), 'Type' )),
    COMMETHOD([dispid(42), 'propput'], HRESULT, 'TextTopAttachmentType',
              ( ['in'], AcVerticalTextAttachmentType, 'Type' )),
    COMMETHOD([dispid(43), 'propget'], HRESULT, 'TextBottomAttachmentType',
              ( ['out', 'retval'], POINTER(AcVerticalTextAttachmentType), 'Type' )),
    COMMETHOD([dispid(43), 'propput'], HRESULT, 'TextBottomAttachmentType',
              ( ['in'], AcVerticalTextAttachmentType, 'Type' )),
    COMMETHOD([dispid(22), 'propget'], HRESULT, 'TextColor',
              ( ['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'color' )),
    COMMETHOD([dispid(22), 'propput'], HRESULT, 'TextColor',
              ( ['in'], POINTER(IAcadAcCmColor), 'color' )),
    COMMETHOD([dispid(23), 'propget'], HRESULT, 'TextHeight',
              ( ['out', 'retval'], POINTER(c_double), 'Height' )),
    COMMETHOD([dispid(23), 'propput'], HRESULT, 'TextHeight',
              ( ['in'], c_double, 'Height' )),
    COMMETHOD([dispid(24), 'propget'], HRESULT, 'EnableFrameText',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'enabled' )),
    COMMETHOD([dispid(24), 'propput'], HRESULT, 'EnableFrameText',
              ( ['in'], VARIANT_BOOL, 'enabled' )),
    COMMETHOD([dispid(25), 'propget'], HRESULT, 'AlignSpace',
              ( ['out', 'retval'], POINTER(c_double), 'AlignSpace' )),
    COMMETHOD([dispid(25), 'propput'], HRESULT, 'AlignSpace',
              ( ['in'], c_double, 'AlignSpace' )),
    COMMETHOD([dispid(26), 'propget'], HRESULT, 'Block',
              ( ['out', 'retval'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(26), 'propput'], HRESULT, 'Block',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([dispid(27), 'propget'], HRESULT, 'BlockColor',
              ( ['out', 'retval'], POINTER(POINTER(IAcadAcCmColor)), 'color' )),
    COMMETHOD([dispid(27), 'propput'], HRESULT, 'BlockColor',
              ( ['in'], POINTER(IAcadAcCmColor), 'color' )),
    COMMETHOD([dispid(28), 'propget'], HRESULT, 'EnableBlockScale',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'enabled' )),
    COMMETHOD([dispid(28), 'propput'], HRESULT, 'EnableBlockScale',
              ( ['in'], VARIANT_BOOL, 'enabled' )),
    COMMETHOD([dispid(29), 'propget'], HRESULT, 'BlockScale',
              ( ['out', 'retval'], POINTER(c_double), 'ScaleFactor' )),
    COMMETHOD([dispid(29), 'propput'], HRESULT, 'BlockScale',
              ( ['in'], c_double, 'ScaleFactor' )),
    COMMETHOD([dispid(30), 'propget'], HRESULT, 'EnableBlockRotation',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'enabled' )),
    COMMETHOD([dispid(30), 'propput'], HRESULT, 'EnableBlockRotation',
              ( ['in'], VARIANT_BOOL, 'enabled' )),
    COMMETHOD([dispid(31), 'propget'], HRESULT, 'BlockRotation',
              ( ['out', 'retval'], POINTER(c_double), 'Rotation' )),
    COMMETHOD([dispid(31), 'propput'], HRESULT, 'BlockRotation',
              ( ['in'], c_double, 'Rotation' )),
    COMMETHOD([dispid(32), 'propget'], HRESULT, 'BlockConnectionType',
              ( ['out', 'retval'], POINTER(AcBlockConnectionType), 'Type' )),
    COMMETHOD([dispid(32), 'propput'], HRESULT, 'BlockConnectionType',
              ( ['in'], AcBlockConnectionType, 'Type' )),
    COMMETHOD([dispid(33), 'propget'], HRESULT, 'ScaleFactor',
              ( ['out', 'retval'], POINTER(c_double), 'scale' )),
    COMMETHOD([dispid(33), 'propput'], HRESULT, 'ScaleFactor',
              ( ['in'], c_double, 'scale' )),
    COMMETHOD([dispid(34), 'propget'], HRESULT, 'OverwritePropChanged',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'changed' )),
    COMMETHOD([dispid(35), 'propget'], HRESULT, 'Annotative',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'Annotative' )),
    COMMETHOD([dispid(35), 'propput'], HRESULT, 'Annotative',
              ( ['in'], VARIANT_BOOL, 'Annotative' )),
    COMMETHOD([dispid(36), 'propget'], HRESULT, 'BreakSize',
              ( ['out', 'retval'], POINTER(c_double), 'size' )),
    COMMETHOD([dispid(36), 'propput'], HRESULT, 'BreakSize',
              ( ['in'], c_double, 'size' )),
    COMMETHOD([dispid(37), 'propget'], HRESULT, 'TextString',
              ( ['out', 'retval'], POINTER(BSTR), 'Text' )),
    COMMETHOD([dispid(37), 'propput'], HRESULT, 'TextString',
              ( ['in'], BSTR, 'Text' )),
    COMMETHOD([dispid(38), 'propget'], HRESULT, 'TextAngleType',
              ( ['out', 'retval'], POINTER(AcTextAngleType), 'Type' )),
    COMMETHOD([dispid(38), 'propput'], HRESULT, 'TextAngleType',
              ( ['in'], AcTextAngleType, 'Type' )),
    COMMETHOD([dispid(39), 'propget'], HRESULT, 'TextAlignmentType',
              ( ['out', 'retval'], POINTER(AcTextAlignmentType), 'Type' )),
    COMMETHOD([dispid(39), 'propput'], HRESULT, 'TextAlignmentType',
              ( ['in'], AcTextAlignmentType, 'Type' )),
]
################################################################
## code template for IAcadMLeaderStyle implementation
##class IAcadMLeaderStyle_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return Name
##    def _set(self, Name):
##        '-no docstring-'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Description
##    def _set(self, Description):
##        '-no docstring-'
##    Description = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return bitFlag
##    def _set(self, bitFlag):
##        '-no docstring-'
##    BitFlags = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    ContentType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    DrawMLeaderOrderType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    DrawLeaderOrderType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return number
##    def _set(self, number):
##        '-no docstring-'
##    MaxLeaderSegmentsPoints = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return constraint
##    def _set(self, constraint):
##        '-no docstring-'
##    FirstSegmentAngleConstraint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return constraint
##    def _set(self, constraint):
##        '-no docstring-'
##    SecondSegmentAngleConstraint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    LeaderLinetype = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return color
##    def _set(self, color):
##        '-no docstring-'
##    LeaderLineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    LeaderLineTypeId = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return weight
##    def _set(self, weight):
##        '-no docstring-'
##    LeaderLineWeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return enabled
##    def _set(self, enabled):
##        '-no docstring-'
##    EnableLanding = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return LandingGap
##    def _set(self, LandingGap):
##        '-no docstring-'
##    LandingGap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return enabled
##    def _set(self, enabled):
##        '-no docstring-'
##    EnableDogleg = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return DoglegLength
##    def _set(self, DoglegLength):
##        '-no docstring-'
##    DoglegLength = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Name
##    def _set(self, Name):
##        '-no docstring-'
##    ArrowSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return size
##    def _set(self, size):
##        '-no docstring-'
##    ArrowSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Name
##    def _set(self, Name):
##        '-no docstring-'
##    TextStyle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return dir
##    def _set(self, dir):
##        '-no docstring-'
##    TextAttachmentDirection = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    TextLeftAttachmentType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    TextRightAttachmentType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    TextTopAttachmentType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    TextBottomAttachmentType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return color
##    def _set(self, color):
##        '-no docstring-'
##    TextColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Height
##    def _set(self, Height):
##        '-no docstring-'
##    TextHeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return enabled
##    def _set(self, enabled):
##        '-no docstring-'
##    EnableFrameText = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return AlignSpace
##    def _set(self, AlignSpace):
##        '-no docstring-'
##    AlignSpace = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Name
##    def _set(self, Name):
##        '-no docstring-'
##    Block = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return color
##    def _set(self, color):
##        '-no docstring-'
##    BlockColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return enabled
##    def _set(self, enabled):
##        '-no docstring-'
##    EnableBlockScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return ScaleFactor
##    def _set(self, ScaleFactor):
##        '-no docstring-'
##    BlockScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return enabled
##    def _set(self, enabled):
##        '-no docstring-'
##    EnableBlockRotation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Rotation
##    def _set(self, Rotation):
##        '-no docstring-'
##    BlockRotation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    BlockConnectionType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return scale
##    def _set(self, scale):
##        '-no docstring-'
##    ScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def OverwritePropChanged(self):
##        '-no docstring-'
##        #return changed
##
##    def _get(self):
##        '-no docstring-'
##        #return Annotative
##    def _set(self, Annotative):
##        '-no docstring-'
##    Annotative = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return size
##    def _set(self, size):
##        '-no docstring-'
##    BreakSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Text
##    def _set(self, Text):
##        '-no docstring-'
##    TextString = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    TextAngleType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Type
##    def _set(self, Type):
##        '-no docstring-'
##    TextAlignmentType = property(_get, _set, doc = _set.__doc__)
##

__all__ = [ 'acDegrees60', 'acScientific',
           'acHatchPatternTypeUserDefined', 'acPartialPreview',
           'AcDimFractionType', 'acEndsNormal',
           'acMergeCellStyleConvertDuplicatesToOverrides',
           'acCellRightGridLineWeight', 'acArrowClosed',
           'AcTextAlignmentType', 'acExtendThisEntity',
           'AcISOPenWidth', 'AcadBlockReference', 'AcCellOption',
           'acCellBackgroundFillNone', 'acRaster',
           'acCellContentColor', 'acNoDrawingAreaShortCutMenu',
           'IAcadNurbSurface', 'IAcadUCS', 'AcadXline',
           'IAcadRevolvedSurface', 'acUnknownDataType',
           'acSectionSubItemSectionLine', 'acShadePlotWireframe',
           'AcToolbarDockStatus', 'acOQLineArt', 'acDegrees090',
           'IAcadPlaneSurface', 'acLock', 'AcMLineJustification',
           'AcadPolyline', 'acLsLineType', 'acLsColor',
           'acDataHorzTopVisibility', 'acAttachmentPointBottomCenter',
           'acPrinterNeverAlert', 'acArrowDotBlank',
           'acTitleRowAlignment', 'ac3_32in_1ft', 'ac90degrees',
           'acAlignmentBottomCenter', 'acDataHorzBottomLineWeight',
           'AcadOle', 'IAcadAttributeReference',
           'acInsertUnitsInches', 'AcadGroups', 'AcColorMethod',
           'acVertLeft', 'AcCellAlignment', 'AcWindowState',
           'acTextCell', 'acBackgroundColor', 'acLnWt200',
           'acAttachmentLinedCenter', 'acZero', 'acTurns',
           'IAcadSectionSettings', 'acTextFlagBackward', 'acNative',
           'acFirstNormal', 'IAcadLineType', 'acVp1_2',
           'acActiveViewport', 'ac2010_dwg', 'acSectionStateBoundary',
           'acSectionStatePlane', 'acYellow', 'acDisplayDCS',
           'acCenterLine', 'acLineSpacingStyleAtLeast', 'AcadTrace',
           'acLeftMask', 'acInsertUnitsParsecs', 'acDimDecimal',
           'acStraightLeader', 'acDegrees', 'IAcadPViewport',
           'acLeftToRight', 'acExtendBoth',
           'acHeaderVertLeftVisibility', 'IAcadRegion',
           'AcadDimAngular', 'acDgnUnderlay',
           'acSectionSubItemSectionLineBottom', 'acBlockReference',
           'AcadHatch', 'acAttachmentMiddleOfTop', 'AcadEllipse',
           'AcPolylineType', 'AcDimToleranceMethod',
           'acSelectionSetCrossingPolygon', 'AcRowType',
           'ac1_8in_1ft', 'acEllipse', 'acVp1_2in_1ft',
           'acColorMethodByRGB', 'acByBlock',
           'acPrinterNeverAlertLogOnce', 'acHorizontalAlignmentRight',
           'ac0degrees', 'acGeneral', 'acCellStateContentLocked',
           'AcPlotPolicyForLegacyDwgs', 'IAcadSectionManager',
           'acBaseMenuGroup', 'acToolbarDockBottom',
           'IAcad3DPolyline', 'AcadRegisteredApplication',
           'AcadDimRadialLarge', 'IAcadDimRadial', 'IAcadViewports',
           'ac1_16in_1ft', 'acRuled', 'acDimEngineering',
           'AcadMLeaderStyle', 'acExtendOtherEntity', 'acArrowSmall',
           'ac2018_Template', 'AcCellMargin', 'acUnitVolume',
           'AcadPdfUnderlay', 'acCellStateNone',
           'acSectionGenerationDestinationNewBlock', 'IAcadDimStyle',
           'IAcadEntity', 'IAcadText', 'acDegrees30',
           'AcadModelSpace', 'acTableFlowDownOrUp',
           'acHeaderHorzBottomVisibility', 'acJIS',
           'AcMeasurementUnits', 'acDataVertInsideVisibility',
           'IAcadObject', 'AcadArc', 'acAlignmentLeft', 'acEnableSCM',
           'IAcadObjectEvents', 'IAcadDwfUnderlay', 'IAcadMLeader',
           'acTableSelectWindow', 'acVerticalAlignmentBottom',
           'AcHatchObjectType', 'acBlockCircle',
           'acHeaderVertRightLineWeight', 'acSelectionSetCrossing',
           'acRightAlignment', 'acInsertUnitsMicrons',
           'acDataHorzInsideColor', 'acCastsAndReceivesShadows',
           'acPixels', 'acVp4_1', 'acNoOverrides',
           'IAcadMLeaderStyle', 'acTitleHorzTopColor', 'AcadUCSs',
           'AcadDimRadial', 'IAcadLeader', 'acCellMarginVertSpacing',
           'IAcadWipeout', 'acShadePlotAsDisplayed', 'IAcadMaterial',
           'acHorizontalAlignmentLeft', 'IAcadPolyline',
           'AcSelectType', 'acUnion', 'acColorMethodForeground',
           'AcadAcCmColor', 'acTitleRowTextStyle',
           'AcadExternalReference', 'IAcadPolygonMesh',
           'acConnectExtents', 'acUseMaximumPrecision',
           'AcDimToleranceJustify', 'acTolTop', 'acBlockSlot',
           'acHatchPatternTypeCustomDefined', 'acTitleRowFillNone',
           'acOQText', 'LONG_PTR', 'acShow', 'acVp1_8',
           'acSelectionSetFence', 'acAttributeReference',
           'acTextOnly', 'IAcadBlock', 'acPrinterAlertOnce',
           'acTitleVertInsideLineWeight',
           'acAttachmentPointMiddleRight', 'ac1_64in_1ft',
           'acCellTopVisibility', 'acDragDoNotDisplay', 'AcadMText',
           'IAcadDatabasePreferences', 'acDataHorzTopLineWeight',
           'acViewport4', 'acOPQHighGraphics', 'acUnknownCell',
           'ac2004_Template', 'acViewport3Vertical',
           'acBlockTriangle', 'acLnWt009', 'acIntensityGrayscale',
           'IAcadTrace', 'ACAD_DISTANCE', 'acLnWt013', 'acIsoparms',
           'ACADSECURITYPARAMS_ADD_TIMESTAMP',
           'acSecondExtensionLine', 'IAcadSurface', 'AcadDimOrdinate',
           'AcadTolerance', 'acCellTextStyle', 'acTitleVertLeftColor',
           'acDataRowFillNone', 'IAcad3DSolid', 'acParseOptionNone',
           'ac1ft_1ft', 'acDimLDecimal', 'acViewport2Vertical',
           'acLsPlot', 'acPaperSpace', 'acSectionState2Volume',
           'ac1_30', 'AcPlotPolicy', 'acSplineWithArrow',
           'acSelectionSetWindow', 'AcColor', 'acMarginLeft',
           'acCellStateContentReadOnly', 'acWindow', 'acR18_dwg',
           'acVp100_1', 'acDataRowColor', 'IAcadModelSpace',
           'acLnWtByBlock', 'acIsolines', 'ac2000_Template',
           'AcPredefBlockType', 'acDouble', 'acExtents', 'acR18_dxf',
           'AcadSubEntSolidVertex', 'acTolMiddle',
           'acDimPrecisionSeven', 'AcParseOption', 'IAcadAttribute',
           'AcadWipeout', 'acCellTopGridColor', 'acAlignmentTopRight',
           'acDegrees180', 'AcadRegisteredApplications',
           'acIntensity', 'acArrowOpen30', 'acLeftAlignment',
           'acSelectionSetWindowPolygon', 'AcadDictionaries', 'acRed',
           'acCellContentLayoutStackedHorizontal',
           'acHatchLoopTypeTextbox', 'acMetric',
           'acCellContentLayoutStackedVertical', 'acLnWt120',
           'ACAD_LWEIGHT', 'AcDrawingAreaShortCutMenu', 'acPolymesh',
           'acBuffer', 'acAttributeModeVerify', 'IAcadDimDiametric',
           'acOverSecondExtension', 'AcadGeoPositionMarker',
           'acCellMarginLeft', 'AcadDimStyles', 'AcMenuGroupType',
           'acMoveTextNoLeader', 'acHorzTop', 'AcadDimDiametric',
           'acModelSpace', 'acUpdateOptionUpdateFullSourceRange',
           'IAcadPlotConfigurations', 'AcVerticalAlignment',
           'acHorzCentered', 'AcadExtrudedSurface',
           'AcDimTextMovement', 'acHeaderHorzBottomColor',
           'acDegrees270', 'Acad3DFace', 'acDataTypeAndFormat',
           'acDimArchitectural', 'acTrue', 'acRegion',
           'acHatchLoopTypeDerived', 'AcPolymeshType',
           'AcadDimAligned', 'acHorzBottom',
           'acTitleHorzBottomVisibility', 'AcadSummaryInfo',
           'AcadSubEntSolidFace', 'acOTEmbedded', 'AcadDictionary',
           'acArchitectural', 'AcTextGenerationFlag',
           'acTableFlowRight', 'acArrowClosedBlank',
           'acToolbarFloating', 'acTolerance', 'acSectionState2Slice',
           'acControlVertices', 'AcHorizontalAlignment',
           'acDataRowTextHeight', 'acVp8_1', 'acViewport2Horizontal',
           'acToolbarControl', 'acHeaderRowTextHeight', 'acVp1_100',
           'acCenterMark', 'acSCM', 'acHeaderVertLeftLineWeight',
           'AcGridLineStyle', 'AcCellContentType', 'acMarginBottom',
           'acDimPrecisionZero', 'IAcadDatabase', 'ac2000_dwg',
           'acMillimeters', 'AcVerticalTextAttachmentType',
           'AcAlignment', 'AcadDwfUnderlay', 'Acad3DPolyline',
           'ACAD_NULL', 'IAcadXline', 'acToolbarDockLeft',
           'IAcadDimAligned', 'acDegrees000', 'AcadHyperlinks',
           'AcMLeaderContentType', 'acOff', 'acShadePlotRendered',
           'acDataFormat',
           'acUpdateOptionOverwriteFormatModifiedAfterUpdate',
           'AcPlotPolicyForNewDwgs', 'acTitleRowColor',
           'acPolylineLight', 'AcLeaderType', 'acLnWt080',
           'acAttachmentBottomLine', 'acVerticalAlignmentBaseline',
           'acDataHorzInsideVisibility', 'acCW', 'acArrowOpen90',
           'acIntensityEditableFlag', 'IAcadRegisteredApplication',
           'acAlignmentTopLeft', 'ACAD_LTYPE', 'acDataRow',
           'ACADSECURITYPARAMS_ENCRYPT_PROPS', 'AcDimLUnits',
           'acProxyShow', 'acLnWt158', 'acLsAll', 'AcadNurbSurface',
           'acTextHeight', 'AcadSubDMeshEdge', 'IAcadEllipse',
           'acLine', 'ac2018_dwg', 'acBestFit', 'acVp1_32in_1ft',
           'acHeaderRowColor', 'AcActiveSpace',
           'acDimLWindowsDesktop', 'AcadAttributeReference', 'ac1_5',
           'AcadCircle', 'AcadPoint', 'ac1_128in_1ft', 'acAngular',
           'acVertCellMargin', 'acLsOn', 'acView', 'acDegreesUnknown',
           'acR12_dxf', 'AcadHelix', 'AcadPlaneSurface', 'acOn',
           'AcHatchStyle', 'acSubDMesh', 'IAcadSubEntSolidEdge',
           'acByLayer', 'acLnWt070', 'AcadEntity', 'acCenterNone',
           'AcDimUnits', 'acByColor', 'acInsertUnitsDecameters',
           'acHeaderRowFillNone', 'acDataRowTextStyle', 'acCyan',
           'acDimRotated', 'acAlignmentMiddleLeft', 'acBlockBox',
           'acDemandLoadEnabledWithCopy', 'acPolicyNewLegacy',
           'ac2007_dxf', 'acCircle', 'acMiddleRight',
           'acDragDisplayOnRequest', 'IAcadGroup', 'AcLineWeight',
           'ACAD_NOUNITS', 'acHorizontalAlignmentFit',
           'AcadSectionSettings', 'acLnWt060',
           'acAttributeModePreset', 'acAttachmentPointTopCenter',
           'acToolbarDockTop', 'acContentLayout',
           'AcDrawLeaderOrderType', 'AcAttributeMode',
           'AcadPolyfaceMesh', 'acLnWt211', 'acMergeCellStyleNone',
           'acDefaultUnits', 'acSectionSubItemkNone', 'Acad3DSolid',
           'acHeaderHorzTopLineWeight', 'acBlockImperial',
           'acPlotOrientationPortrait', 'acLineSpacingStyleExactly',
           'acInsertUnitsAngstroms', 'IAcadSubDMeshEdge', 'AcadBlock',
           'AcadSubDMesh', 'AcadSortentsTable', 'acDataRowAlignment',
           'IAcadAcCmColor', 'acLnWt030', 'acDim3PointAngular',
           'acHeaderVertInsideVisibility', 'AcAngleUnits',
           'acDimPrecisionTwo', 'AcSectionGeneration',
           'AcadLineTypes', 'acTop', 'AcadPointCloud', 'IAcadXRecord',
           'IAcadPlotConfiguration', 'AcadPlotConfigurations',
           'acDemanLoadDisable', 'acBottomLeft', 'acIntensityBlue',
           'acFullPreview', 'IAcadLineTypes', 'acVpCustomScale',
           'ac1_10', 'AcadLineType',
           'acUseDefaultDrawingAreaShortCutMenu',
           'acPaletteByDrawing', 'acCastsShadows', 'acTable',
           'acDataVertInsideColor', 'AcDrawingDirection', 'acVp1_4',
           'acDimFractional', 'acProxyBoundingBox',
           'acPreferenceClassic', 'IAcadSubEntSolidFace',
           'acVp1ft_1ft', 'acQuadSplinePoly', 'acDimWindowsDesktop',
           'acPrinterAlwaysAlert', 'AcLineSpacingStyle', 'ac1_16',
           'AcRegenType', 'acVp6in_1ft', 'acTextStyle',
           'acMInsertBlock', 'AcPatternType', 'AcDrawingAreaSCMEdit',
           'acPlotOrientationLandscape', 'kFormatOptionNone',
           'acContentColor', 'acHorzInside', 'acTitleHorzBottomColor',
           'IAcadDictionary', 'acDimLScientific',
           'acUserDefinedGradient', 'ac2000_dxf', 'acCellMarginRight',
           'AcRotationAngle', 'ac4_1', 'acAttachmentMiddleOfBottom',
           'acDegrees15', 'acAlignPntAcquisitionShiftToAcquire',
           'acVp1in_1ft', 'AcadDimension', 'acVp1_30',
           'acPdfUnderlay', 'AcBoolean', 'ac180degrees',
           'AcadSecurityParamsConstants', 'AcadComparedReference',
           'IAcadSectionTypeSettings2', 'acMax',
           'acCellContentTypeValue', 'acTableFlowLeft', 'AcadView',
           'IAcadSection2', 'acInsertUnitsUSSurveyYard',
           'AcDrawingAreaSCMDefault', 'acMtext', 'AcCellState',
           'acVp3_8in_1ft', 'AcadTextStyle', 'acLnWtByLayer',
           'AcDimHorizontalJustification', 'AcadPlotConfiguration',
           'acHeaderVertInsideLineWeight', 'acTopCenter',
           'AcadLayers', 'ac1_8', 'ac2007_Template', 'acUniform',
           'acGroup', 'acMoveTextAddLeader', 'acString',
           'acAttributeModeNormal', 'acPViewport',
           'acTitleRowTextHeight', 'acArrowOrigin2',
           'acHorizontalAlignmentMiddle', 'AcMLeaderType',
           'AcTextAngleType', 'acAttachmentBottomOfTopLine',
           'acAllViewports', 'acCellTopGridLineWeight',
           'acBottomRight', 'acBlue', 'AcToolbarItemType',
           'acAlignmentRight', 'IAcadSecurityParams',
           'acCellMarginBottom', 'acAlignPntAcquisitionAutomatic',
           'acPolicyNewDefault', 'acToolbarFlyout', 'acBitProperties',
           'acInsertUnitsMiles', 'acCellAlign', 'ac3dPolyline',
           'acVertCentered', 'acVp3_32in_1ft', 'AcOlePlotQuality',
           'AcShadowDisplayType', 'acZoomScaledRelativePSpace',
           'acCubicSurfaceMesh', 'acArrowDatumBlank',
           'acAttachmentPointMiddleCenter', 'acLnWt015',
           'IAcadSection', 'acVp1_5', 'IAcadLayer', 'acPenWidth013',
           'AcDrawingAreaSCMCommand', 'acFit',
           'AcDrawMLeaderOrderType', 'AcadText', 'IAcadDimension',
           'AcadPaperSpace', 'acHatchPatternTypePreDefined',
           'AcadViewport', 'ac2004_dxf', 'acPenWidth100',
           'acBlockContent', 'AcFormatOption', 'IAcadBlocks',
           'acVpScaleToFit', 'acCellMarginTop', 'ac2004_dwg',
           'acHorizontalAngle', 'acDimPrecisionThree',
           'AcPointCloudStylizationType', 'acTolDeviation',
           'acHeaderVertInsideColor', 'ac1_1',
           'acCustomParameterization', 'acDemandLoadCmdInvoke',
           'ac2_1', 'AcMenuFileType', 'acPaperSpaceDCS',
           'AcadSubDMeshVertex', 'acVertRight', 'acAlwaysCrease',
           'acPolicyLegacy', 'acDegreesHorz',
           'acTitleHorzTopLineWeight', 'acBlockHexagon',
           'acSimpleMesh', 'acAlignmentTopCenter', 'acR14_dwg',
           'acSectionTypeLiveSection', 'acArrowBoxBlank',
           'acTextFlagUpsideDown', 'AcHelixConstrainType',
           'acUpdateOptionNone', 'acOPQLowGraphics', 'acVp1_50',
           'acR13_dwg', 'IAcadSweptSurface', 'AcSectionState2',
           'acPreferenceCustom', 'IAcadRay', 'AcCellContentLayout',
           'IAcadDimAngular', 'acViewport3Right', 'acViewport3Above',
           'acCellBottomGridLineWeight', 'AcadViewports',
           'kCellOptionNone', 'acArrowOrigin', 'acDimArcLength',
           'acSplineLeader', 'IAcadPointCloudEx2', 'ac2018_dxf',
           'AcadDimArcLength', 'IAcadSubEntity',
           'acMergeCellStyleOverwriteDuplicates', 'ac1_2',
           'AcCoordinateSystem', 'AcadTable',
           'ACADSECURITYPARAMS_ALGID_RC4', 'ac1in_1ft',
           'IAcadExternalReference', 'acAttribute', 'acLastNormal',
           'AcOnOff', 'acDimPrecisionSix', 'acDimOrdinate',
           'AcadTableStyle', 'acCellBackgroundColor',
           'acAttachmentCenter', 'AcadPViewport', 'acFlowDirBtoT',
           'acAlignmentCenter', 'acEnglish', 'acSolid', 'ac6in_1ft',
           'acInsertUnitsUSSurveyFeet', 'acPoint3d',
           'acDataVertRightColor', 'acArrowIntegral', 'IAcadLayout',
           'IAcadDimStyles', 'acDataType', 'acTitleRow',
           'acDimFractionalStacked', 'acPolicyLegacyLegacy',
           'acTitleSuppressed', 'acSymNone', 'IAxDbDocument',
           'AcValueUnitType', 'acLnWt000',
           'acDataVertInsideLineWeight', 'AcTextAttachmentDirection',
           'AcPlotType', 'ac2007_dwg', 'acKeyboardEntryExceptScripts',
           'acEdRepeatLastCommand', 'acDimLineWithText', 'acDecimal',
           'acAttributeModeLockPosition', 'acLnWt025',
           'acTitleHorzBottomLineWeight', 'acByStyle',
           'acVp1_8in_1ft', 'acHatchLoopTypeExternal', 'IAcadArc',
           'AcDataLinkUpdateOption', 'IAcadLine', 'acDimRadial',
           'IAcadDim3PointAngular', 'acPenWidth025', 'acScanColor',
           'acHeaderVertLeftColor', 'ac8_1', 'IAcadSolid',
           'acBezierSurfaceMesh', 'acLeader',
           'acAttachmentPointTopRight', 'AcGradientPatternType',
           'IAcadMLeaderLeader', 'AcadMInsertBlock', 'AcadXRecord',
           'acKeyboardEntry', 'acColorMethodByACI', 'ac2010_dxf',
           'acTopToBottom', 'acArc', 'acCellRightGridColor',
           'AcDynamicBlockReferencePropertyUnitsType',
           'IAcadMInsertBlock', 'AcadGeomapImage', 'ACAD_ANGLE',
           'acEdSCM', 'acAbove', 'acGreen', 'acRightToLeft',
           'ac1_100', 'ac1_4in_1ft', 'AcadLine', 'acArrowNone',
           'AcProxyImage', 'acFontItalic', 'IAcadSubEntSolidVertex',
           'acAllNormal', 'acNoUnits', 'acDrawLeaderHeadFirst',
           'acExtendNone', 'acArrowUserDefined', 'acArea',
           'IAcadSubDMeshFace', 'acMenuSeparator',
           'AcDimVerticalJustification', 'acDemandLoadDisabled',
           'acSectionSubItemBackLineTop', 'acMergeAll',
           'AcZoomScaleType', 'ac2013_dxf', 'acObjectId',
           'acSimple3DPoly', 'IAcadIdPair', 'IAcadGeomapImage',
           'IAcadView', 'acAllCellProperties', 'acFlowDirection',
           'acNoneCrease', 'acBlockCell',
           'acUpdateOptionIncludeXrefs', 'acSelectionSetLast',
           'acDimAligned', 'acCubicSplinePoly', 'acRGB',
           'acSectionState2Plane', 'AcPreviewMode',
           'acInsertUnitsUnitless', 'IAcadCircle',
           'AcadMLeaderLeader', 'acInches',
           'acAttachmentPointBottomRight', 'acTolSymmetrical',
           'acTableTopToBottom', 'acAlignmentMiddleCenter',
           'acEnableBackgroundColor', 'AcViewportSplitType',
           'acInsertUnitsCentimeters', 'acInsertUnitsKilometers',
           'AcadLoftedSurface', 'acMLeader', 'ac270degrees',
           'acHeaderHorzTopVisibility', 'acAlignmentBottomRight',
           'acSectionSubItemVerticalLineTop', 'acSelectionSetAll',
           'acSectionSubItemBackLineBottom', 'acForExpression',
           'acLsPlotStyle', 'acDimPrecisionOne', 'acTolBottom',
           'acVerticalAlignmentTop', 'IAcadLayouts',
           'kInheritCellFormat', 'acRadians', 'acLnWt018',
           'acDataHorzTopColor', 'AcadHyperlink', 'acMarginTop',
           'acIntensityRed', 'acUnitDistance',
           'acInsertUnitsAstronomicalUnits', 'acNurbSurface',
           'acMergeCellStyleCopyDuplicates', 'acNorm',
           'acDimPrecisionFive', 'AcadSectionManager',
           'acSplineNoArrow', 'acVertInside', 'AcadPolygonMesh',
           'acTitleVertInsideColor',
           'AcadDynamicBlockReferenceProperty', 'acArrowDot',
           'AcadDatabase', 'IAcad3DFace', 'acApplied', 'acDegrees45',
           'acDegreeMinuteSeconds', 'acMiddleCenter', 'AcadMLeader',
           'acHeight', 'acOutside', 'AcadDimStyle', 'AcadDimRotated',
           'acScaleToFit', 'acTrueColor', 'acFractional', 'acNormals',
           'acLnWt106', 'acCellBottomVisibility', 'acAlignmentMiddle',
           'acHeaderHorzTopColor', 'AcadBlocks', 'ac3in_1ft',
           'acCellLeftGridColor', 'acHorizontalAlignmentCenter',
           'AcLoftedSurfaceNormalType', 'acMarginRight', 'acOCS',
           'acXline', 'acDataRowDataType', 'acPreDefinedGradient',
           'AcXRefDemandLoad', 'AcadMLine', 'AcSegmentAngleType',
           'acCellStateLinked', 'acVp1_1', 'acMin',
           'acHeaderSuppressed', 'IAcadDimRadialLarge',
           'acR18_Template', 'acUpdateDataFromSource',
           'acDimDiametric', 'IAcadHelix', 'acUniformParam',
           'acAutoScale', 'AcadSweptSurface', 'AcadDgnUnderlay',
           'acAttachmentPointBottomLeft', 'IAcadLayers',
           'acDragDisplayAutomatically', 'acAttributeModeConstant',
           'acDwfUnderlay', 'ac10_1', 'acBlockUserDefined',
           'AcInsertUnits', 'acVp1_64in_1ft',
           'AcadDatabasePreferences', 'acInsertUnitsYards',
           'acAlignmentMiddleRight', 'AcadShape',
           'IAcadSectionTypeSettings', 'acEnter', 'acArrowBoxFilled',
           'AcLayerStateMask', 'acCellStateFormatModified',
           'AcPlotRotation', 'IAcadUnderlay', 'acIntensities',
           'acLnWt140', 'IAcadSpline', 'acIgnoreMtextFormat',
           'acInVisibleLeader', 'acMergeCellStyleIgnoreNewStyles',
           'AcEntityName', 'acPolyfaceMesh', 'IAcadPoint',
           'AcadSubDMeshFace', 'IAcadViewport', 'acOTLink',
           'acNotStacked', 'ac100_1',
           'acSectionGenerationDestinationFile', 'acR15_Template',
           'acOQGraphics', 'acNoneContent', 'ac3dSolid',
           'acCellDataType', 'acArrowOpen', 'acSetDefaultFormat',
           'AcDimFit', 'acVp1_20', 'IAcadViews', 'IAcadHyperlinks',
           'acDimPrecisionEight', 'acKeyboardRunningObjSnap',
           'AcadRegion', 'acSelectionSetPrevious', 'acConnectBase',
           'acLnWt053', 'AcPointCloudColorType', 'AcDimCenterType',
           'AcSplineMethodType', 'acInsertUnitsPrompt',
           'acHeaderVertRightVisibility', 'AcSelect',
           'AcSectionSubItem',
           'acUpdateOptionOverwriteContentModifiedAfterUpdate',
           'AcadSurface', 'AcadPointCloudEx',
           'acTitleVertInsideVisibility', 'acHeaderRowTextStyle',
           'acDimRadialLarge', 'ac1_2in_1ft', 'acBottom',
           'IAxDbDocumentEvents', 'acAttachmentAllLine', 'acPoint',
           'acHorzCellMargin', 'acPenWidth018',
           'acColorMethodByBlock', 'acMTextContent', 'acLong',
           'acUpdateSourceFromData', 'AcadLayouts', 'acIgnoreShadows',
           'acChord', 'AcKeyboardPriority', 'IAcadLayerStateManager',
           'acViewport3Left', 'ac2010_Template', 'acIntensityGreen',
           'acInsertUnitsUSSurveyInch', 'IAcadDimRotated',
           'acInsertUnitsHectometers', 'AcadSecurityParamsType',
           'acLsNone', 'acDataVertLeftVisibility',
           'acEnableSCMOptions', 'acDataRowFillColor',
           'AcExtendOption', 'acCenterAlignment', 'acOQPhoto',
           'acDisplay', 'AcPlotOrientation', 'acTableBottomToTop',
           'acTitleHorzInsideColor', 'acVerticalAlignmentMiddle',
           'AcPointCloudExStylizationType', 'acArrowArchTick',
           'AcadLeader', 'acArrowsOnly', 'acLnWt020', 'acR15_dwg',
           'acInsertUnitsGigameters', 'AcadSecurityParams',
           'acSubtraction', 'acTrace', 'acAttachmentMiddle',
           'acQuadSpline3DPoly', 'acPartialMenuGroup', 'acDimAngular',
           'acTolNone', 'acAlignmentAligned',
           'acCellContentTypeUnknown', 'AcDataLinkUpdateDirection',
           'AcSectionType', 'acTitleVertLeftLineWeight',
           'AcadMaterials', 'IAcadOle', 'acDataVertLeftColor',
           'AcCellType', 'AcadAttribute', 'acCellLeftGridLineWeight',
           'acPoint2d', 'ACAD_COLOR', 'ac1_40', 'acTopRight',
           'AcDimArrowheadType', 'acHeaderHorzInsideColor',
           'acPaletteBySession', 'IAcadExtrudedSurface', 'AcadLayout',
           'AcadSection', 'acZoomScaledAbsolute', 'AcadLayer',
           'acUnder', 'IAcadMaterials', 'acInsertUnitsMeters',
           'acUnitless', 'acHorizontalAlignmentAligned',
           'acMenuFileSource', 'acAttachmentPointMiddleLeft',
           'IAcadDictionaries', 'acViewport3Below',
           'IAcadSortentsTable', 'IAcadTolerance',
           'acShadePlotHidden', 'acHeaderHorzBottomLineWeight',
           'acPolicyLegacyQuery', 'acPolicyLegacyDefault', 'acSpline',
           'acHeaderRowDataType', 'acGridLineStyleDouble',
           'AcCellEdgeMask', 'IAcadPointCloudEx',
           'acHeaderHorzInsideLineWeight',
           'acDataHorzInsideLineWeight', 'AcadSubEntity',
           'acDataVertRightLineWeight', 'acFontRegular',
           'acDemandLoadOnObjectDetect', 'acHeaderRow',
           'acHeaderVertRightColor', 'IAcadDimOrdinate',
           'acRepeatLastCommand', 'AcSaveAsType', 'acTopLeft',
           'AcHelixTwistType', 'acWorld', 'ACAD_LAYER',
           'acToolbarDockRight', 'acSectionSubItemSectionLineTop',
           'acAttachmentBottomOfTop', 'AcadLayerStateManager',
           'acReceivesShadows', 'acInsertUnitsFeet', 'acPenWidthUnk',
           'acViewport3Horizontal', 'acHatch',
           'ACADSECURITYPARAMS_ENCRYPT_DATA', 'acRightMask',
           'IAcadHyperlink', 'acClassification',
           'acHeaderRowFillColor',
           'acSectionGenerationDestinationReplaceBlock', 'ACAD_POINT',
           'acArrowOblique', 'acSmooth', 'acCubicSpline3DPoly',
           'IAcadMLine', 'acOQHighPhoto', 'IAcadTableStyle',
           'AcTableStyleOverrides', 'AcMeshCreaseType', 'acOTStatic',
           'acQuadSurfaceMesh', 'IAcadSubDMesh',
           'acAttachmentTopOfTop', 'acDimScientific',
           'AcPointCloudIntensityStyle', 'acAttachmentPointTopLeft',
           'AcCellProperty', 'AcTextFontStyle', 'acText',
           'IAcadComparedReference', 'acTitleVertRightColor',
           'acEngineering', 'acPenWidth035', 'acArrowDatumFilled',
           'AcadRasterImage', 'acInsertUnitsMillimeters', 'ac1_20',
           'AcadSubEntSolidNode', 'acCCW',
           'acTitleHorzInsideLineWeight', 'AcPrinterSpoolAlert',
           'AcadSubEntSolidEdge', 'acDimLFractional',
           'AcWireframeType', 'acPenWidth140', 'acR15_dxf',
           'AcSplineFrameType', 'IAcadDimArcLength',
           'AcInsertUnitsAction', 'acCellLeftVisibility',
           'IAcadShadowDisplay', 'acTitleVertLeftVisibility',
           'acDate', 'acTextAndArrows', 'IAcadTextStyle',
           'acSectionSubItemVerticalLineBottom', 'acHatchStyleNormal',
           'AcDimPrecision', 'acArrowDefault',
           'acSectionGenerationSourceAllObjects', 'acUnitAngle',
           'AcadSolid', 'acHorizontal', 'acVp1_10',
           'acSectionType3dSection', 'ac3dFace', 'acBottomCenter',
           'acDimLEngineering', 'acBottomMask', 'AcViewportScale',
           'AcTextAttachmentType', 'acFalse', 'ac2013_dwg', 'AcadRay',
           'ac2013_Template', 'AcLoadPalette',
           'acSectionSubItemBackLine', 'acVp10_1', 'acHide',
           'acInvalidCellProperty', 'acDrawLeaderTailFirst',
           'acInsertUnitsUSSurveyMile', 'acTolBasic', 'AcadViews',
           'AcUnits', 'acBottomToTop', 'acIntensityRainbow',
           'acVp1and1_2in_1ft', 'acUseDraftAngles',
           'AcTableDirection', 'acVp1_16in_1ft', 'AcGridLineType',
           'acUCS', 'acPenWidth050', 'AcTableFlowDirection',
           'acVp1_128in_1ft', 'acSymAbove', 'acSectionStateVolume',
           'acUnknownRow', 'acSectionType2dSection',
           'acDimLArchitectural', 'acHatchStyleIgnore',
           'IAcadGeoPositionMarker', 'acContentProperties',
           'acLimits', 'acAny', 'acInsertUnitsMicroinches',
           'acProxyNotShow', 'acCellTextHeight', 'IAcadPointCloud',
           'acResbuf', 'acDrawLeaderFirst', 'IAcadLWPolyline',
           'acLnWt090', 'acCellMarginHorzSpacing', 'ac3_4in_1ft',
           'AcMergeCellStyleOption', 'acLsLineWeight', 'AxDbDocument',
           'acZoomScaledRelative', 'acHeaderRowAlignment',
           'IAcadMText', 'acDegreesAny', 'acToolbarSeparator',
           'acHeaderHorzInsideVisibility', 'acMLine',
           'acArrowDotSmall', 'acTurnHeight',
           'acInsertUnitsLightYears', 'acR14_dxf',
           'AcadDim3PointAngular', 'acSimplePoly', 'AcadUCS',
           'AcDimArcLengthSymbol', 'acAttachmentBottomOfBottom',
           'acFontBoldItalic', 'acTitleRowFillColor', 'acScale',
           'acDataVertLeftLineWeight', 'acCellBottomGridColor',
           'acCellStateFormatReadOnly', 'acLineNoArrow', 'acShape',
           'acLnWt050', 'acPreserveMtextFormat',
           'AcadRevolvedSurface', 'AcBlockScaling', 'acToolbarButton',
           'acCellContentTypeField', 'ac3_16in_1ft',
           'acCellStateFormatLocked',
           'IAcadDynamicBlockReferenceProperty', 'acPolicyNamed',
           'acSymInFront', 'acOverFirstExtension', 'acOPQMonochrome',
           'AcadIdPair', 'acTitleVertRightLineWeight',
           'IAcadSubDMeshVertex', 'AcOleQuality', 'acVp3_16in_1ft',
           'ac1_50', 'acLineWithArrow', 'acMagenta', 'IAcadGroups',
           'ACADSECURITYPARAMS_SIGN_DATA', 'acCellRightVisibility',
           'acAttributeModeMultipleLine', 'acAlignmentProperty',
           'acHatchObject', 'acAttachmentHorizontal',
           'acGridLineStyleSingle', 'AcOleType', 'acMenuItem',
           'acColorMethodByLayer', 'acTitleHorzTopVisibility',
           'acR13_dxf', 'IAcadUCSs', 'acAttachmentVertical',
           'IAcadShape', 'acLsNewViewport', 'AcAttachmentPoint',
           'IAcadBlockReference', 'acTolLimits', 'acRay',
           'AcUnderlayLayerOverrideType', 'IAcadPolyfaceMesh',
           'acForEditing', 'acDimPrecisionFour', 'acVp1_16',
           'acTitleRowDataType', 'acLsFrozen', 'AcMenuItemType',
           'AcadLWPolyline', 'IAcadRegisteredApplications',
           'AcadSpline', 'AcValueDataType', 'IAcadRasterImage',
           'acLnWtByLwDefault', 'acLnWt005', 'acGradientObject',
           'acRotation', 'acTopMask', 'acPenWidth200',
           'Ac3DPolylineType', 'acCellStateContentModified',
           'acDegrees90', 'acAlignmentFit', 'AcARXDemandLoad',
           'IAcadSubEntSolidNode', 'acAlwaysRightReadingAngle',
           'AcSectionState', 'acObject', 'acUnitArea',
           'acTitleHorzInsideVisibility', 'ac1_32in_1ft', 'acUnknown',
           'AcadSectionTypeSettings', 'AcBooleanType', 'acDiagonal',
           'acVp1_40', 'acDataHorzBottomVisibility', 'AcShadePlot',
           'acAttributeModeInvisible', 'acDataHorzBottomColor',
           'acObjectColor', 'acDrawContentFirst',
           'acSectionGenerationSourceSelectedObjects',
           'acTitleVertRightVisibility', 'acIntersection',
           'acLsLocked', 'acMenuFileCompiled', 'AcLoopType',
           'acInsertUnitsMils', 'acGrads', 'acInsertUnitsNanometers',
           'AcadMaterial', 'ac1_4', 'acCreaseByLevel',
           'acCellContentLayoutFlow', 'AcDragDisplayMode',
           'acLnWt035', 'AcPlotPaperUnits', 'AcPlotScale', 'acVp2_1',
           'IAcadTable', 'acInsertUnitsDecimeters', 'acWhite',
           'acVp3_4in_1ft', 'acInsertUnitsAutoAssign', 'acNormal',
           'acDistance', 'IAcadLoftedSurface', 'IAcadHatch',
           'acExternalReference', 'IAcadTextStyles', 'acVp1_4in_1ft',
           'AcKeyboardAccelerator', 'acFitCurvePoly', 'AcadObject',
           'ac3_8in_1ft', 'acMenuSubMenu', 'acSectionState2Boundary',
           'acFontBold', 'acDimArchitecturalStacked',
           'acFirstExtensionLine', 'acDataVertRightVisibility',
           'acLnWt100', 'acAlignmentBottomLeft',
           'acTableSelectCrossing', 'AcAlignmentPointAcquisition',
           'acHatchLoopTypeDefault', 'acHatchStyleOuter',
           'acInsertAngle', 'acPolyline', 'acElevation',
           'acDemandLoadEnabled', 'acHatchLoopTypePolyline',
           'acMiddleLeft', 'acLnWt040', 'AcadTextStyles',
           'acPenWidth070', 'acLayout', 'AcBlockConnectionType',
           'IAcadSummaryInfo', 'acVp3in_1ft', 'IAcadPaperSpace',
           'acCellContentTypeBlock',
           'AcSplineKnotParameterizationType', 'acSqrtChord',
           'AcadGroup', 'acInvalidGridLine']
from comtypes import _check_version; _check_version('')
